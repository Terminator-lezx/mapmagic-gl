define(['./shared.js'], function (__chunk_1) { 'use strict';

var mapboxGlSupported = __chunk_1.createCommonjsModule(function (module) {
if (module.exports) {
    module.exports = isSupported;
} else if (window) {
    window.mapboxgl = window.mapboxgl || {};
    window.mapboxgl.supported = isSupported;
}
function isSupported(options) {
    return !!(isBrowser() && isArraySupported() && isFunctionSupported() && isObjectSupported() && isJSONSupported() && isWorkerSupported() && isUint8ClampedArraySupported() && isArrayBufferSupported() && isWebGLSupportedCached(options && options.failIfMajorPerformanceCaveat));
}
function isBrowser() {
    return typeof window !== 'undefined' && typeof document !== 'undefined';
}
function isArraySupported() {
    return Array.prototype && Array.prototype.every && Array.prototype.filter && Array.prototype.forEach && Array.prototype.indexOf && Array.prototype.lastIndexOf && Array.prototype.map && Array.prototype.some && Array.prototype.reduce && Array.prototype.reduceRight && Array.isArray;
}
function isFunctionSupported() {
    return Function.prototype && Function.prototype.bind;
}
function isObjectSupported() {
    return Object.keys && Object.create && Object.getPrototypeOf && Object.getOwnPropertyNames && Object.isSealed && Object.isFrozen && Object.isExtensible && Object.getOwnPropertyDescriptor && Object.defineProperty && Object.defineProperties && Object.seal && Object.freeze && Object.preventExtensions;
}
function isJSONSupported() {
    return 'JSON' in window && 'parse' in JSON && 'stringify' in JSON;
}
function isWorkerSupported() {
    if (!('Worker' in window && 'Blob' in window && 'URL' in window)) {
        return false;
    }
    var blob = new Blob([''], { type: 'text/javascript' });
    var workerURL = URL.createObjectURL(blob);
    var supported;
    var worker;
    try {
        worker = new Worker(workerURL);
        supported = true;
    } catch (e) {
        supported = false;
    }
    if (worker) {
        worker.terminate();
    }
    URL.revokeObjectURL(workerURL);
    return supported;
}
function isUint8ClampedArraySupported() {
    return 'Uint8ClampedArray' in window;
}
function isArrayBufferSupported() {
    return ArrayBuffer.isView;
}
var isWebGLSupportedCache = {};
function isWebGLSupportedCached(failIfMajorPerformanceCaveat) {
    if (isWebGLSupportedCache[failIfMajorPerformanceCaveat] === undefined) {
        isWebGLSupportedCache[failIfMajorPerformanceCaveat] = isWebGLSupported(failIfMajorPerformanceCaveat);
    }
    return isWebGLSupportedCache[failIfMajorPerformanceCaveat];
}
isSupported.webGLContextAttributes = {
    antialias: false,
    alpha: true,
    stencil: true,
    depth: true
};
function isWebGLSupported(failIfMajorPerformanceCaveat) {
    var canvas = document.createElement('canvas');
    var attributes = Object.create(isSupported.webGLContextAttributes);
    attributes.failIfMajorPerformanceCaveat = failIfMajorPerformanceCaveat;
    if (canvas.probablySupportsContext) {
        return canvas.probablySupportsContext('webgl', attributes) || canvas.probablySupportsContext('experimental-webgl', attributes);
    } else if (canvas.supportsContext) {
        return canvas.supportsContext('webgl', attributes) || canvas.supportsContext('experimental-webgl', attributes);
    } else {
        return canvas.getContext('webgl', attributes) || canvas.getContext('experimental-webgl', attributes);
    }
}
});

var DOM = {};
DOM.create = function (tagName, className, container) {
    var el = __chunk_1.window.document.createElement(tagName);
    if (className) {
        el.className = className;
    }
    if (container) {
        container.appendChild(el);
    }
    return el;
};
DOM.createNS = function (namespaceURI, tagName) {
    var el = __chunk_1.window.document.createElementNS(namespaceURI, tagName);
    return el;
};
var docStyle = __chunk_1.window.document ? __chunk_1.window.document.documentElement.style : null;
function testProp(props) {
    if (!docStyle) {
        return null;
    }
    for (var i = 0; i < props.length; i++) {
        if (props[i] in docStyle) {
            return props[i];
        }
    }
    return props[0];
}
var selectProp = testProp([
    'userSelect',
    'MozUserSelect',
    'WebkitUserSelect',
    'msUserSelect'
]);
var userSelect;
DOM.disableDrag = function () {
    if (docStyle && selectProp) {
        userSelect = docStyle[selectProp];
        docStyle[selectProp] = 'none';
    }
};
DOM.enableDrag = function () {
    if (docStyle && selectProp) {
        docStyle[selectProp] = userSelect;
    }
};
var transformProp = testProp([
    'transform',
    'WebkitTransform'
]);
DOM.setTransform = function (el, value) {
    el.style[transformProp] = value;
};
var passiveSupported = false;
try {
    var options$1 = Object.defineProperty({}, 'passive', {
        get: function () {
            passiveSupported = true;
        }
    });
    __chunk_1.window.addEventListener('test', options$1, options$1);
    __chunk_1.window.removeEventListener('test', options$1, options$1);
} catch (err) {
    passiveSupported = false;
}
DOM.addEventListener = function (target, type, callback, options) {
    if (options === void 0)
        options = {};
    if ('passive' in options && passiveSupported) {
        target.addEventListener(type, callback, options);
    } else {
        target.addEventListener(type, callback, options.capture);
    }
};
DOM.removeEventListener = function (target, type, callback, options) {
    if (options === void 0)
        options = {};
    if ('passive' in options && passiveSupported) {
        target.removeEventListener(type, callback, options);
    } else {
        target.removeEventListener(type, callback, options.capture);
    }
};
var suppressClick = function (e) {
    e.preventDefault();
    e.stopPropagation();
    __chunk_1.window.removeEventListener('click', suppressClick, true);
};
DOM.suppressClick = function () {
    __chunk_1.window.addEventListener('click', suppressClick, true);
    __chunk_1.window.setTimeout(function () {
        __chunk_1.window.removeEventListener('click', suppressClick, true);
    }, 0);
};
DOM.mousePos = function (el, e) {
    var rect = el.getBoundingClientRect();
    e = e.touches ? e.touches[0] : e;
    return new __chunk_1.Point(e.clientX - rect.left - el.clientLeft, e.clientY - rect.top - el.clientTop);
};
DOM.touchPos = function (el, e) {
    var rect = el.getBoundingClientRect(), points = [];
    var touches = e.type === 'touchend' ? e.changedTouches : e.touches;
    for (var i = 0; i < touches.length; i++) {
        points.push(new __chunk_1.Point(touches[i].clientX - rect.left - el.clientLeft, touches[i].clientY - rect.top - el.clientTop));
    }
    return points;
};
DOM.mouseButton = function (e) {
    if (typeof __chunk_1.window.InstallTrigger !== 'undefined' && e.button === 2 && e.ctrlKey && __chunk_1.window.navigator.platform.toUpperCase().indexOf('MAC') >= 0) {
        return 0;
    }
    return e.button;
};
DOM.remove = function (node) {
    if (node.parentNode) {
        node.parentNode.removeChild(node);
    }
};

function loadSprite (baseURL, transformRequestCallback, callback) {
    var json, image, error;
    var format = __chunk_1.browser.devicePixelRatio > 1 ? '@2x' : '';
    var jsonRequest = __chunk_1.getJSON(transformRequestCallback(__chunk_1.normalizeSpriteURL(baseURL, format, '.json'), __chunk_1.ResourceType.SpriteJSON), function (err, data) {
        jsonRequest = null;
        if (!error) {
            error = err;
            json = data;
            maybeComplete();
        }
    });
    var imageRequest = __chunk_1.getImage(transformRequestCallback(__chunk_1.normalizeSpriteURL(baseURL, format, '.png'), __chunk_1.ResourceType.SpriteImage), function (err, img) {
        imageRequest = null;
        if (!error) {
            error = err;
            image = img;
            maybeComplete();
        }
    });
    function maybeComplete() {
        if (error) {
            callback(error);
        } else if (json && image) {
            var imageData = __chunk_1.browser.getImageData(image);
            var result = {};
            for (var id in json) {
                var ref = json[id];
                var width = ref.width;
                var height = ref.height;
                var x = ref.x;
                var y = ref.y;
                var sdf = ref.sdf;
                var pixelRatio = ref.pixelRatio;
                var data = new __chunk_1.RGBAImage({
                    width: width,
                    height: height
                });
                __chunk_1.RGBAImage.copy(imageData, data, {
                    x: x,
                    y: y
                }, {
                    x: 0,
                    y: 0
                }, {
                    width: width,
                    height: height
                });
                result[id] = {
                    data: data,
                    pixelRatio: pixelRatio,
                    sdf: sdf
                };
            }
            callback(null, result);
        }
    }
    return {
        cancel: function cancel() {
            if (jsonRequest) {
                jsonRequest.cancel();
                jsonRequest = null;
            }
            if (imageRequest) {
                imageRequest.cancel();
                imageRequest = null;
            }
        }
    };
}

var padding = 1;
var ImageManager = function ImageManager() {
    this.images = {};
    this.loaded = false;
    this.requestors = [];
    this.patterns = {};
    this.atlasImage = new __chunk_1.RGBAImage({
        width: 1,
        height: 1
    });
    this.dirty = true;
};
ImageManager.prototype.isLoaded = function isLoaded() {
    return this.loaded;
};
ImageManager.prototype.setLoaded = function setLoaded(loaded) {
    var this$1 = this;
    if (this.loaded === loaded) {
        return;
    }
    this.loaded = loaded;
    if (loaded) {
        for (var i = 0, list = this$1.requestors; i < list.length; i += 1) {
            var ref = list[i];
            var ids = ref.ids;
            var callback = ref.callback;
            this$1._notify(ids, callback);
        }
        this.requestors = [];
    }
};
ImageManager.prototype.getImage = function getImage(id) {
    return this.images[id];
};
ImageManager.prototype.addImage = function addImage(id, image) {
    this.images[id] = image;
};
ImageManager.prototype.removeImage = function removeImage(id) {
    delete this.images[id];
    delete this.patterns[id];
};
ImageManager.prototype.listImages = function listImages() {
    return Object.keys(this.images);
};
ImageManager.prototype.getImages = function getImages(ids, callback) {
    var this$1 = this;
    var hasAllDependencies = true;
    if (!this.isLoaded()) {
        for (var i = 0, list = ids; i < list.length; i += 1) {
            var id = list[i];
            if (!this$1.images[id]) {
                hasAllDependencies = false;
            }
        }
    }
    if (this.isLoaded() || hasAllDependencies) {
        this._notify(ids, callback);
    } else {
        this.requestors.push({
            ids: ids,
            callback: callback
        });
    }
};
ImageManager.prototype._notify = function _notify(ids, callback) {
    var this$1 = this;
    var response = {};
    for (var i = 0, list = ids; i < list.length; i += 1) {
        var id = list[i];
        var image = this$1.images[id];
        if (image) {
            response[id] = {
                data: image.data.clone(),
                pixelRatio: image.pixelRatio,
                sdf: image.sdf
            };
        }
    }
    callback(null, response);
};
ImageManager.prototype.getPixelSize = function getPixelSize() {
    var ref = this.atlasImage;
    var width = ref.width;
    var height = ref.height;
    return {
        width: width,
        height: height
    };
};
ImageManager.prototype.getPattern = function getPattern(id) {
    var pattern = this.patterns[id];
    if (pattern) {
        return pattern.position;
    }
    var image = this.getImage(id);
    if (!image) {
        return null;
    }
    var w = image.data.width + padding * 2;
    var h = image.data.height + padding * 2;
    var bin = {
        w: w,
        h: h,
        x: 0,
        y: 0
    };
    var position = new __chunk_1.ImagePosition(bin, image);
    this.patterns[id] = {
        bin: bin,
        position: position
    };
    this._updatePatternAtlas();
    return position;
};
ImageManager.prototype.bind = function bind(context) {
    var gl = context.gl;
    if (!this.atlasTexture) {
        this.atlasTexture = new __chunk_1.Texture(context, this.atlasImage, gl.RGBA);
    } else if (this.dirty) {
        this.atlasTexture.update(this.atlasImage);
        this.dirty = false;
    }
    this.atlasTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
};
ImageManager.prototype._updatePatternAtlas = function _updatePatternAtlas() {
    var this$1 = this;
    var bins = [];
    for (var id in this$1.patterns) {
        bins.push(this$1.patterns[id].bin);
    }
    var ref = __chunk_1.potpack(bins);
    var w = ref.w;
    var h = ref.h;
    var dst = this.atlasImage;
    dst.resize({
        width: w || 1,
        height: h || 1
    });
    for (var id$1 in this$1.patterns) {
        var ref$1 = this$1.patterns[id$1];
        var bin = ref$1.bin;
        var x = bin.x + padding;
        var y = bin.y + padding;
        var src = this$1.images[id$1].data;
        var w$1 = src.width;
        var h$1 = src.height;
        __chunk_1.RGBAImage.copy(src, dst, {
            x: 0,
            y: 0
        }, {
            x: x,
            y: y
        }, {
            width: w$1,
            height: h$1
        });
        __chunk_1.RGBAImage.copy(src, dst, {
            x: 0,
            y: h$1 - 1
        }, {
            x: x,
            y: y - 1
        }, {
            width: w$1,
            height: 1
        });
        __chunk_1.RGBAImage.copy(src, dst, {
            x: 0,
            y: 0
        }, {
            x: x,
            y: y + h$1
        }, {
            width: w$1,
            height: 1
        });
        __chunk_1.RGBAImage.copy(src, dst, {
            x: w$1 - 1,
            y: 0
        }, {
            x: x - 1,
            y: y
        }, {
            width: 1,
            height: h$1
        });
        __chunk_1.RGBAImage.copy(src, dst, {
            x: 0,
            y: 0
        }, {
            x: x + w$1,
            y: y
        }, {
            width: 1,
            height: h$1
        });
    }
    this.dirty = true;
};

function loadGlyphRange (fontstack, range, urlTemplate, requestTransform, callback) {
    var begin = range * 256;
    var end = begin + 255;
    var request = requestTransform(__chunk_1.normalizeGlyphsURL(urlTemplate).replace('{fontstack}', fontstack).replace('{range}', begin + '-' + end), __chunk_1.ResourceType.Glyphs);
    __chunk_1.getArrayBuffer(request, function (err, data) {
        if (err) {
            callback(err);
        } else if (data) {
            var glyphs = {};
            for (var i = 0, list = __chunk_1.parseGlyphPBF(data); i < list.length; i += 1) {
                var glyph = list[i];
                glyphs[glyph.id] = glyph;
            }
            callback(null, glyphs);
        }
    });
}

var tinySdf = TinySDF;
var INF = 100000000000000000000;
function TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight) {
    this.fontSize = fontSize || 24;
    this.buffer = buffer === undefined ? 3 : buffer;
    this.cutoff = cutoff || 0.25;
    this.fontFamily = fontFamily || 'sans-serif';
    this.fontWeight = fontWeight || 'normal';
    this.radius = radius || 8;
    var size = this.size = this.fontSize + this.buffer * 2;
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.canvas.height = size;
    this.ctx = this.canvas.getContext('2d');
    this.ctx.font = this.fontWeight + ' ' + this.fontSize + 'px ' + this.fontFamily;
    this.ctx.textBaseline = 'middle';
    this.ctx.fillStyle = 'black';
    this.gridOuter = new Float64Array(size * size);
    this.gridInner = new Float64Array(size * size);
    this.f = new Float64Array(size);
    this.d = new Float64Array(size);
    this.z = new Float64Array(size + 1);
    this.v = new Int16Array(size);
    this.middle = Math.round(size / 2 * (navigator.userAgent.indexOf('Gecko/') >= 0 ? 1.2 : 1));
}
TinySDF.prototype.draw = function (char) {
    var this$1 = this;
    this.ctx.clearRect(0, 0, this.size, this.size);
    this.ctx.fillText(char, this.buffer, this.middle);
    var imgData = this.ctx.getImageData(0, 0, this.size, this.size);
    var alphaChannel = new Uint8ClampedArray(this.size * this.size);
    for (var i = 0; i < this.size * this.size; i++) {
        var a = imgData.data[i * 4 + 3] / 255;
        this$1.gridOuter[i] = a === 1 ? 0 : a === 0 ? INF : Math.pow(Math.max(0, 0.5 - a), 2);
        this$1.gridInner[i] = a === 1 ? INF : a === 0 ? 0 : Math.pow(Math.max(0, a - 0.5), 2);
    }
    edt(this.gridOuter, this.size, this.size, this.f, this.d, this.v, this.z);
    edt(this.gridInner, this.size, this.size, this.f, this.d, this.v, this.z);
    for (i = 0; i < this.size * this.size; i++) {
        var d = this$1.gridOuter[i] - this$1.gridInner[i];
        alphaChannel[i] = Math.max(0, Math.min(255, Math.round(255 - 255 * (d / this$1.radius + this$1.cutoff))));
    }
    return alphaChannel;
};
function edt(data, width, height, f, d, v, z) {
    for (var x = 0; x < width; x++) {
        for (var y = 0; y < height; y++) {
            f[y] = data[y * width + x];
        }
        edt1d(f, d, v, z, height);
        for (y = 0; y < height; y++) {
            data[y * width + x] = d[y];
        }
    }
    for (y = 0; y < height; y++) {
        for (x = 0; x < width; x++) {
            f[x] = data[y * width + x];
        }
        edt1d(f, d, v, z, width);
        for (x = 0; x < width; x++) {
            data[y * width + x] = Math.sqrt(d[x]);
        }
    }
}
function edt1d(f, d, v, z, n) {
    v[0] = 0;
    z[0] = -INF;
    z[1] = +INF;
    for (var q = 1, k = 0; q < n; q++) {
        var s = (f[q] + q * q - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);
        while (s <= z[k]) {
            k--;
            s = (f[q] + q * q - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);
        }
        k++;
        v[k] = q;
        z[k] = s;
        z[k + 1] = +INF;
    }
    for (q = 0, k = 0; q < n; q++) {
        while (z[k + 1] < q) {
            k++;
        }
        d[q] = (q - v[k]) * (q - v[k]) + f[v[k]];
    }
}

var GlyphManager = function GlyphManager(requestTransform, localIdeographFontFamily) {
    this.requestTransform = requestTransform;
    this.localIdeographFontFamily = localIdeographFontFamily;
    this.entries = {};
};
GlyphManager.prototype.setURL = function setURL(url) {
    this.url = url;
};
GlyphManager.prototype.getGlyphs = function getGlyphs(glyphs, callback) {
    var this$1 = this;
    var all = [];
    for (var stack in glyphs) {
        for (var i = 0, list = glyphs[stack]; i < list.length; i += 1) {
            var id = list[i];
            all.push({
                stack: stack,
                id: id
            });
        }
    }
    __chunk_1.asyncAll(all, function (ref, callback) {
        var stack = ref.stack;
        var id = ref.id;
        var entry = this$1.entries[stack];
        if (!entry) {
            entry = this$1.entries[stack] = {
                glyphs: {},
                requests: {}
            };
        }
        var glyph = entry.glyphs[id];
        if (glyph !== undefined) {
            callback(null, {
                stack: stack,
                id: id,
                glyph: glyph
            });
            return;
        }
        glyph = this$1._tinySDF(entry, stack, id);
        if (glyph) {
            callback(null, {
                stack: stack,
                id: id,
                glyph: glyph
            });
            return;
        }
        var range = Math.floor(id / 256);
        if (range * 256 > 65535) {
            callback(new Error('glyphs > 65535 not supported'));
            return;
        }
        var requests = entry.requests[range];
        if (!requests) {
            requests = entry.requests[range] = [];
            GlyphManager.loadGlyphRange(stack, range, this$1.url, this$1.requestTransform, function (err, response) {
                if (response) {
                    for (var id in response) {
                        entry.glyphs[+id] = response[+id];
                    }
                }
                for (var i = 0, list = requests; i < list.length; i += 1) {
                    var cb = list[i];
                    cb(err, response);
                }
                delete entry.requests[range];
            });
        }
        requests.push(function (err, result) {
            if (err) {
                callback(err);
            } else if (result) {
                callback(null, {
                    stack: stack,
                    id: id,
                    glyph: result[id] || null
                });
            }
        });
    }, function (err, glyphs) {
        if (err) {
            callback(err);
        } else if (glyphs) {
            var result = {};
            for (var i = 0, list = glyphs; i < list.length; i += 1) {
                var ref = list[i];
                var stack = ref.stack;
                var id = ref.id;
                var glyph = ref.glyph;
                (result[stack] || (result[stack] = {}))[id] = glyph && {
                    id: glyph.id,
                    bitmap: glyph.bitmap.clone(),
                    metrics: glyph.metrics
                };
            }
            callback(null, result);
        }
    });
};
GlyphManager.prototype._tinySDF = function _tinySDF(entry, stack, id) {
    var family = this.localIdeographFontFamily;
    if (!family) {
        return;
    }
    if (!__chunk_1.isChar['CJK Unified Ideographs'](id) && !__chunk_1.isChar['Hangul Syllables'](id)) {
        return;
    }
    var tinySDF = entry.tinySDF;
    if (!tinySDF) {
        var fontWeight = '400';
        if (/bold/i.test(stack)) {
            fontWeight = '900';
        } else if (/medium/i.test(stack)) {
            fontWeight = '500';
        } else if (/light/i.test(stack)) {
            fontWeight = '200';
        }
        tinySDF = entry.tinySDF = new GlyphManager.TinySDF(24, 3, 8, 0.25, family, fontWeight);
    }
    return {
        id: id,
        bitmap: new __chunk_1.AlphaImage({
            width: 30,
            height: 30
        }, tinySDF.draw(String.fromCharCode(id))),
        metrics: {
            width: 24,
            height: 24,
            left: 0,
            top: -8,
            advance: 24
        }
    };
};
GlyphManager.loadGlyphRange = loadGlyphRange;
GlyphManager.TinySDF = tinySdf;

var LightPositionProperty = function LightPositionProperty() {
    this.specification = __chunk_1.styleSpec.light.position;
};
LightPositionProperty.prototype.possiblyEvaluate = function possiblyEvaluate(value, parameters) {
    return __chunk_1.sphericalToCartesian(value.expression.evaluate(parameters));
};
LightPositionProperty.prototype.interpolate = function interpolate$1(a, b, t) {
    return {
        x: __chunk_1.number(a.x, b.x, t),
        y: __chunk_1.number(a.y, b.y, t),
        z: __chunk_1.number(a.z, b.z, t)
    };
};
var properties = new __chunk_1.Properties({
    'anchor': new __chunk_1.DataConstantProperty(__chunk_1.styleSpec.light.anchor),
    'position': new LightPositionProperty(),
    'color': new __chunk_1.DataConstantProperty(__chunk_1.styleSpec.light.color),
    'intensity': new __chunk_1.DataConstantProperty(__chunk_1.styleSpec.light.intensity)
});
var TRANSITION_SUFFIX = '-transition';
var Light = function (Evented) {
    function Light(lightOptions) {
        Evented.call(this);
        this._transitionable = new __chunk_1.Transitionable(properties);
        this.setLight(lightOptions);
        this._transitioning = this._transitionable.untransitioned();
    }
    if (Evented)
        Light.__proto__ = Evented;
    Light.prototype = Object.create(Evented && Evented.prototype);
    Light.prototype.constructor = Light;
    Light.prototype.getLight = function getLight() {
        return this._transitionable.serialize();
    };
    Light.prototype.setLight = function setLight(options) {
        var this$1 = this;
        if (this._validate(__chunk_1.validateLight, options)) {
            return;
        }
        for (var name in options) {
            var value = options[name];
            if (__chunk_1.endsWith(name, TRANSITION_SUFFIX)) {
                this$1._transitionable.setTransition(name.slice(0, -TRANSITION_SUFFIX.length), value);
            } else {
                this$1._transitionable.setValue(name, value);
            }
        }
    };
    Light.prototype.updateTransitions = function updateTransitions(parameters) {
        this._transitioning = this._transitionable.transitioned(parameters, this._transitioning);
    };
    Light.prototype.hasTransition = function hasTransition() {
        return this._transitioning.hasTransition();
    };
    Light.prototype.recalculate = function recalculate(parameters) {
        this.properties = this._transitioning.possiblyEvaluate(parameters);
    };
    Light.prototype._validate = function _validate(validate, value) {
        return __chunk_1.emitValidationErrors(this, validate.call(__chunk_1.validateStyle, __chunk_1.extend({
            value: value,
            style: {
                glyphs: true,
                sprite: true
            },
            styleSpec: __chunk_1.styleSpec
        })));
    };
    return Light;
}(__chunk_1.Evented);

var LineAtlas = function LineAtlas(width, height) {
    this.width = width;
    this.height = height;
    this.nextRow = 0;
    this.bytes = 4;
    this.data = new Uint8Array(this.width * this.height * this.bytes);
    this.positions = {};
};
LineAtlas.prototype.getDash = function getDash(dasharray, round) {
    var key = dasharray.join(',') + String(round);
    if (!this.positions[key]) {
        this.positions[key] = this.addDash(dasharray, round);
    }
    return this.positions[key];
};
LineAtlas.prototype.addDash = function addDash(dasharray, round) {
    var this$1 = this;
    var n = round ? 7 : 0;
    var height = 2 * n + 1;
    var offset = 128;
    if (this.nextRow + height > this.height) {
        __chunk_1.warnOnce('LineAtlas out of space');
        return null;
    }
    var length = 0;
    for (var i = 0; i < dasharray.length; i++) {
        length += dasharray[i];
    }
    var stretch = this.width / length;
    var halfWidth = stretch / 2;
    var oddLength = dasharray.length % 2 === 1;
    for (var y = -n; y <= n; y++) {
        var row = this$1.nextRow + n + y;
        var index = this$1.width * row;
        var left = oddLength ? -dasharray[dasharray.length - 1] : 0;
        var right = dasharray[0];
        var partIndex = 1;
        for (var x = 0; x < this.width; x++) {
            while (right < x / stretch) {
                left = right;
                right = right + dasharray[partIndex];
                if (oddLength && partIndex === dasharray.length - 1) {
                    right += dasharray[0];
                }
                partIndex++;
            }
            var distLeft = Math.abs(x - left * stretch);
            var distRight = Math.abs(x - right * stretch);
            var dist = Math.min(distLeft, distRight);
            var inside = partIndex % 2 === 1;
            var signedDistance = void 0;
            if (round) {
                var distMiddle = n ? y / n * (halfWidth + 1) : 0;
                if (inside) {
                    var distEdge = halfWidth - Math.abs(distMiddle);
                    signedDistance = Math.sqrt(dist * dist + distEdge * distEdge);
                } else {
                    signedDistance = halfWidth - Math.sqrt(dist * dist + distMiddle * distMiddle);
                }
            } else {
                signedDistance = (inside ? 1 : -1) * dist;
            }
            this$1.data[3 + (index + x) * 4] = Math.max(0, Math.min(255, signedDistance + offset));
        }
    }
    var pos = {
        y: (this.nextRow + n + 0.5) / this.height,
        height: 2 * n / this.height,
        width: length
    };
    this.nextRow += height;
    this.dirty = true;
    return pos;
};
LineAtlas.prototype.bind = function bind(context) {
    var gl = context.gl;
    if (!this.texture) {
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);
    } else {
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        if (this.dirty) {
            this.dirty = false;
            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.width, this.height, gl.RGBA, gl.UNSIGNED_BYTE, this.data);
        }
    }
};

var Dispatcher = function Dispatcher(workerPool, parent) {
    var this$1 = this;
    this.workerPool = workerPool;
    this.actors = [];
    this.currentActor = 0;
    this.id = __chunk_1.uniqueId();
    var workers = this.workerPool.acquire(this.id);
    for (var i = 0; i < workers.length; i++) {
        var worker = workers[i];
        var actor = new Dispatcher.Actor(worker, parent, this$1.id);
        actor.name = 'Worker ' + i;
        this$1.actors.push(actor);
    }
};
Dispatcher.prototype.broadcast = function broadcast(type, data, cb) {
    cb = cb || function () {
    };
    __chunk_1.asyncAll(this.actors, function (actor, done) {
        actor.send(type, data, done);
    }, cb);
};
Dispatcher.prototype.send = function send(type, data, callback, targetID) {
    if (typeof targetID !== 'number' || isNaN(targetID)) {
        targetID = this.currentActor = (this.currentActor + 1) % this.actors.length;
    }
    this.actors[targetID].send(type, data, callback);
    return targetID;
};
Dispatcher.prototype.remove = function remove() {
    this.actors.forEach(function (actor) {
        actor.remove();
    });
    this.actors = [];
    this.workerPool.release(this.id);
};
Dispatcher.Actor = __chunk_1.Actor;

function loadTileJSON (options, requestTransformFn, callback) {
    var loaded = function (err, tileJSON) {
        if (err) {
            return callback(err);
        } else if (tileJSON) {
            var result = __chunk_1.pick(tileJSON, [
                'tiles',
                'minzoom',
                'maxzoom',
                'attribution',
                'mapbox_logo',
                'bounds'
            ]);
            if (tileJSON.vector_layers) {
                result.vectorLayers = tileJSON.vector_layers;
                result.vectorLayerIds = result.vectorLayers.map(function (layer) {
                    return layer.id;
                });
            }
            callback(null, result);
        }
    };
    if (options.url) {
        return __chunk_1.getJSON(requestTransformFn(__chunk_1.normalizeSourceURL(options.url), __chunk_1.ResourceType.Source), loaded);
    } else {
        return __chunk_1.browser.frame(function () {
            return loaded(null, options);
        });
    }
}

var LngLat = function LngLat(lng, lat) {
    if (isNaN(lng) || isNaN(lat)) {
        throw new Error('Invalid LngLat object: (' + lng + ', ' + lat + ')');
    }
    this.lng = +lng;
    this.lat = +lat;
    if (this.lat > 90 || this.lat < -90) {
        throw new Error('Invalid LngLat latitude value: must be between -90 and 90');
    }
};
LngLat.prototype.wrap = function wrap$1() {
    return new LngLat(__chunk_1.wrap(this.lng, -180, 180), this.lat);
};
LngLat.prototype.toArray = function toArray() {
    return [
        this.lng,
        this.lat
    ];
};
LngLat.prototype.toString = function toString() {
    return 'LngLat(' + this.lng + ', ' + this.lat + ')';
};
LngLat.prototype.toBounds = function toBounds(radius) {
    var earthCircumferenceInMetersAtEquator = 40075017;
    var latAccuracy = 360 * radius / earthCircumferenceInMetersAtEquator, lngAccuracy = latAccuracy / Math.cos(Math.PI / 180 * this.lat);
    return new LngLatBounds(new LngLat(this.lng - lngAccuracy, this.lat - latAccuracy), new LngLat(this.lng + lngAccuracy, this.lat + latAccuracy));
};
LngLat.convert = function convert(input) {
    if (input instanceof LngLat) {
        return input;
    }
    if (Array.isArray(input) && (input.length === 2 || input.length === 3)) {
        return new LngLat(Number(input[0]), Number(input[1]));
    }
    if (!Array.isArray(input) && typeof input === 'object' && input !== null) {
        return new LngLat(Number(input.lng), Number(input.lat));
    }
    throw new Error('`LngLatLike` argument must be specified as a LngLat instance, an object {lng: <lng>, lat: <lat>}, or an array of [<lng>, <lat>]');
};

var LngLatBounds = function LngLatBounds(sw, ne) {
    if (!sw) {
        return;
    } else if (ne) {
        this.setSouthWest(sw).setNorthEast(ne);
    } else if (sw.length === 4) {
        this.setSouthWest([
            sw[0],
            sw[1]
        ]).setNorthEast([
            sw[2],
            sw[3]
        ]);
    } else {
        this.setSouthWest(sw[0]).setNorthEast(sw[1]);
    }
};
LngLatBounds.prototype.setNorthEast = function setNorthEast(ne) {
    this._ne = ne instanceof LngLat ? new LngLat(ne.lng, ne.lat) : LngLat.convert(ne);
    return this;
};
LngLatBounds.prototype.setSouthWest = function setSouthWest(sw) {
    this._sw = sw instanceof LngLat ? new LngLat(sw.lng, sw.lat) : LngLat.convert(sw);
    return this;
};
LngLatBounds.prototype.extend = function extend(obj) {
    var sw = this._sw, ne = this._ne;
    var sw2, ne2;
    if (obj instanceof LngLat) {
        sw2 = obj;
        ne2 = obj;
    } else if (obj instanceof LngLatBounds) {
        sw2 = obj._sw;
        ne2 = obj._ne;
        if (!sw2 || !ne2) {
            return this;
        }
    } else {
        if (Array.isArray(obj)) {
            if (obj.every(Array.isArray)) {
                return this.extend(LngLatBounds.convert(obj));
            } else {
                return this.extend(LngLat.convert(obj));
            }
        }
        return this;
    }
    if (!sw && !ne) {
        this._sw = new LngLat(sw2.lng, sw2.lat);
        this._ne = new LngLat(ne2.lng, ne2.lat);
    } else {
        sw.lng = Math.min(sw2.lng, sw.lng);
        sw.lat = Math.min(sw2.lat, sw.lat);
        ne.lng = Math.max(ne2.lng, ne.lng);
        ne.lat = Math.max(ne2.lat, ne.lat);
    }
    return this;
};
LngLatBounds.prototype.getCenter = function getCenter() {
    return new LngLat((this._sw.lng + this._ne.lng) / 2, (this._sw.lat + this._ne.lat) / 2);
};
LngLatBounds.prototype.getSouthWest = function getSouthWest() {
    return this._sw;
};
LngLatBounds.prototype.getNorthEast = function getNorthEast() {
    return this._ne;
};
LngLatBounds.prototype.getNorthWest = function getNorthWest() {
    return new LngLat(this.getWest(), this.getNorth());
};
LngLatBounds.prototype.getSouthEast = function getSouthEast() {
    return new LngLat(this.getEast(), this.getSouth());
};
LngLatBounds.prototype.getWest = function getWest() {
    return this._sw.lng;
};
LngLatBounds.prototype.getSouth = function getSouth() {
    return this._sw.lat;
};
LngLatBounds.prototype.getEast = function getEast() {
    return this._ne.lng;
};
LngLatBounds.prototype.getNorth = function getNorth() {
    return this._ne.lat;
};
LngLatBounds.prototype.toArray = function toArray() {
    return [
        this._sw.toArray(),
        this._ne.toArray()
    ];
};
LngLatBounds.prototype.toString = function toString() {
    return 'LngLatBounds(' + this._sw.toString() + ', ' + this._ne.toString() + ')';
};
LngLatBounds.prototype.isEmpty = function isEmpty() {
    return !(this._sw && this._ne);
};
LngLatBounds.convert = function convert(input) {
    if (!input || input instanceof LngLatBounds) {
        return input;
    }
    return new LngLatBounds(input);
};

var TileBounds = function TileBounds(bounds, minzoom, maxzoom) {
    this.bounds = LngLatBounds.convert(this.validateBounds(bounds));
    this.minzoom = minzoom || 0;
    this.maxzoom = maxzoom || 24;
};
TileBounds.prototype.validateBounds = function validateBounds(bounds) {
    if (!Array.isArray(bounds) || bounds.length !== 4) {
        return [
            -180,
            -90,
            180,
            90
        ];
    }
    return [
        Math.max(-180, bounds[0]),
        Math.max(-90, bounds[1]),
        Math.min(180, bounds[2]),
        Math.min(90, bounds[3])
    ];
};
TileBounds.prototype.contains = function contains(tileID) {
    var level = {
        minX: Math.floor(this.lngX(this.bounds.getWest(), tileID.z)),
        minY: Math.floor(this.latY(this.bounds.getNorth(), tileID.z)),
        maxX: Math.ceil(this.lngX(this.bounds.getEast(), tileID.z)),
        maxY: Math.ceil(this.latY(this.bounds.getSouth(), tileID.z))
    };
    var hit = tileID.x >= level.minX && tileID.x < level.maxX && tileID.y >= level.minY && tileID.y < level.maxY;
    return hit;
};
TileBounds.prototype.lngX = function lngX(lng, zoom) {
    return (lng + 180) * (Math.pow(2, zoom) / 360);
};
TileBounds.prototype.latY = function latY(lat, zoom) {
    var f = __chunk_1.clamp(Math.sin(Math.PI / 180 * lat), -0.9999, 0.9999);
    var scale = Math.pow(2, zoom) / (2 * Math.PI);
    return Math.pow(2, zoom - 1) + 0.5 * Math.log((1 + f) / (1 - f)) * -scale;
};

var VectorTileSource = function (Evented) {
    function VectorTileSource(id, options, dispatcher, eventedParent) {
        Evented.call(this);
        this.id = id;
        this.dispatcher = dispatcher;
        this.type = 'vector';
        this.minzoom = 0;
        this.maxzoom = 22;
        this.scheme = 'xyz';
        this.tileSize = 512;
        this.reparseOverscaled = true;
        this.isTileClipped = true;
        __chunk_1.extend(this, __chunk_1.pick(options, [
            'url',
            'scheme',
            'tileSize'
        ]));
        this._options = __chunk_1.extend({ type: 'vector' }, options);
        this._collectResourceTiming = options.collectResourceTiming;
        if (this.tileSize !== 512) {
            throw new Error('vector tile sources must have a tileSize of 512');
        }
        this.setEventedParent(eventedParent);
    }
    if (Evented)
        VectorTileSource.__proto__ = Evented;
    VectorTileSource.prototype = Object.create(Evented && Evented.prototype);
    VectorTileSource.prototype.constructor = VectorTileSource;
    VectorTileSource.prototype.load = function load() {
        var this$1 = this;
        this.fire(new __chunk_1.Event('dataloading', { dataType: 'source' }));
        this._tileJSONRequest = loadTileJSON(this._options, this.map._transformRequest, function (err, tileJSON) {
            this$1._tileJSONRequest = null;
            if (err) {
                this$1.fire(new __chunk_1.ErrorEvent(err));
            } else if (tileJSON) {
                __chunk_1.extend(this$1, tileJSON);
                if (tileJSON.bounds) {
                    this$1.tileBounds = new TileBounds(tileJSON.bounds, this$1.minzoom, this$1.maxzoom);
                }
                __chunk_1.postTurnstileEvent(tileJSON.tiles);
                this$1.fire(new __chunk_1.Event('data', {
                    dataType: 'source',
                    sourceDataType: 'metadata'
                }));
                this$1.fire(new __chunk_1.Event('data', {
                    dataType: 'source',
                    sourceDataType: 'content'
                }));
            }
        });
    };
    VectorTileSource.prototype.hasTile = function hasTile(tileID) {
        return !this.tileBounds || this.tileBounds.contains(tileID.canonical);
    };
    VectorTileSource.prototype.onAdd = function onAdd(map) {
        this.map = map;
        this.load();
    };
    VectorTileSource.prototype.onRemove = function onRemove() {
        if (this._tileJSONRequest) {
            this._tileJSONRequest.cancel();
            this._tileJSONRequest = null;
        }
    };
    VectorTileSource.prototype.serialize = function serialize() {
        return __chunk_1.extend({}, this._options);
    };
    VectorTileSource.prototype.loadTile = function loadTile(tile, callback) {
        var url = __chunk_1.normalizeTileURL(tile.tileID.canonical.url(this.tiles, this.scheme), this.url);
        var params = {
            request: this.map._transformRequest(url, __chunk_1.ResourceType.Tile),
            uid: tile.uid,
            tileID: tile.tileID,
            zoom: tile.tileID.overscaledZ,
            tileSize: this.tileSize * tile.tileID.overscaleFactor(),
            type: this.type,
            source: this.id,
            pixelRatio: __chunk_1.browser.devicePixelRatio,
            showCollisionBoxes: this.map.showCollisionBoxes
        };
        params.request.collectResourceTiming = this._collectResourceTiming;
        if (tile.workerID === undefined || tile.state === 'expired') {
            tile.workerID = this.dispatcher.send('loadTile', params, done.bind(this));
        } else if (tile.state === 'loading') {
            tile.reloadCallback = callback;
        } else {
            this.dispatcher.send('reloadTile', params, done.bind(this), tile.workerID);
        }
        function done(err, data) {
            if (tile.aborted) {
                return callback(null);
            }
            if (err && err.status !== 404) {
                return callback(err);
            }
            if (data && data.resourceTiming) {
                tile.resourceTiming = data.resourceTiming;
            }
            if (this.map._refreshExpiredTiles && data) {
                tile.setExpiryData(data);
            }
            tile.loadVectorData(data, this.map.painter);
            callback(null);
            if (tile.reloadCallback) {
                this.loadTile(tile, tile.reloadCallback);
                tile.reloadCallback = null;
            }
        }
    };
    VectorTileSource.prototype.abortTile = function abortTile(tile) {
        this.dispatcher.send('abortTile', {
            uid: tile.uid,
            type: this.type,
            source: this.id
        }, undefined, tile.workerID);
    };
    VectorTileSource.prototype.unloadTile = function unloadTile(tile) {
        tile.unloadVectorData();
        this.dispatcher.send('removeTile', {
            uid: tile.uid,
            type: this.type,
            source: this.id
        }, undefined, tile.workerID);
    };
    VectorTileSource.prototype.hasTransition = function hasTransition() {
        return false;
    };
    return VectorTileSource;
}(__chunk_1.Evented);

var RasterTileSource = function (Evented) {
    function RasterTileSource(id, options, dispatcher, eventedParent) {
        Evented.call(this);
        this.id = id;
        this.dispatcher = dispatcher;
        this.setEventedParent(eventedParent);
        this.type = 'raster';
        this.minzoom = 0;
        this.maxzoom = 22;
        this.roundZoom = true;
        this.scheme = 'xyz';
        this.tileSize = 512;
        this._loaded = false;
        this._options = __chunk_1.extend({}, options);
        __chunk_1.extend(this, __chunk_1.pick(options, [
            'url',
            'scheme',
            'tileSize'
        ]));
    }
    if (Evented)
        RasterTileSource.__proto__ = Evented;
    RasterTileSource.prototype = Object.create(Evented && Evented.prototype);
    RasterTileSource.prototype.constructor = RasterTileSource;
    RasterTileSource.prototype.load = function load() {
        var this$1 = this;
        this.fire(new __chunk_1.Event('dataloading', { dataType: 'source' }));
        this._tileJSONRequest = loadTileJSON(this._options, this.map._transformRequest, function (err, tileJSON) {
            this$1._tileJSONRequest = null;
            if (err) {
                this$1.fire(new __chunk_1.ErrorEvent(err));
            } else if (tileJSON) {
                __chunk_1.extend(this$1, tileJSON);
                if (tileJSON.bounds) {
                    this$1.tileBounds = new TileBounds(tileJSON.bounds, this$1.minzoom, this$1.maxzoom);
                }
                __chunk_1.postTurnstileEvent(tileJSON.tiles);
                this$1.fire(new __chunk_1.Event('data', {
                    dataType: 'source',
                    sourceDataType: 'metadata'
                }));
                this$1.fire(new __chunk_1.Event('data', {
                    dataType: 'source',
                    sourceDataType: 'content'
                }));
            }
        });
    };
    RasterTileSource.prototype.onAdd = function onAdd(map) {
        this.map = map;
        this.load();
    };
    RasterTileSource.prototype.onRemove = function onRemove() {
        if (this._tileJSONRequest) {
            this._tileJSONRequest.cancel();
            this._tileJSONRequest = null;
        }
    };
    RasterTileSource.prototype.serialize = function serialize() {
        return __chunk_1.extend({}, this._options);
    };
    RasterTileSource.prototype.hasTile = function hasTile(tileID) {
        return !this.tileBounds || this.tileBounds.contains(tileID.canonical);
    };
    RasterTileSource.prototype.loadTile = function loadTile(tile, callback) {
        var this$1 = this;
        var url = __chunk_1.normalizeTileURL(tile.tileID.canonical.url(this.tiles, this.scheme), this.url, this.tileSize);
        tile.request = __chunk_1.getImage(this.map._transformRequest(url, __chunk_1.ResourceType.Tile), function (err, img) {
            delete tile.request;
            if (tile.aborted) {
                tile.state = 'unloaded';
                callback(null);
            } else if (err) {
                tile.state = 'errored';
                callback(err);
            } else if (img) {
                if (this$1.map._refreshExpiredTiles) {
                    tile.setExpiryData(img);
                }
                delete img.cacheControl;
                delete img.expires;
                var context = this$1.map.painter.context;
                var gl = context.gl;
                tile.texture = this$1.map.painter.getTileTexture(img.width);
                if (tile.texture) {
                    tile.texture.update(img, { useMipmap: true });
                } else {
                    tile.texture = new __chunk_1.Texture(context, img, gl.RGBA, { useMipmap: true });
                    tile.texture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE, gl.LINEAR_MIPMAP_NEAREST);
                    if (context.extTextureFilterAnisotropic) {
                        gl.texParameterf(gl.TEXTURE_2D, context.extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, context.extTextureFilterAnisotropicMax);
                    }
                }
                tile.state = 'loaded';
                callback(null);
            }
        });
    };
    RasterTileSource.prototype.abortTile = function abortTile(tile, callback) {
        if (tile.request) {
            tile.request.cancel();
            delete tile.request;
        }
        callback();
    };
    RasterTileSource.prototype.unloadTile = function unloadTile(tile, callback) {
        if (tile.texture) {
            this.map.painter.saveTileTexture(tile.texture);
        }
        callback();
    };
    RasterTileSource.prototype.hasTransition = function hasTransition() {
        return false;
    };
    return RasterTileSource;
}(__chunk_1.Evented);

var RasterDEMTileSource = function (RasterTileSource$$1) {
    function RasterDEMTileSource(id, options, dispatcher, eventedParent) {
        RasterTileSource$$1.call(this, id, options, dispatcher, eventedParent);
        this.type = 'raster-dem';
        this.maxzoom = 22;
        this._options = __chunk_1.extend({}, options);
        this.encoding = options.encoding || 'mapbox';
    }
    if (RasterTileSource$$1)
        RasterDEMTileSource.__proto__ = RasterTileSource$$1;
    RasterDEMTileSource.prototype = Object.create(RasterTileSource$$1 && RasterTileSource$$1.prototype);
    RasterDEMTileSource.prototype.constructor = RasterDEMTileSource;
    RasterDEMTileSource.prototype.serialize = function serialize() {
        return {
            type: 'raster-dem',
            url: this.url,
            tileSize: this.tileSize,
            tiles: this.tiles,
            bounds: this.bounds,
            encoding: this.encoding
        };
    };
    RasterDEMTileSource.prototype.loadTile = function loadTile(tile, callback) {
        var url = __chunk_1.normalizeTileURL(tile.tileID.canonical.url(this.tiles, this.scheme), this.url, this.tileSize);
        tile.request = __chunk_1.getImage(this.map._transformRequest(url, __chunk_1.ResourceType.Tile), imageLoaded.bind(this));
        tile.neighboringTiles = this._getNeighboringTiles(tile.tileID);
        function imageLoaded(err, img) {
            delete tile.request;
            if (tile.aborted) {
                tile.state = 'unloaded';
                callback(null);
            } else if (err) {
                tile.state = 'errored';
                callback(err);
            } else if (img) {
                if (this.map._refreshExpiredTiles) {
                    tile.setExpiryData(img);
                }
                delete img.cacheControl;
                delete img.expires;
                var rawImageData = __chunk_1.browser.getImageData(img);
                var params = {
                    uid: tile.uid,
                    coord: tile.tileID,
                    source: this.id,
                    rawImageData: rawImageData,
                    encoding: this.encoding
                };
                if (!tile.workerID || tile.state === 'expired') {
                    tile.workerID = this.dispatcher.send('loadDEMTile', params, done.bind(this));
                }
            }
        }
        function done(err, dem) {
            if (err) {
                tile.state = 'errored';
                callback(err);
            }
            if (dem) {
                tile.dem = dem;
                tile.needsHillshadePrepare = true;
                tile.state = 'loaded';
                callback(null);
            }
        }
    };
    RasterDEMTileSource.prototype._getNeighboringTiles = function _getNeighboringTiles(tileID) {
        var canonical = tileID.canonical;
        var dim = Math.pow(2, canonical.z);
        var px = (canonical.x - 1 + dim) % dim;
        var pxw = canonical.x === 0 ? tileID.wrap - 1 : tileID.wrap;
        var nx = (canonical.x + 1 + dim) % dim;
        var nxw = canonical.x + 1 === dim ? tileID.wrap + 1 : tileID.wrap;
        var neighboringTiles = {};
        neighboringTiles[new __chunk_1.OverscaledTileID(tileID.overscaledZ, pxw, canonical.z, px, canonical.y).key] = { backfilled: false };
        neighboringTiles[new __chunk_1.OverscaledTileID(tileID.overscaledZ, nxw, canonical.z, nx, canonical.y).key] = { backfilled: false };
        if (canonical.y > 0) {
            neighboringTiles[new __chunk_1.OverscaledTileID(tileID.overscaledZ, pxw, canonical.z, px, canonical.y - 1).key] = { backfilled: false };
            neighboringTiles[new __chunk_1.OverscaledTileID(tileID.overscaledZ, tileID.wrap, canonical.z, canonical.x, canonical.y - 1).key] = { backfilled: false };
            neighboringTiles[new __chunk_1.OverscaledTileID(tileID.overscaledZ, nxw, canonical.z, nx, canonical.y - 1).key] = { backfilled: false };
        }
        if (canonical.y + 1 < dim) {
            neighboringTiles[new __chunk_1.OverscaledTileID(tileID.overscaledZ, pxw, canonical.z, px, canonical.y + 1).key] = { backfilled: false };
            neighboringTiles[new __chunk_1.OverscaledTileID(tileID.overscaledZ, tileID.wrap, canonical.z, canonical.x, canonical.y + 1).key] = { backfilled: false };
            neighboringTiles[new __chunk_1.OverscaledTileID(tileID.overscaledZ, nxw, canonical.z, nx, canonical.y + 1).key] = { backfilled: false };
        }
        return neighboringTiles;
    };
    RasterDEMTileSource.prototype.unloadTile = function unloadTile(tile) {
        if (tile.demTexture) {
            this.map.painter.saveTileTexture(tile.demTexture);
        }
        if (tile.fbo) {
            tile.fbo.destroy();
            delete tile.fbo;
        }
        if (tile.dem) {
            delete tile.dem;
        }
        delete tile.neighboringTiles;
        tile.state = 'unloaded';
        this.dispatcher.send('removeDEMTile', {
            uid: tile.uid,
            source: this.id
        }, undefined, tile.workerID);
    };
    return RasterDEMTileSource;
}(RasterTileSource);

var GeoJSONSource = function (Evented) {
    function GeoJSONSource(id, options, dispatcher, eventedParent) {
        Evented.call(this);
        this.id = id;
        this.type = 'geojson';
        this.minzoom = 0;
        this.maxzoom = 18;
        this.tileSize = 512;
        this.isTileClipped = true;
        this.reparseOverscaled = true;
        this._removed = false;
        this.dispatcher = dispatcher;
        this.setEventedParent(eventedParent);
        this._data = options.data;
        this._options = __chunk_1.extend({}, options);
        this._collectResourceTiming = options.collectResourceTiming;
        this._resourceTiming = [];
        if (options.maxzoom !== undefined) {
            this.maxzoom = options.maxzoom;
        }
        if (options.type) {
            this.type = options.type;
        }
        if (options.attribution) {
            this.attribution = options.attribution;
        }
        var scale = __chunk_1.EXTENT / this.tileSize;
        this.workerOptions = __chunk_1.extend({
            source: this.id,
            cluster: options.cluster || false,
            geojsonVtOptions: {
                buffer: (options.buffer !== undefined ? options.buffer : 128) * scale,
                tolerance: (options.tolerance !== undefined ? options.tolerance : 0.375) * scale,
                extent: __chunk_1.EXTENT,
                maxZoom: this.maxzoom,
                lineMetrics: options.lineMetrics || false,
                generateId: options.generateId || false
            },
            superclusterOptions: {
                maxZoom: options.clusterMaxZoom !== undefined ? Math.min(options.clusterMaxZoom, this.maxzoom - 1) : this.maxzoom - 1,
                extent: __chunk_1.EXTENT,
                radius: (options.clusterRadius || 50) * scale,
                log: false
            }
        }, options.workerOptions);
    }
    if (Evented)
        GeoJSONSource.__proto__ = Evented;
    GeoJSONSource.prototype = Object.create(Evented && Evented.prototype);
    GeoJSONSource.prototype.constructor = GeoJSONSource;
    GeoJSONSource.prototype.load = function load() {
        var this$1 = this;
        this.fire(new __chunk_1.Event('dataloading', { dataType: 'source' }));
        this._updateWorkerData(function (err) {
            if (err) {
                this$1.fire(new __chunk_1.ErrorEvent(err));
                return;
            }
            var data = {
                dataType: 'source',
                sourceDataType: 'metadata'
            };
            if (this$1._collectResourceTiming && this$1._resourceTiming && this$1._resourceTiming.length > 0) {
                data.resourceTiming = this$1._resourceTiming;
                this$1._resourceTiming = [];
            }
            this$1.fire(new __chunk_1.Event('data', data));
        });
    };
    GeoJSONSource.prototype.onAdd = function onAdd(map) {
        this.map = map;
        this.load();
    };
    GeoJSONSource.prototype.setData = function setData(data) {
        var this$1 = this;
        this._data = data;
        this.fire(new __chunk_1.Event('dataloading', { dataType: 'source' }));
        this._updateWorkerData(function (err) {
            if (err) {
                this$1.fire(new __chunk_1.ErrorEvent(err));
                return;
            }
            var data = {
                dataType: 'source',
                sourceDataType: 'content'
            };
            if (this$1._collectResourceTiming && this$1._resourceTiming && this$1._resourceTiming.length > 0) {
                data.resourceTiming = this$1._resourceTiming;
                this$1._resourceTiming = [];
            }
            this$1.fire(new __chunk_1.Event('data', data));
        });
        return this;
    };
    GeoJSONSource.prototype.getClusterExpansionZoom = function getClusterExpansionZoom(clusterId, callback) {
        this.dispatcher.send('geojson.getClusterExpansionZoom', {
            clusterId: clusterId,
            source: this.id
        }, callback, this.workerID);
        return this;
    };
    GeoJSONSource.prototype.getClusterChildren = function getClusterChildren(clusterId, callback) {
        this.dispatcher.send('geojson.getClusterChildren', {
            clusterId: clusterId,
            source: this.id
        }, callback, this.workerID);
        return this;
    };
    GeoJSONSource.prototype.getClusterLeaves = function getClusterLeaves(clusterId, limit, offset, callback) {
        this.dispatcher.send('geojson.getClusterLeaves', {
            source: this.id,
            clusterId: clusterId,
            limit: limit,
            offset: offset
        }, callback, this.workerID);
        return this;
    };
    GeoJSONSource.prototype._updateWorkerData = function _updateWorkerData(callback) {
        var this$1 = this;
        var options = __chunk_1.extend({}, this.workerOptions);
        var data = this._data;
        if (typeof data === 'string') {
            options.request = this.map._transformRequest(__chunk_1.browser.resolveURL(data), __chunk_1.ResourceType.Source);
            options.request.collectResourceTiming = this._collectResourceTiming;
        } else {
            options.data = JSON.stringify(data);
        }
        this.workerID = this.dispatcher.send(this.type + '.loadData', options, function (err, result) {
            if (this$1._removed || result && result.abandoned) {
                return;
            }
            this$1._loaded = true;
            if (result && result.resourceTiming && result.resourceTiming[this$1.id]) {
                this$1._resourceTiming = result.resourceTiming[this$1.id].slice(0);
            }
            this$1.dispatcher.send(this$1.type + '.coalesce', { source: options.source }, null, this$1.workerID);
            callback(err);
        }, this.workerID);
    };
    GeoJSONSource.prototype.loadTile = function loadTile(tile, callback) {
        var this$1 = this;
        var message = tile.workerID === undefined ? 'loadTile' : 'reloadTile';
        var params = {
            type: this.type,
            uid: tile.uid,
            tileID: tile.tileID,
            zoom: tile.tileID.overscaledZ,
            maxZoom: this.maxzoom,
            tileSize: this.tileSize,
            source: this.id,
            pixelRatio: __chunk_1.browser.devicePixelRatio,
            showCollisionBoxes: this.map.showCollisionBoxes
        };
        tile.workerID = this.dispatcher.send(message, params, function (err, data) {
            tile.unloadVectorData();
            if (tile.aborted) {
                return callback(null);
            }
            if (err) {
                return callback(err);
            }
            tile.loadVectorData(data, this$1.map.painter, message === 'reloadTile');
            return callback(null);
        }, this.workerID);
    };
    GeoJSONSource.prototype.abortTile = function abortTile(tile) {
        tile.aborted = true;
    };
    GeoJSONSource.prototype.unloadTile = function unloadTile(tile) {
        tile.unloadVectorData();
        this.dispatcher.send('removeTile', {
            uid: tile.uid,
            type: this.type,
            source: this.id
        }, null, tile.workerID);
    };
    GeoJSONSource.prototype.onRemove = function onRemove() {
        this._removed = true;
        this.dispatcher.send('removeSource', {
            type: this.type,
            source: this.id
        }, null, this.workerID);
    };
    GeoJSONSource.prototype.serialize = function serialize() {
        return __chunk_1.extend({}, this._options, {
            type: this.type,
            data: this._data
        });
    };
    GeoJSONSource.prototype.hasTransition = function hasTransition() {
        return false;
    };
    return GeoJSONSource;
}(__chunk_1.Evented);

var ImageSource = function (Evented) {
    function ImageSource(id, options, dispatcher, eventedParent) {
        Evented.call(this);
        this.id = id;
        this.dispatcher = dispatcher;
        this.coordinates = options.coordinates;
        this.type = 'image';
        this.minzoom = 0;
        this.maxzoom = 22;
        this.tileSize = 512;
        this.tiles = {};
        this.setEventedParent(eventedParent);
        this.options = options;
    }
    if (Evented)
        ImageSource.__proto__ = Evented;
    ImageSource.prototype = Object.create(Evented && Evented.prototype);
    ImageSource.prototype.constructor = ImageSource;
    ImageSource.prototype.load = function load(newCoordinates, successCallback) {
        var this$1 = this;
        this.fire(new __chunk_1.Event('dataloading', { dataType: 'source' }));
        this.url = this.options.url;
        __chunk_1.getImage(this.map._transformRequest(this.url, __chunk_1.ResourceType.Image), function (err, image) {
            if (err) {
                this$1.fire(new __chunk_1.ErrorEvent(err));
            } else if (image) {
                this$1.image = __chunk_1.browser.getImageData(image);
                if (newCoordinates) {
                    this$1.coordinates = newCoordinates;
                }
                if (successCallback) {
                    successCallback();
                }
                this$1._finishLoading();
            }
        });
    };
    ImageSource.prototype.updateImage = function updateImage(options) {
        var this$1 = this;
        if (!this.image || !options.url) {
            return this;
        }
        this.options.url = options.url;
        this.load(options.coordinates, function () {
            this$1.texture = null;
        });
        return this;
    };
    ImageSource.prototype._finishLoading = function _finishLoading() {
        if (this.map) {
            this.setCoordinates(this.coordinates);
            this.fire(new __chunk_1.Event('data', {
                dataType: 'source',
                sourceDataType: 'metadata'
            }));
        }
    };
    ImageSource.prototype.onAdd = function onAdd(map) {
        this.map = map;
        this.load();
    };
    ImageSource.prototype.setCoordinates = function setCoordinates(coordinates) {
        this.coordinates = coordinates;
        var map = this.map;
        var cornerZ0Coords = coordinates.map(function (coord) {
            return map.transform.locationCoordinate(LngLat.convert(coord)).zoomTo(0);
        });
        var centerCoord = this.centerCoord = __chunk_1.getCoordinatesCenter(cornerZ0Coords);
        centerCoord.column = Math.floor(centerCoord.column);
        centerCoord.row = Math.floor(centerCoord.row);
        this.tileID = new __chunk_1.CanonicalTileID(centerCoord.zoom, centerCoord.column, centerCoord.row);
        this.minzoom = this.maxzoom = centerCoord.zoom;
        var tileCoords = cornerZ0Coords.map(function (coord) {
            var zoomedCoord = coord.zoomTo(centerCoord.zoom);
            return new __chunk_1.Point(Math.round((zoomedCoord.column - centerCoord.column) * __chunk_1.EXTENT), Math.round((zoomedCoord.row - centerCoord.row) * __chunk_1.EXTENT));
        });
        this._boundsArray = new __chunk_1.StructArrayLayout4i8();
        this._boundsArray.emplaceBack(tileCoords[0].x, tileCoords[0].y, 0, 0);
        this._boundsArray.emplaceBack(tileCoords[1].x, tileCoords[1].y, __chunk_1.EXTENT, 0);
        this._boundsArray.emplaceBack(tileCoords[3].x, tileCoords[3].y, 0, __chunk_1.EXTENT);
        this._boundsArray.emplaceBack(tileCoords[2].x, tileCoords[2].y, __chunk_1.EXTENT, __chunk_1.EXTENT);
        if (this.boundsBuffer) {
            this.boundsBuffer.destroy();
            delete this.boundsBuffer;
        }
        this.fire(new __chunk_1.Event('data', {
            dataType: 'source',
            sourceDataType: 'content'
        }));
        return this;
    };
    ImageSource.prototype.prepare = function prepare() {
        var this$1 = this;
        if (Object.keys(this.tiles).length === 0 || !this.image) {
            return;
        }
        var context = this.map.painter.context;
        var gl = context.gl;
        if (!this.boundsBuffer) {
            this.boundsBuffer = context.createVertexBuffer(this._boundsArray, __chunk_1.rasterBoundsAttributes.members);
        }
        if (!this.boundsSegments) {
            this.boundsSegments = __chunk_1.SegmentVector.simpleSegment(0, 0, 4, 2);
        }
        if (!this.texture) {
            this.texture = new __chunk_1.Texture(context, this.image, gl.RGBA);
            this.texture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
        }
        for (var w in this$1.tiles) {
            var tile = this$1.tiles[w];
            if (tile.state !== 'loaded') {
                tile.state = 'loaded';
                tile.texture = this$1.texture;
            }
        }
    };
    ImageSource.prototype.loadTile = function loadTile(tile, callback) {
        if (this.tileID && this.tileID.equals(tile.tileID.canonical)) {
            this.tiles[String(tile.tileID.wrap)] = tile;
            tile.buckets = {};
            callback(null);
        } else {
            tile.state = 'errored';
            callback(null);
        }
    };
    ImageSource.prototype.serialize = function serialize() {
        return {
            type: 'image',
            url: this.options.url,
            coordinates: this.coordinates
        };
    };
    ImageSource.prototype.hasTransition = function hasTransition() {
        return false;
    };
    return ImageSource;
}(__chunk_1.Evented);

var VideoSource = function (ImageSource$$1) {
    function VideoSource(id, options, dispatcher, eventedParent) {
        ImageSource$$1.call(this, id, options, dispatcher, eventedParent);
        this.roundZoom = true;
        this.type = 'video';
        this.options = options;
    }
    if (ImageSource$$1)
        VideoSource.__proto__ = ImageSource$$1;
    VideoSource.prototype = Object.create(ImageSource$$1 && ImageSource$$1.prototype);
    VideoSource.prototype.constructor = VideoSource;
    VideoSource.prototype.load = function load() {
        var this$1 = this;
        var options = this.options;
        this.urls = [];
        for (var i = 0, list = options.urls; i < list.length; i += 1) {
            var url = list[i];
            this$1.urls.push(this$1.map._transformRequest(url, __chunk_1.ResourceType.Source).url);
        }
        __chunk_1.getVideo(this.urls, function (err, video) {
            if (err) {
                this$1.fire(new __chunk_1.ErrorEvent(err));
            } else if (video) {
                this$1.video = video;
                this$1.video.loop = true;
                this$1.video.addEventListener('playing', function () {
                    this$1.map.triggerRepaint();
                });
                if (this$1.map) {
                    this$1.video.play();
                }
                this$1._finishLoading();
            }
        });
    };
    VideoSource.prototype.getVideo = function getVideo() {
        return this.video;
    };
    VideoSource.prototype.onAdd = function onAdd(map) {
        if (this.map) {
            return;
        }
        this.map = map;
        this.load();
        if (this.video) {
            this.video.play();
            this.setCoordinates(this.coordinates);
        }
    };
    VideoSource.prototype.prepare = function prepare() {
        var this$1 = this;
        if (Object.keys(this.tiles).length === 0 || this.video.readyState < 2) {
            return;
        }
        var context = this.map.painter.context;
        var gl = context.gl;
        if (!this.boundsBuffer) {
            this.boundsBuffer = context.createVertexBuffer(this._boundsArray, __chunk_1.rasterBoundsAttributes.members);
        }
        if (!this.boundsSegments) {
            this.boundsSegments = __chunk_1.SegmentVector.simpleSegment(0, 0, 4, 2);
        }
        if (!this.texture) {
            this.texture = new __chunk_1.Texture(context, this.video, gl.RGBA);
            this.texture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
        } else if (!this.video.paused) {
            this.texture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.video);
        }
        for (var w in this$1.tiles) {
            var tile = this$1.tiles[w];
            if (tile.state !== 'loaded') {
                tile.state = 'loaded';
                tile.texture = this$1.texture;
            }
        }
    };
    VideoSource.prototype.serialize = function serialize() {
        return {
            type: 'video',
            urls: this.urls,
            coordinates: this.coordinates
        };
    };
    VideoSource.prototype.hasTransition = function hasTransition() {
        return this.video && !this.video.paused;
    };
    return VideoSource;
}(ImageSource);

var CanvasSource = function (ImageSource$$1) {
    function CanvasSource(id, options, dispatcher, eventedParent) {
        ImageSource$$1.call(this, id, options, dispatcher, eventedParent);
        if (!options.coordinates) {
            this.fire(new __chunk_1.ErrorEvent(new __chunk_1.ValidationError('sources.' + id, null, 'missing required property "coordinates"')));
        } else if (!Array.isArray(options.coordinates) || options.coordinates.length !== 4 || options.coordinates.some(function (c) {
                return !Array.isArray(c) || c.length !== 2 || c.some(function (l) {
                    return typeof l !== 'number';
                });
            })) {
            this.fire(new __chunk_1.ErrorEvent(new __chunk_1.ValidationError('sources.' + id, null, '"coordinates" property must be an array of 4 longitude/latitude array pairs')));
        }
        if (options.animate && typeof options.animate !== 'boolean') {
            this.fire(new __chunk_1.ErrorEvent(new __chunk_1.ValidationError('sources.' + id, null, 'optional "animate" property must be a boolean value')));
        }
        if (!options.canvas) {
            this.fire(new __chunk_1.ErrorEvent(new __chunk_1.ValidationError('sources.' + id, null, 'missing required property "canvas"')));
        } else if (typeof options.canvas !== 'string' && !(options.canvas instanceof __chunk_1.window.HTMLCanvasElement)) {
            this.fire(new __chunk_1.ErrorEvent(new __chunk_1.ValidationError('sources.' + id, null, '"canvas" must be either a string representing the ID of the canvas element from which to read, or an HTMLCanvasElement instance')));
        }
        this.options = options;
        this.animate = options.animate !== undefined ? options.animate : true;
    }
    if (ImageSource$$1)
        CanvasSource.__proto__ = ImageSource$$1;
    CanvasSource.prototype = Object.create(ImageSource$$1 && ImageSource$$1.prototype);
    CanvasSource.prototype.constructor = CanvasSource;
    CanvasSource.prototype.load = function load() {
        if (!this.canvas) {
            this.canvas = this.options.canvas instanceof __chunk_1.window.HTMLCanvasElement ? this.options.canvas : __chunk_1.window.document.getElementById(this.options.canvas);
        }
        this.width = this.canvas.width;
        this.height = this.canvas.height;
        if (this._hasInvalidDimensions()) {
            this.fire(new __chunk_1.ErrorEvent(new Error('Canvas dimensions cannot be less than or equal to zero.')));
            return;
        }
        this.play = function () {
            this._playing = true;
            this.map.triggerRepaint();
        };
        this.pause = function () {
            this._playing = false;
        };
        this._finishLoading();
    };
    CanvasSource.prototype.getCanvas = function getCanvas() {
        return this.canvas;
    };
    CanvasSource.prototype.onAdd = function onAdd(map) {
        this.map = map;
        this.load();
        if (this.canvas) {
            if (this.animate) {
                this.play();
            }
        }
    };
    CanvasSource.prototype.onRemove = function onRemove() {
        this.pause();
    };
    CanvasSource.prototype.prepare = function prepare() {
        var this$1 = this;
        var resize = false;
        if (this.canvas.width !== this.width) {
            this.width = this.canvas.width;
            resize = true;
        }
        if (this.canvas.height !== this.height) {
            this.height = this.canvas.height;
            resize = true;
        }
        if (this._hasInvalidDimensions()) {
            return;
        }
        if (Object.keys(this.tiles).length === 0) {
            return;
        }
        var context = this.map.painter.context;
        var gl = context.gl;
        if (!this.boundsBuffer) {
            this.boundsBuffer = context.createVertexBuffer(this._boundsArray, __chunk_1.rasterBoundsAttributes.members);
        }
        if (!this.boundsSegments) {
            this.boundsSegments = __chunk_1.SegmentVector.simpleSegment(0, 0, 4, 2);
        }
        if (!this.texture) {
            this.texture = new __chunk_1.Texture(context, this.canvas, gl.RGBA, { premultiply: true });
        } else if (resize || this._playing) {
            this.texture.update(this.canvas, { premultiply: true });
        }
        for (var w in this$1.tiles) {
            var tile = this$1.tiles[w];
            if (tile.state !== 'loaded') {
                tile.state = 'loaded';
                tile.texture = this$1.texture;
            }
        }
    };
    CanvasSource.prototype.serialize = function serialize() {
        return {
            type: 'canvas',
            coordinates: this.coordinates
        };
    };
    CanvasSource.prototype.hasTransition = function hasTransition() {
        return this._playing;
    };
    CanvasSource.prototype._hasInvalidDimensions = function _hasInvalidDimensions() {
        var this$1 = this;
        for (var i = 0, list = [
                    this$1.canvas.width,
                    this$1.canvas.height
                ]; i < list.length; i += 1) {
            var x = list[i];
            if (isNaN(x) || x <= 0) {
                return true;
            }
        }
        return false;
    };
    return CanvasSource;
}(ImageSource);

var sourceTypes = {
    vector: VectorTileSource,
    raster: RasterTileSource,
    'raster-dem': RasterDEMTileSource,
    geojson: GeoJSONSource,
    video: VideoSource,
    image: ImageSource,
    canvas: CanvasSource
};
var create = function (id, specification, dispatcher, eventedParent) {
    var source = new sourceTypes[specification.type](id, specification, dispatcher, eventedParent);
    if (source.id !== id) {
        throw new Error('Expected Source id to be ' + id + ' instead of ' + source.id);
    }
    __chunk_1.bindAll([
        'load',
        'abort',
        'unload',
        'serialize',
        'prepare'
    ], source);
    return source;
};
var getType = function (name) {
    return sourceTypes[name];
};
var setType = function (name, type) {
    sourceTypes[name] = type;
};

function queryRenderedFeatures(sourceCache, styleLayers, queryGeometry, params, transform) {
    var maxPitchScaleFactor = transform.maxPitchScaleFactor();
    var tilesIn = sourceCache.tilesIn(queryGeometry, maxPitchScaleFactor);
    tilesIn.sort(sortTilesIn);
    var renderedFeatureLayers = [];
    for (var i = 0, list = tilesIn; i < list.length; i += 1) {
        var tileIn = list[i];
        renderedFeatureLayers.push({
            wrappedTileID: tileIn.tileID.wrapped().key,
            queryResults: tileIn.tile.queryRenderedFeatures(styleLayers, sourceCache._state, tileIn.queryGeometry, tileIn.scale, params, transform, maxPitchScaleFactor, sourceCache.transform.calculatePosMatrix(tileIn.tileID.toUnwrapped()))
        });
    }
    var result = mergeRenderedFeatureLayers(renderedFeatureLayers);
    for (var layerID in result) {
        result[layerID].forEach(function (feature) {
            var state = sourceCache.getFeatureState(feature.layer['source-layer'], feature.id);
            feature.source = feature.layer.source;
            if (feature.layer['source-layer']) {
                feature.sourceLayer = feature.layer['source-layer'];
            }
            feature.state = state;
        });
    }
    return result;
}
function queryRenderedSymbols(styleLayers, sourceCaches, queryGeometry, params, collisionIndex, retainedQueryData) {
    var result = {};
    var renderedSymbols = collisionIndex.queryRenderedSymbols(queryGeometry);
    var bucketQueryData = [];
    for (var i = 0, list = Object.keys(renderedSymbols).map(Number); i < list.length; i += 1) {
        var bucketInstanceId = list[i];
        bucketQueryData.push(retainedQueryData[bucketInstanceId]);
    }
    bucketQueryData.sort(sortTilesIn);
    var loop = function () {
        var queryData = list$2[i$2];
        var bucketSymbols = queryData.featureIndex.lookupSymbolFeatures(renderedSymbols[queryData.bucketInstanceId], queryData.bucketIndex, queryData.sourceLayerIndex, params.filter, params.layers, styleLayers);
        for (var layerID in bucketSymbols) {
            var resultFeatures = result[layerID] = result[layerID] || [];
            var layerSymbols = bucketSymbols[layerID];
            layerSymbols.sort(function (a, b) {
                var featureSortOrder = queryData.featureSortOrder;
                if (featureSortOrder) {
                    var sortedA = featureSortOrder.indexOf(a.featureIndex);
                    var sortedB = featureSortOrder.indexOf(b.featureIndex);
                    return sortedB - sortedA;
                } else {
                    return b.featureIndex - a.featureIndex;
                }
            });
            for (var i$1 = 0, list$1 = layerSymbols; i$1 < list$1.length; i$1 += 1) {
                var symbolFeature = list$1[i$1];
                resultFeatures.push(symbolFeature.feature);
            }
        }
    };
    for (var i$2 = 0, list$2 = bucketQueryData; i$2 < list$2.length; i$2 += 1)
        loop();
    var loop$1 = function (layerName) {
        result[layerName].forEach(function (feature) {
            var layer = styleLayers[layerName];
            var sourceCache = sourceCaches[layer.source];
            var state = sourceCache.getFeatureState(feature.layer['source-layer'], feature.id);
            feature.source = feature.layer.source;
            if (feature.layer['source-layer']) {
                feature.sourceLayer = feature.layer['source-layer'];
            }
            feature.state = state;
        });
    };
    for (var layerName in result)
        loop$1(layerName);
    return result;
}
function querySourceFeatures(sourceCache, params) {
    var tiles = sourceCache.getRenderableIds().map(function (id) {
        return sourceCache.getTileByID(id);
    });
    var result = [];
    var dataTiles = {};
    for (var i = 0; i < tiles.length; i++) {
        var tile = tiles[i];
        var dataID = tile.tileID.canonical.key;
        if (!dataTiles[dataID]) {
            dataTiles[dataID] = true;
            tile.querySourceFeatures(result, params);
        }
    }
    return result;
}
function sortTilesIn(a, b) {
    var idA = a.tileID;
    var idB = b.tileID;
    return idA.overscaledZ - idB.overscaledZ || idA.canonical.y - idB.canonical.y || idA.wrap - idB.wrap || idA.canonical.x - idB.canonical.x;
}
function mergeRenderedFeatureLayers(tiles) {
    var result = {};
    var wrappedIDLayerMap = {};
    for (var i$1 = 0, list$1 = tiles; i$1 < list$1.length; i$1 += 1) {
        var tile = list$1[i$1];
        var queryResults = tile.queryResults;
        var wrappedID = tile.wrappedTileID;
        var wrappedIDLayers = wrappedIDLayerMap[wrappedID] = wrappedIDLayerMap[wrappedID] || {};
        for (var layerID in queryResults) {
            var tileFeatures = queryResults[layerID];
            var wrappedIDFeatures = wrappedIDLayers[layerID] = wrappedIDLayers[layerID] || {};
            var resultFeatures = result[layerID] = result[layerID] || [];
            for (var i = 0, list = tileFeatures; i < list.length; i += 1) {
                var tileFeature = list[i];
                if (!wrappedIDFeatures[tileFeature.featureIndex]) {
                    wrappedIDFeatures[tileFeature.featureIndex] = true;
                    resultFeatures.push(tileFeature.feature);
                }
            }
        }
    }
    return result;
}

var TileCache = function TileCache(max, onRemove) {
    this.max = max;
    this.onRemove = onRemove;
    this.reset();
};
TileCache.prototype.reset = function reset() {
    var this$1 = this;
    for (var key in this$1.data) {
        for (var i = 0, list = this$1.data[key]; i < list.length; i += 1) {
            var removedData = list[i];
            if (removedData.timeout) {
                clearTimeout(removedData.timeout);
            }
            this$1.onRemove(removedData.value);
        }
    }
    this.data = {};
    this.order = [];
    return this;
};
TileCache.prototype.add = function add(tileID, data, expiryTimeout) {
    var this$1 = this;
    var key = tileID.wrapped().key;
    if (this.data[key] === undefined) {
        this.data[key] = [];
    }
    var dataWrapper = {
        value: data,
        timeout: undefined
    };
    if (expiryTimeout !== undefined) {
        dataWrapper.timeout = setTimeout(function () {
            this$1.remove(tileID, dataWrapper);
        }, expiryTimeout);
    }
    this.data[key].push(dataWrapper);
    this.order.push(key);
    if (this.order.length > this.max) {
        var removedData = this._getAndRemoveByKey(this.order[0]);
        if (removedData) {
            this.onRemove(removedData);
        }
    }
    return this;
};
TileCache.prototype.has = function has(tileID) {
    return tileID.wrapped().key in this.data;
};
TileCache.prototype.getAndRemove = function getAndRemove(tileID) {
    if (!this.has(tileID)) {
        return null;
    }
    return this._getAndRemoveByKey(tileID.wrapped().key);
};
TileCache.prototype._getAndRemoveByKey = function _getAndRemoveByKey(key) {
    var data = this.data[key].shift();
    if (data.timeout) {
        clearTimeout(data.timeout);
    }
    if (this.data[key].length === 0) {
        delete this.data[key];
    }
    this.order.splice(this.order.indexOf(key), 1);
    return data.value;
};
TileCache.prototype.get = function get(tileID) {
    if (!this.has(tileID)) {
        return null;
    }
    var data = this.data[tileID.wrapped().key][0];
    return data.value;
};
TileCache.prototype.remove = function remove(tileID, value) {
    if (!this.has(tileID)) {
        return this;
    }
    var key = tileID.wrapped().key;
    var dataIndex = value === undefined ? 0 : this.data[key].indexOf(value);
    var data = this.data[key][dataIndex];
    this.data[key].splice(dataIndex, 1);
    if (data.timeout) {
        clearTimeout(data.timeout);
    }
    if (this.data[key].length === 0) {
        delete this.data[key];
    }
    this.onRemove(data.value);
    this.order.splice(this.order.indexOf(key), 1);
    return this;
};
TileCache.prototype.setMaxSize = function setMaxSize(max) {
    var this$1 = this;
    this.max = max;
    while (this.order.length > this.max) {
        var removedData = this$1._getAndRemoveByKey(this$1.order[0]);
        if (removedData) {
            this$1.onRemove(removedData);
        }
    }
    return this;
};

var IndexBuffer = function IndexBuffer(context, array, dynamicDraw) {
    this.context = context;
    var gl = context.gl;
    this.buffer = gl.createBuffer();
    this.dynamicDraw = Boolean(dynamicDraw);
    this.context.unbindVAO();
    context.bindElementBuffer.set(this.buffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, array.arrayBuffer, this.dynamicDraw ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW);
    if (!this.dynamicDraw) {
        delete array.arrayBuffer;
    }
};
IndexBuffer.prototype.bind = function bind() {
    this.context.bindElementBuffer.set(this.buffer);
};
IndexBuffer.prototype.updateData = function updateData(array) {
    var gl = this.context.gl;
    this.context.unbindVAO();
    this.bind();
    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, array.arrayBuffer);
};
IndexBuffer.prototype.destroy = function destroy() {
    var gl = this.context.gl;
    if (this.buffer) {
        gl.deleteBuffer(this.buffer);
        delete this.buffer;
    }
};

var AttributeType = {
    Int8: 'BYTE',
    Uint8: 'UNSIGNED_BYTE',
    Int16: 'SHORT',
    Uint16: 'UNSIGNED_SHORT',
    Int32: 'INT',
    Uint32: 'UNSIGNED_INT',
    Float32: 'FLOAT'
};
var VertexBuffer = function VertexBuffer(context, array, attributes, dynamicDraw) {
    this.length = array.length;
    this.attributes = attributes;
    this.itemSize = array.bytesPerElement;
    this.dynamicDraw = dynamicDraw;
    this.context = context;
    var gl = context.gl;
    this.buffer = gl.createBuffer();
    context.bindVertexBuffer.set(this.buffer);
    gl.bufferData(gl.ARRAY_BUFFER, array.arrayBuffer, this.dynamicDraw ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW);
    if (!this.dynamicDraw) {
        delete array.arrayBuffer;
    }
};
VertexBuffer.prototype.bind = function bind() {
    this.context.bindVertexBuffer.set(this.buffer);
};
VertexBuffer.prototype.updateData = function updateData(array) {
    var gl = this.context.gl;
    this.bind();
    gl.bufferSubData(gl.ARRAY_BUFFER, 0, array.arrayBuffer);
};
VertexBuffer.prototype.enableAttributes = function enableAttributes(gl, program) {
    var this$1 = this;
    for (var j = 0; j < this.attributes.length; j++) {
        var member = this$1.attributes[j];
        var attribIndex = program.attributes[member.name];
        if (attribIndex !== undefined) {
            gl.enableVertexAttribArray(attribIndex);
        }
    }
};
VertexBuffer.prototype.setVertexAttribPointers = function setVertexAttribPointers(gl, program, vertexOffset) {
    var this$1 = this;
    for (var j = 0; j < this.attributes.length; j++) {
        var member = this$1.attributes[j];
        var attribIndex = program.attributes[member.name];
        if (attribIndex !== undefined) {
            gl.vertexAttribPointer(attribIndex, member.components, gl[AttributeType[member.type]], false, this$1.itemSize, member.offset + this$1.itemSize * (vertexOffset || 0));
        }
    }
};
VertexBuffer.prototype.destroy = function destroy() {
    var gl = this.context.gl;
    if (this.buffer) {
        gl.deleteBuffer(this.buffer);
        delete this.buffer;
    }
};

var BaseValue = function BaseValue(context) {
    this.gl = context.gl;
    this.default = this.getDefault();
    this.current = this.default;
    this.dirty = false;
};
BaseValue.prototype.get = function get() {
    return this.current;
};
BaseValue.prototype.set = function set(value) {
};
BaseValue.prototype.getDefault = function getDefault() {
    return this.default;
};
BaseValue.prototype.setDefault = function setDefault() {
    this.set(this.default);
};
var ClearColor = function (BaseValue) {
    function ClearColor() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        ClearColor.__proto__ = BaseValue;
    ClearColor.prototype = Object.create(BaseValue && BaseValue.prototype);
    ClearColor.prototype.constructor = ClearColor;
    ClearColor.prototype.getDefault = function getDefault() {
        return __chunk_1.Color.transparent;
    };
    ClearColor.prototype.set = function set(v) {
        var c = this.current;
        if (v.r === c.r && v.g === c.g && v.b === c.b && v.a === c.a && !this.dirty) {
            return;
        }
        this.gl.clearColor(v.r, v.g, v.b, v.a);
        this.current = v;
        this.dirty = false;
    };
    return ClearColor;
}(BaseValue);
var ClearDepth = function (BaseValue) {
    function ClearDepth() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        ClearDepth.__proto__ = BaseValue;
    ClearDepth.prototype = Object.create(BaseValue && BaseValue.prototype);
    ClearDepth.prototype.constructor = ClearDepth;
    ClearDepth.prototype.getDefault = function getDefault() {
        return 1;
    };
    ClearDepth.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.clearDepth(v);
        this.current = v;
        this.dirty = false;
    };
    return ClearDepth;
}(BaseValue);
var ClearStencil = function (BaseValue) {
    function ClearStencil() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        ClearStencil.__proto__ = BaseValue;
    ClearStencil.prototype = Object.create(BaseValue && BaseValue.prototype);
    ClearStencil.prototype.constructor = ClearStencil;
    ClearStencil.prototype.getDefault = function getDefault() {
        return 0;
    };
    ClearStencil.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.clearStencil(v);
        this.current = v;
        this.dirty = false;
    };
    return ClearStencil;
}(BaseValue);
var ColorMask = function (BaseValue) {
    function ColorMask() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        ColorMask.__proto__ = BaseValue;
    ColorMask.prototype = Object.create(BaseValue && BaseValue.prototype);
    ColorMask.prototype.constructor = ColorMask;
    ColorMask.prototype.getDefault = function getDefault() {
        return [
            true,
            true,
            true,
            true
        ];
    };
    ColorMask.prototype.set = function set(v) {
        var c = this.current;
        if (v[0] === c[0] && v[1] === c[1] && v[2] === c[2] && v[3] === c[3] && !this.dirty) {
            return;
        }
        this.gl.colorMask(v[0], v[1], v[2], v[3]);
        this.current = v;
        this.dirty = false;
    };
    return ColorMask;
}(BaseValue);
var DepthMask = function (BaseValue) {
    function DepthMask() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        DepthMask.__proto__ = BaseValue;
    DepthMask.prototype = Object.create(BaseValue && BaseValue.prototype);
    DepthMask.prototype.constructor = DepthMask;
    DepthMask.prototype.getDefault = function getDefault() {
        return true;
    };
    DepthMask.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.depthMask(v);
        this.current = v;
        this.dirty = false;
    };
    return DepthMask;
}(BaseValue);
var StencilMask = function (BaseValue) {
    function StencilMask() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        StencilMask.__proto__ = BaseValue;
    StencilMask.prototype = Object.create(BaseValue && BaseValue.prototype);
    StencilMask.prototype.constructor = StencilMask;
    StencilMask.prototype.getDefault = function getDefault() {
        return 255;
    };
    StencilMask.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.stencilMask(v);
        this.current = v;
        this.dirty = false;
    };
    return StencilMask;
}(BaseValue);
var StencilFunc = function (BaseValue) {
    function StencilFunc() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        StencilFunc.__proto__ = BaseValue;
    StencilFunc.prototype = Object.create(BaseValue && BaseValue.prototype);
    StencilFunc.prototype.constructor = StencilFunc;
    StencilFunc.prototype.getDefault = function getDefault() {
        return {
            func: this.gl.ALWAYS,
            ref: 0,
            mask: 255
        };
    };
    StencilFunc.prototype.set = function set(v) {
        var c = this.current;
        if (v.func === c.func && v.ref === c.ref && v.mask === c.mask && !this.dirty) {
            return;
        }
        this.gl.stencilFunc(v.func, v.ref, v.mask);
        this.current = v;
        this.dirty = false;
    };
    return StencilFunc;
}(BaseValue);
var StencilOp = function (BaseValue) {
    function StencilOp() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        StencilOp.__proto__ = BaseValue;
    StencilOp.prototype = Object.create(BaseValue && BaseValue.prototype);
    StencilOp.prototype.constructor = StencilOp;
    StencilOp.prototype.getDefault = function getDefault() {
        var gl = this.gl;
        return [
            gl.KEEP,
            gl.KEEP,
            gl.KEEP
        ];
    };
    StencilOp.prototype.set = function set(v) {
        var c = this.current;
        if (v[0] === c[0] && v[1] === c[1] && v[2] === c[2] && !this.dirty) {
            return;
        }
        this.gl.stencilOp(v[0], v[1], v[2]);
        this.current = v;
        this.dirty = false;
    };
    return StencilOp;
}(BaseValue);
var StencilTest = function (BaseValue) {
    function StencilTest() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        StencilTest.__proto__ = BaseValue;
    StencilTest.prototype = Object.create(BaseValue && BaseValue.prototype);
    StencilTest.prototype.constructor = StencilTest;
    StencilTest.prototype.getDefault = function getDefault() {
        return false;
    };
    StencilTest.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        if (v) {
            gl.enable(gl.STENCIL_TEST);
        } else {
            gl.disable(gl.STENCIL_TEST);
        }
        this.current = v;
        this.dirty = false;
    };
    return StencilTest;
}(BaseValue);
var DepthRange = function (BaseValue) {
    function DepthRange() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        DepthRange.__proto__ = BaseValue;
    DepthRange.prototype = Object.create(BaseValue && BaseValue.prototype);
    DepthRange.prototype.constructor = DepthRange;
    DepthRange.prototype.getDefault = function getDefault() {
        return [
            0,
            1
        ];
    };
    DepthRange.prototype.set = function set(v) {
        var c = this.current;
        if (v[0] === c[0] && v[1] === c[1] && !this.dirty) {
            return;
        }
        this.gl.depthRange(v[0], v[1]);
        this.current = v;
        this.dirty = false;
    };
    return DepthRange;
}(BaseValue);
var DepthTest = function (BaseValue) {
    function DepthTest() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        DepthTest.__proto__ = BaseValue;
    DepthTest.prototype = Object.create(BaseValue && BaseValue.prototype);
    DepthTest.prototype.constructor = DepthTest;
    DepthTest.prototype.getDefault = function getDefault() {
        return false;
    };
    DepthTest.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        if (v) {
            gl.enable(gl.DEPTH_TEST);
        } else {
            gl.disable(gl.DEPTH_TEST);
        }
        this.current = v;
        this.dirty = false;
    };
    return DepthTest;
}(BaseValue);
var DepthFunc = function (BaseValue) {
    function DepthFunc() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        DepthFunc.__proto__ = BaseValue;
    DepthFunc.prototype = Object.create(BaseValue && BaseValue.prototype);
    DepthFunc.prototype.constructor = DepthFunc;
    DepthFunc.prototype.getDefault = function getDefault() {
        return this.gl.LESS;
    };
    DepthFunc.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.depthFunc(v);
        this.current = v;
        this.dirty = false;
    };
    return DepthFunc;
}(BaseValue);
var Blend = function (BaseValue) {
    function Blend() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        Blend.__proto__ = BaseValue;
    Blend.prototype = Object.create(BaseValue && BaseValue.prototype);
    Blend.prototype.constructor = Blend;
    Blend.prototype.getDefault = function getDefault() {
        return false;
    };
    Blend.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        if (v) {
            gl.enable(gl.BLEND);
        } else {
            gl.disable(gl.BLEND);
        }
        this.current = v;
        this.dirty = false;
    };
    return Blend;
}(BaseValue);
var BlendFunc = function (BaseValue) {
    function BlendFunc() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BlendFunc.__proto__ = BaseValue;
    BlendFunc.prototype = Object.create(BaseValue && BaseValue.prototype);
    BlendFunc.prototype.constructor = BlendFunc;
    BlendFunc.prototype.getDefault = function getDefault() {
        var gl = this.gl;
        return [
            gl.ONE,
            gl.ZERO
        ];
    };
    BlendFunc.prototype.set = function set(v) {
        var c = this.current;
        if (v[0] === c[0] && v[1] === c[1] && !this.dirty) {
            return;
        }
        this.gl.blendFunc(v[0], v[1]);
        this.current = v;
        this.dirty = false;
    };
    return BlendFunc;
}(BaseValue);
var BlendColor = function (BaseValue) {
    function BlendColor() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BlendColor.__proto__ = BaseValue;
    BlendColor.prototype = Object.create(BaseValue && BaseValue.prototype);
    BlendColor.prototype.constructor = BlendColor;
    BlendColor.prototype.getDefault = function getDefault() {
        return __chunk_1.Color.transparent;
    };
    BlendColor.prototype.set = function set(v) {
        var c = this.current;
        if (v.r === c.r && v.g === c.g && v.b === c.b && v.a === c.a && !this.dirty) {
            return;
        }
        this.gl.blendColor(v.r, v.g, v.b, v.a);
        this.current = v;
        this.dirty = false;
    };
    return BlendColor;
}(BaseValue);
var BlendEquation = function (BaseValue) {
    function BlendEquation() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BlendEquation.__proto__ = BaseValue;
    BlendEquation.prototype = Object.create(BaseValue && BaseValue.prototype);
    BlendEquation.prototype.constructor = BlendEquation;
    BlendEquation.prototype.getDefault = function getDefault() {
        return this.gl.FUNC_ADD;
    };
    BlendEquation.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.blendEquation(v);
        this.current = v;
        this.dirty = false;
    };
    return BlendEquation;
}(BaseValue);
var CullFace = function (BaseValue) {
    function CullFace() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        CullFace.__proto__ = BaseValue;
    CullFace.prototype = Object.create(BaseValue && BaseValue.prototype);
    CullFace.prototype.constructor = CullFace;
    CullFace.prototype.getDefault = function getDefault() {
        return false;
    };
    CullFace.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        if (v) {
            gl.enable(gl.CULL_FACE);
        } else {
            gl.disable(gl.CULL_FACE);
        }
        this.current = v;
        this.dirty = false;
    };
    return CullFace;
}(BaseValue);
var CullFaceSide = function (BaseValue) {
    function CullFaceSide() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        CullFaceSide.__proto__ = BaseValue;
    CullFaceSide.prototype = Object.create(BaseValue && BaseValue.prototype);
    CullFaceSide.prototype.constructor = CullFaceSide;
    CullFaceSide.prototype.getDefault = function getDefault() {
        return this.gl.BACK;
    };
    CullFaceSide.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.cullFace(v);
        this.current = v;
        this.dirty = false;
    };
    return CullFaceSide;
}(BaseValue);
var FrontFace = function (BaseValue) {
    function FrontFace() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        FrontFace.__proto__ = BaseValue;
    FrontFace.prototype = Object.create(BaseValue && BaseValue.prototype);
    FrontFace.prototype.constructor = FrontFace;
    FrontFace.prototype.getDefault = function getDefault() {
        return this.gl.CCW;
    };
    FrontFace.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.frontFace(v);
        this.current = v;
        this.dirty = false;
    };
    return FrontFace;
}(BaseValue);
var Program = function (BaseValue) {
    function Program() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        Program.__proto__ = BaseValue;
    Program.prototype = Object.create(BaseValue && BaseValue.prototype);
    Program.prototype.constructor = Program;
    Program.prototype.getDefault = function getDefault() {
        return null;
    };
    Program.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.useProgram(v);
        this.current = v;
        this.dirty = false;
    };
    return Program;
}(BaseValue);
var ActiveTextureUnit = function (BaseValue) {
    function ActiveTextureUnit() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        ActiveTextureUnit.__proto__ = BaseValue;
    ActiveTextureUnit.prototype = Object.create(BaseValue && BaseValue.prototype);
    ActiveTextureUnit.prototype.constructor = ActiveTextureUnit;
    ActiveTextureUnit.prototype.getDefault = function getDefault() {
        return this.gl.TEXTURE0;
    };
    ActiveTextureUnit.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.activeTexture(v);
        this.current = v;
        this.dirty = false;
    };
    return ActiveTextureUnit;
}(BaseValue);
var Viewport = function (BaseValue) {
    function Viewport() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        Viewport.__proto__ = BaseValue;
    Viewport.prototype = Object.create(BaseValue && BaseValue.prototype);
    Viewport.prototype.constructor = Viewport;
    Viewport.prototype.getDefault = function getDefault() {
        var gl = this.gl;
        return [
            0,
            0,
            gl.drawingBufferWidth,
            gl.drawingBufferHeight
        ];
    };
    Viewport.prototype.set = function set(v) {
        var c = this.current;
        if (v[0] === c[0] && v[1] === c[1] && v[2] === c[2] && v[3] === c[3] && !this.dirty) {
            return;
        }
        this.gl.viewport(v[0], v[1], v[2], v[3]);
        this.current = v;
        this.dirty = false;
    };
    return Viewport;
}(BaseValue);
var BindFramebuffer = function (BaseValue) {
    function BindFramebuffer() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BindFramebuffer.__proto__ = BaseValue;
    BindFramebuffer.prototype = Object.create(BaseValue && BaseValue.prototype);
    BindFramebuffer.prototype.constructor = BindFramebuffer;
    BindFramebuffer.prototype.getDefault = function getDefault() {
        return null;
    };
    BindFramebuffer.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, v);
        this.current = v;
        this.dirty = false;
    };
    return BindFramebuffer;
}(BaseValue);
var BindRenderbuffer = function (BaseValue) {
    function BindRenderbuffer() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BindRenderbuffer.__proto__ = BaseValue;
    BindRenderbuffer.prototype = Object.create(BaseValue && BaseValue.prototype);
    BindRenderbuffer.prototype.constructor = BindRenderbuffer;
    BindRenderbuffer.prototype.getDefault = function getDefault() {
        return null;
    };
    BindRenderbuffer.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.bindRenderbuffer(gl.RENDERBUFFER, v);
        this.current = v;
        this.dirty = false;
    };
    return BindRenderbuffer;
}(BaseValue);
var BindTexture = function (BaseValue) {
    function BindTexture() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BindTexture.__proto__ = BaseValue;
    BindTexture.prototype = Object.create(BaseValue && BaseValue.prototype);
    BindTexture.prototype.constructor = BindTexture;
    BindTexture.prototype.getDefault = function getDefault() {
        return null;
    };
    BindTexture.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.bindTexture(gl.TEXTURE_2D, v);
        this.current = v;
        this.dirty = false;
    };
    return BindTexture;
}(BaseValue);
var BindVertexBuffer = function (BaseValue) {
    function BindVertexBuffer() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BindVertexBuffer.__proto__ = BaseValue;
    BindVertexBuffer.prototype = Object.create(BaseValue && BaseValue.prototype);
    BindVertexBuffer.prototype.constructor = BindVertexBuffer;
    BindVertexBuffer.prototype.getDefault = function getDefault() {
        return null;
    };
    BindVertexBuffer.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, v);
        this.current = v;
        this.dirty = false;
    };
    return BindVertexBuffer;
}(BaseValue);
var BindElementBuffer = function (BaseValue) {
    function BindElementBuffer() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BindElementBuffer.__proto__ = BaseValue;
    BindElementBuffer.prototype = Object.create(BaseValue && BaseValue.prototype);
    BindElementBuffer.prototype.constructor = BindElementBuffer;
    BindElementBuffer.prototype.getDefault = function getDefault() {
        return null;
    };
    BindElementBuffer.prototype.set = function set(v) {
        var gl = this.gl;
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, v);
        this.current = v;
        this.dirty = false;
    };
    return BindElementBuffer;
}(BaseValue);
var BindVertexArrayOES = function (BaseValue) {
    function BindVertexArrayOES(context) {
        BaseValue.call(this, context);
        this.vao = context.extVertexArrayObject;
    }
    if (BaseValue)
        BindVertexArrayOES.__proto__ = BaseValue;
    BindVertexArrayOES.prototype = Object.create(BaseValue && BaseValue.prototype);
    BindVertexArrayOES.prototype.constructor = BindVertexArrayOES;
    BindVertexArrayOES.prototype.getDefault = function getDefault() {
        return null;
    };
    BindVertexArrayOES.prototype.set = function set(v) {
        if (!this.vao || v === this.current && !this.dirty) {
            return;
        }
        this.vao.bindVertexArrayOES(v);
        this.current = v;
        this.dirty = false;
    };
    return BindVertexArrayOES;
}(BaseValue);
var PixelStoreUnpack = function (BaseValue) {
    function PixelStoreUnpack() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        PixelStoreUnpack.__proto__ = BaseValue;
    PixelStoreUnpack.prototype = Object.create(BaseValue && BaseValue.prototype);
    PixelStoreUnpack.prototype.constructor = PixelStoreUnpack;
    PixelStoreUnpack.prototype.getDefault = function getDefault() {
        return 4;
    };
    PixelStoreUnpack.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.pixelStorei(gl.UNPACK_ALIGNMENT, v);
        this.current = v;
        this.dirty = false;
    };
    return PixelStoreUnpack;
}(BaseValue);
var PixelStoreUnpackPremultiplyAlpha = function (BaseValue) {
    function PixelStoreUnpackPremultiplyAlpha() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        PixelStoreUnpackPremultiplyAlpha.__proto__ = BaseValue;
    PixelStoreUnpackPremultiplyAlpha.prototype = Object.create(BaseValue && BaseValue.prototype);
    PixelStoreUnpackPremultiplyAlpha.prototype.constructor = PixelStoreUnpackPremultiplyAlpha;
    PixelStoreUnpackPremultiplyAlpha.prototype.getDefault = function getDefault() {
        return false;
    };
    PixelStoreUnpackPremultiplyAlpha.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, v);
        this.current = v;
        this.dirty = false;
    };
    return PixelStoreUnpackPremultiplyAlpha;
}(BaseValue);
var PixelStoreUnpackFlipY = function (BaseValue) {
    function PixelStoreUnpackFlipY() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        PixelStoreUnpackFlipY.__proto__ = BaseValue;
    PixelStoreUnpackFlipY.prototype = Object.create(BaseValue && BaseValue.prototype);
    PixelStoreUnpackFlipY.prototype.constructor = PixelStoreUnpackFlipY;
    PixelStoreUnpackFlipY.prototype.getDefault = function getDefault() {
        return false;
    };
    PixelStoreUnpackFlipY.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, v);
        this.current = v;
        this.dirty = false;
    };
    return PixelStoreUnpackFlipY;
}(BaseValue);
var FramebufferAttachment = function (BaseValue) {
    function FramebufferAttachment(context, parent) {
        BaseValue.call(this, context);
        this.context = context;
        this.parent = parent;
    }
    if (BaseValue)
        FramebufferAttachment.__proto__ = BaseValue;
    FramebufferAttachment.prototype = Object.create(BaseValue && BaseValue.prototype);
    FramebufferAttachment.prototype.constructor = FramebufferAttachment;
    FramebufferAttachment.prototype.getDefault = function getDefault() {
        return null;
    };
    return FramebufferAttachment;
}(BaseValue);
var ColorAttachment = function (FramebufferAttachment) {
    function ColorAttachment() {
        FramebufferAttachment.apply(this, arguments);
    }
    if (FramebufferAttachment)
        ColorAttachment.__proto__ = FramebufferAttachment;
    ColorAttachment.prototype = Object.create(FramebufferAttachment && FramebufferAttachment.prototype);
    ColorAttachment.prototype.constructor = ColorAttachment;
    ColorAttachment.prototype.setDirty = function setDirty() {
        this.dirty = true;
    };
    ColorAttachment.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.context.bindFramebuffer.set(this.parent);
        var gl = this.gl;
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, v, 0);
        this.current = v;
        this.dirty = false;
    };
    return ColorAttachment;
}(FramebufferAttachment);
var DepthAttachment = function (FramebufferAttachment) {
    function DepthAttachment() {
        FramebufferAttachment.apply(this, arguments);
    }
    if (FramebufferAttachment)
        DepthAttachment.__proto__ = FramebufferAttachment;
    DepthAttachment.prototype = Object.create(FramebufferAttachment && FramebufferAttachment.prototype);
    DepthAttachment.prototype.constructor = DepthAttachment;
    DepthAttachment.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.context.bindFramebuffer.set(this.parent);
        var gl = this.gl;
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, v);
        this.current = v;
        this.dirty = false;
    };
    return DepthAttachment;
}(FramebufferAttachment);

var Framebuffer = function Framebuffer(context, width, height) {
    this.context = context;
    this.width = width;
    this.height = height;
    var gl = context.gl;
    var fbo = this.framebuffer = gl.createFramebuffer();
    this.colorAttachment = new ColorAttachment(context, fbo);
    this.depthAttachment = new DepthAttachment(context, fbo);
};
Framebuffer.prototype.destroy = function destroy() {
    var gl = this.context.gl;
    var texture = this.colorAttachment.get();
    if (texture) {
        gl.deleteTexture(texture);
    }
    var renderbuffer = this.depthAttachment.get();
    if (renderbuffer) {
        gl.deleteRenderbuffer(renderbuffer);
    }
    gl.deleteFramebuffer(this.framebuffer);
};

var ALWAYS = 519;
var DepthMode = function DepthMode(depthFunc, depthMask, depthRange) {
    this.func = depthFunc;
    this.mask = depthMask;
    this.range = depthRange;
};
DepthMode.ReadOnly = false;
DepthMode.ReadWrite = true;
DepthMode.disabled = new DepthMode(ALWAYS, DepthMode.ReadOnly, [
    0,
    1
]);

var ALWAYS$1 = 519;
var KEEP = 7680;
var StencilMode = function StencilMode(test, ref, mask, fail, depthFail, pass) {
    this.test = test;
    this.ref = ref;
    this.mask = mask;
    this.fail = fail;
    this.depthFail = depthFail;
    this.pass = pass;
};
StencilMode.disabled = new StencilMode({
    func: ALWAYS$1,
    mask: 0
}, 0, 0, KEEP, KEEP, KEEP);

var ZERO = 0;
var ONE = 1;
var ONE_MINUS_SRC_ALPHA = 771;
var ColorMode = function ColorMode(blendFunction, blendColor, mask) {
    this.blendFunction = blendFunction;
    this.blendColor = blendColor;
    this.mask = mask;
};
ColorMode.Replace = [
    ONE,
    ZERO
];
ColorMode.disabled = new ColorMode(ColorMode.Replace, __chunk_1.Color.transparent, [
    false,
    false,
    false,
    false
]);
ColorMode.unblended = new ColorMode(ColorMode.Replace, __chunk_1.Color.transparent, [
    true,
    true,
    true,
    true
]);
ColorMode.alphaBlended = new ColorMode([
    ONE,
    ONE_MINUS_SRC_ALPHA
], __chunk_1.Color.transparent, [
    true,
    true,
    true,
    true
]);

var BACK = 1029;
var CCW = 2305;
var CullFaceMode = function CullFaceMode(enable, mode, frontFace) {
    this.enable = enable;
    this.mode = mode;
    this.frontFace = frontFace;
};
CullFaceMode.disabled = new CullFaceMode(false, BACK, CCW);
CullFaceMode.backCCW = new CullFaceMode(true, BACK, CCW);

var Context = function Context(gl) {
    this.gl = gl;
    this.extVertexArrayObject = this.gl.getExtension('OES_vertex_array_object');
    this.clearColor = new ClearColor(this);
    this.clearDepth = new ClearDepth(this);
    this.clearStencil = new ClearStencil(this);
    this.colorMask = new ColorMask(this);
    this.depthMask = new DepthMask(this);
    this.stencilMask = new StencilMask(this);
    this.stencilFunc = new StencilFunc(this);
    this.stencilOp = new StencilOp(this);
    this.stencilTest = new StencilTest(this);
    this.depthRange = new DepthRange(this);
    this.depthTest = new DepthTest(this);
    this.depthFunc = new DepthFunc(this);
    this.blend = new Blend(this);
    this.blendFunc = new BlendFunc(this);
    this.blendColor = new BlendColor(this);
    this.blendEquation = new BlendEquation(this);
    this.cullFace = new CullFace(this);
    this.cullFaceSide = new CullFaceSide(this);
    this.frontFace = new FrontFace(this);
    this.program = new Program(this);
    this.activeTexture = new ActiveTextureUnit(this);
    this.viewport = new Viewport(this);
    this.bindFramebuffer = new BindFramebuffer(this);
    this.bindRenderbuffer = new BindRenderbuffer(this);
    this.bindTexture = new BindTexture(this);
    this.bindVertexBuffer = new BindVertexBuffer(this);
    this.bindElementBuffer = new BindElementBuffer(this);
    this.bindVertexArrayOES = this.extVertexArrayObject && new BindVertexArrayOES(this);
    this.pixelStoreUnpack = new PixelStoreUnpack(this);
    this.pixelStoreUnpackPremultiplyAlpha = new PixelStoreUnpackPremultiplyAlpha(this);
    this.pixelStoreUnpackFlipY = new PixelStoreUnpackFlipY(this);
    this.extTextureFilterAnisotropic = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
    if (this.extTextureFilterAnisotropic) {
        this.extTextureFilterAnisotropicMax = gl.getParameter(this.extTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    }
    this.extTextureHalfFloat = gl.getExtension('OES_texture_half_float');
    if (this.extTextureHalfFloat) {
        gl.getExtension('OES_texture_half_float_linear');
    }
};
Context.prototype.setDirty = function setDirty() {
    this.clearColor.dirty = true;
    this.clearDepth.dirty = true;
    this.clearStencil.dirty = true;
    this.colorMask.dirty = true;
    this.depthMask.dirty = true;
    this.stencilMask.dirty = true;
    this.stencilFunc.dirty = true;
    this.stencilOp.dirty = true;
    this.stencilTest.dirty = true;
    this.depthRange.dirty = true;
    this.depthTest.dirty = true;
    this.depthFunc.dirty = true;
    this.blend.dirty = true;
    this.blendFunc.dirty = true;
    this.blendColor.dirty = true;
    this.blendEquation.dirty = true;
    this.cullFace.dirty = true;
    this.cullFaceSide.dirty = true;
    this.frontFace.dirty = true;
    this.program.dirty = true;
    this.activeTexture.dirty = true;
    this.viewport.dirty = true;
    this.bindFramebuffer.dirty = true;
    this.bindRenderbuffer.dirty = true;
    this.bindTexture.dirty = true;
    this.bindVertexBuffer.dirty = true;
    this.bindElementBuffer.dirty = true;
    if (this.extVertexArrayObject) {
        this.bindVertexArrayOES.dirty = true;
    }
    this.pixelStoreUnpack.dirty = true;
    this.pixelStoreUnpackPremultiplyAlpha.dirty = true;
    this.pixelStoreUnpackFlipY.dirty = true;
};
Context.prototype.createIndexBuffer = function createIndexBuffer(array, dynamicDraw) {
    return new IndexBuffer(this, array, dynamicDraw);
};
Context.prototype.createVertexBuffer = function createVertexBuffer(array, attributes, dynamicDraw) {
    return new VertexBuffer(this, array, attributes, dynamicDraw);
};
Context.prototype.createRenderbuffer = function createRenderbuffer(storageFormat, width, height) {
    var gl = this.gl;
    var rbo = gl.createRenderbuffer();
    this.bindRenderbuffer.set(rbo);
    gl.renderbufferStorage(gl.RENDERBUFFER, storageFormat, width, height);
    this.bindRenderbuffer.set(null);
    return rbo;
};
Context.prototype.createFramebuffer = function createFramebuffer(width, height) {
    return new Framebuffer(this, width, height);
};
Context.prototype.clear = function clear(ref) {
    var color = ref.color;
    var depth = ref.depth;
    var gl = this.gl;
    var mask = 0;
    if (color) {
        mask |= gl.COLOR_BUFFER_BIT;
        this.clearColor.set(color);
        this.colorMask.set([
            true,
            true,
            true,
            true
        ]);
    }
    if (typeof depth !== 'undefined') {
        mask |= gl.DEPTH_BUFFER_BIT;
        this.clearDepth.set(depth);
        this.depthMask.set(true);
    }
    gl.clear(mask);
};
Context.prototype.setCullFace = function setCullFace(cullFaceMode) {
    if (cullFaceMode.enable === false) {
        this.cullFace.set(false);
    } else {
        this.cullFace.set(true);
        this.cullFaceSide.set(cullFaceMode.mode);
        this.frontFace.set(cullFaceMode.frontFace);
    }
};
Context.prototype.setDepthMode = function setDepthMode(depthMode) {
    if (depthMode.func === this.gl.ALWAYS && !depthMode.mask) {
        this.depthTest.set(false);
    } else {
        this.depthTest.set(true);
        this.depthFunc.set(depthMode.func);
        this.depthMask.set(depthMode.mask);
        this.depthRange.set(depthMode.range);
    }
};
Context.prototype.setStencilMode = function setStencilMode(stencilMode) {
    if (stencilMode.test.func === this.gl.ALWAYS && !stencilMode.mask) {
        this.stencilTest.set(false);
    } else {
        this.stencilTest.set(true);
        this.stencilMask.set(stencilMode.mask);
        this.stencilOp.set([
            stencilMode.fail,
            stencilMode.depthFail,
            stencilMode.pass
        ]);
        this.stencilFunc.set({
            func: stencilMode.test.func,
            ref: stencilMode.ref,
            mask: stencilMode.test.mask
        });
    }
};
Context.prototype.setColorMode = function setColorMode(colorMode) {
    if (__chunk_1.deepEqual(colorMode.blendFunction, ColorMode.Replace)) {
        this.blend.set(false);
    } else {
        this.blend.set(true);
        this.blendFunc.set(colorMode.blendFunction);
        this.blendColor.set(colorMode.blendColor);
    }
    this.colorMask.set(colorMode.mask);
};
Context.prototype.unbindVAO = function unbindVAO() {
    if (this.extVertexArrayObject) {
        this.bindVertexArrayOES.set(null);
    }
};

var SourceCache = function (Evented) {
    function SourceCache(id, options, dispatcher) {
        var this$1 = this;
        Evented.call(this);
        this.id = id;
        this.dispatcher = dispatcher;
        this.on('data', function (e) {
            if (e.dataType === 'source' && e.sourceDataType === 'metadata') {
                this$1._sourceLoaded = true;
            }
            if (this$1._sourceLoaded && !this$1._paused && e.dataType === 'source' && e.sourceDataType === 'content') {
                this$1.reload();
                if (this$1.transform) {
                    this$1.update(this$1.transform);
                }
            }
        });
        this.on('error', function () {
            this$1._sourceErrored = true;
        });
        this._source = create(id, options, dispatcher, this);
        this._tiles = {};
        this._cache = new TileCache(0, this._unloadTile.bind(this));
        this._timers = {};
        this._cacheTimers = {};
        this._maxTileCacheSize = null;
        this._coveredTiles = {};
        this._state = new __chunk_1.SourceFeatureState();
    }
    if (Evented)
        SourceCache.__proto__ = Evented;
    SourceCache.prototype = Object.create(Evented && Evented.prototype);
    SourceCache.prototype.constructor = SourceCache;
    SourceCache.prototype.onAdd = function onAdd(map) {
        this.map = map;
        this._maxTileCacheSize = map ? map._maxTileCacheSize : null;
        if (this._source && this._source.onAdd) {
            this._source.onAdd(map);
        }
    };
    SourceCache.prototype.onRemove = function onRemove(map) {
        if (this._source && this._source.onRemove) {
            this._source.onRemove(map);
        }
    };
    SourceCache.prototype.loaded = function loaded() {
        var this$1 = this;
        if (this._sourceErrored) {
            return true;
        }
        if (!this._sourceLoaded) {
            return false;
        }
        for (var t in this$1._tiles) {
            var tile = this$1._tiles[t];
            if (tile.state !== 'loaded' && tile.state !== 'errored') {
                return false;
            }
        }
        return true;
    };
    SourceCache.prototype.getSource = function getSource() {
        return this._source;
    };
    SourceCache.prototype.pause = function pause() {
        this._paused = true;
    };
    SourceCache.prototype.resume = function resume() {
        if (!this._paused) {
            return;
        }
        var shouldReload = this._shouldReloadOnResume;
        this._paused = false;
        this._shouldReloadOnResume = false;
        if (shouldReload) {
            this.reload();
        }
        if (this.transform) {
            this.update(this.transform);
        }
    };
    SourceCache.prototype._loadTile = function _loadTile(tile, callback) {
        return this._source.loadTile(tile, callback);
    };
    SourceCache.prototype._unloadTile = function _unloadTile(tile) {
        if (this._source.unloadTile) {
            return this._source.unloadTile(tile, function () {
            });
        }
    };
    SourceCache.prototype._abortTile = function _abortTile(tile) {
        if (this._source.abortTile) {
            return this._source.abortTile(tile, function () {
            });
        }
    };
    SourceCache.prototype.serialize = function serialize() {
        return this._source.serialize();
    };
    SourceCache.prototype.prepare = function prepare(context) {
        var this$1 = this;
        if (this._source.prepare) {
            this._source.prepare();
        }
        this._state.coalesceChanges(this._tiles, this.map ? this.map.painter : null);
        for (var i in this$1._tiles) {
            this$1._tiles[i].upload(context);
        }
    };
    SourceCache.prototype.getIds = function getIds() {
        return Object.keys(this._tiles).map(Number).sort(compareKeyZoom);
    };
    SourceCache.prototype.getRenderableIds = function getRenderableIds(symbolLayer) {
        var this$1 = this;
        var ids = [];
        for (var id in this$1._tiles) {
            if (this$1._isIdRenderable(+id, symbolLayer)) {
                ids.push(+id);
            }
        }
        if (symbolLayer) {
            return ids.sort(function (a_, b_) {
                var a = this$1._tiles[a_].tileID;
                var b = this$1._tiles[b_].tileID;
                var rotatedA = new __chunk_1.Point(a.canonical.x, a.canonical.y)._rotate(this$1.transform.angle);
                var rotatedB = new __chunk_1.Point(b.canonical.x, b.canonical.y)._rotate(this$1.transform.angle);
                return a.overscaledZ - b.overscaledZ || rotatedB.y - rotatedA.y || rotatedB.x - rotatedA.x;
            });
        }
        return ids.sort(compareKeyZoom);
    };
    SourceCache.prototype.hasRenderableParent = function hasRenderableParent(tileID) {
        var parentTile = this.findLoadedParent(tileID, 0);
        if (parentTile) {
            return this._isIdRenderable(parentTile.tileID.key);
        }
        return false;
    };
    SourceCache.prototype._isIdRenderable = function _isIdRenderable(id, symbolLayer) {
        return this._tiles[id] && this._tiles[id].hasData() && !this._coveredTiles[id] && (symbolLayer || !this._tiles[id].holdingForFade());
    };
    SourceCache.prototype.reload = function reload() {
        var this$1 = this;
        if (this._paused) {
            this._shouldReloadOnResume = true;
            return;
        }
        this._cache.reset();
        for (var i in this$1._tiles) {
            if (this$1._tiles[i].state !== 'errored') {
                this$1._reloadTile(i, 'reloading');
            }
        }
    };
    SourceCache.prototype._reloadTile = function _reloadTile(id, state) {
        var tile = this._tiles[id];
        if (!tile) {
            return;
        }
        if (tile.state !== 'loading') {
            tile.state = state;
        }
        this._loadTile(tile, this._tileLoaded.bind(this, tile, id, state));
    };
    SourceCache.prototype._tileLoaded = function _tileLoaded(tile, id, previousState, err) {
        if (err) {
            tile.state = 'errored';
            if (err.status !== 404) {
                this._source.fire(new __chunk_1.ErrorEvent(err, { tile: tile }));
            } else {
                this.update(this.transform);
            }
            return;
        }
        tile.timeAdded = __chunk_1.browser.now();
        if (previousState === 'expired') {
            tile.refreshedUponExpiration = true;
        }
        this._setTileReloadTimer(id, tile);
        if (this.getSource().type === 'raster-dem' && tile.dem) {
            this._backfillDEM(tile);
        }
        this._state.initializeTileState(tile, this.map ? this.map.painter : null);
        this._source.fire(new __chunk_1.Event('data', {
            dataType: 'source',
            tile: tile,
            coord: tile.tileID
        }));
    };
    SourceCache.prototype._backfillDEM = function _backfillDEM(tile) {
        var this$1 = this;
        var renderables = this.getRenderableIds();
        for (var i = 0; i < renderables.length; i++) {
            var borderId = renderables[i];
            if (tile.neighboringTiles && tile.neighboringTiles[borderId]) {
                var borderTile = this$1.getTileByID(borderId);
                fillBorder(tile, borderTile);
                fillBorder(borderTile, tile);
            }
        }
        function fillBorder(tile, borderTile) {
            tile.needsHillshadePrepare = true;
            var dx = borderTile.tileID.canonical.x - tile.tileID.canonical.x;
            var dy = borderTile.tileID.canonical.y - tile.tileID.canonical.y;
            var dim = Math.pow(2, tile.tileID.canonical.z);
            var borderId = borderTile.tileID.key;
            if (dx === 0 && dy === 0) {
                return;
            }
            if (Math.abs(dy) > 1) {
                return;
            }
            if (Math.abs(dx) > 1) {
                if (Math.abs(dx + dim) === 1) {
                    dx += dim;
                } else if (Math.abs(dx - dim) === 1) {
                    dx -= dim;
                }
            }
            if (!borderTile.dem || !tile.dem) {
                return;
            }
            tile.dem.backfillBorder(borderTile.dem, dx, dy);
            if (tile.neighboringTiles && tile.neighboringTiles[borderId]) {
                tile.neighboringTiles[borderId].backfilled = true;
            }
        }
    };
    SourceCache.prototype.getTile = function getTile(tileID) {
        return this.getTileByID(tileID.key);
    };
    SourceCache.prototype.getTileByID = function getTileByID(id) {
        return this._tiles[id];
    };
    SourceCache.prototype.getZoom = function getZoom(transform) {
        return transform.zoom + transform.scaleZoom(transform.tileSize / this._source.tileSize);
    };
    SourceCache.prototype._retainLoadedChildren = function _retainLoadedChildren(idealTiles, zoom, maxCoveringZoom, retain) {
        var this$1 = this;
        for (var id in this$1._tiles) {
            var tile = this$1._tiles[id];
            if (retain[id] || !tile.hasData() || tile.tileID.overscaledZ <= zoom || tile.tileID.overscaledZ > maxCoveringZoom) {
                continue;
            }
            var topmostLoadedID = tile.tileID;
            while (tile && tile.tileID.overscaledZ > zoom + 1) {
                var parentID = tile.tileID.scaledTo(tile.tileID.overscaledZ - 1);
                tile = this$1._tiles[parentID.key];
                if (tile && tile.hasData()) {
                    topmostLoadedID = parentID;
                }
            }
            var tileID = topmostLoadedID;
            while (tileID.overscaledZ > zoom) {
                tileID = tileID.scaledTo(tileID.overscaledZ - 1);
                if (idealTiles[tileID.key]) {
                    retain[topmostLoadedID.key] = topmostLoadedID;
                    break;
                }
            }
        }
    };
    SourceCache.prototype.findLoadedParent = function findLoadedParent(tileID, minCoveringZoom) {
        var this$1 = this;
        for (var z = tileID.overscaledZ - 1; z >= minCoveringZoom; z--) {
            var parent = tileID.scaledTo(z);
            if (!parent) {
                return;
            }
            var id = String(parent.key);
            var tile = this$1._tiles[id];
            if (tile && tile.hasData()) {
                return tile;
            }
            if (this$1._cache.has(parent)) {
                return this$1._cache.get(parent);
            }
        }
    };
    SourceCache.prototype.updateCacheSize = function updateCacheSize(transform) {
        var widthInTiles = Math.ceil(transform.width / this._source.tileSize) + 1;
        var heightInTiles = Math.ceil(transform.height / this._source.tileSize) + 1;
        var approxTilesInView = widthInTiles * heightInTiles;
        var commonZoomRange = 5;
        var viewDependentMaxSize = Math.floor(approxTilesInView * commonZoomRange);
        var maxSize = typeof this._maxTileCacheSize === 'number' ? Math.min(this._maxTileCacheSize, viewDependentMaxSize) : viewDependentMaxSize;
        this._cache.setMaxSize(maxSize);
    };
    SourceCache.prototype.handleWrapJump = function handleWrapJump(lng) {
        var this$1 = this;
        var prevLng = this._prevLng === undefined ? lng : this._prevLng;
        var lngDifference = lng - prevLng;
        var worldDifference = lngDifference / 360;
        var wrapDelta = Math.round(worldDifference);
        this._prevLng = lng;
        if (wrapDelta) {
            var tiles = {};
            for (var key in this$1._tiles) {
                var tile = this$1._tiles[key];
                tile.tileID = tile.tileID.unwrapTo(tile.tileID.wrap + wrapDelta);
                tiles[tile.tileID.key] = tile;
            }
            this._tiles = tiles;
            for (var id in this$1._timers) {
                clearTimeout(this$1._timers[id]);
                delete this$1._timers[id];
            }
            for (var id$1 in this$1._tiles) {
                var tile$1 = this$1._tiles[id$1];
                this$1._setTileReloadTimer(id$1, tile$1);
            }
        }
    };
    SourceCache.prototype.update = function update(transform) {
        var this$1 = this;
        this.transform = transform;
        if (!this._sourceLoaded || this._paused) {
            return;
        }
        this.updateCacheSize(transform);
        this.handleWrapJump(this.transform.center.lng);
        this._coveredTiles = {};
        var idealTileIDs;
        if (!this.used) {
            idealTileIDs = [];
        } else if (this._source.tileID) {
            idealTileIDs = transform.getVisibleUnwrappedCoordinates(this._source.tileID).map(function (unwrapped) {
                return new __chunk_1.OverscaledTileID(unwrapped.canonical.z, unwrapped.wrap, unwrapped.canonical.z, unwrapped.canonical.x, unwrapped.canonical.y);
            });
        } else {
            idealTileIDs = transform.coveringTiles({
                tileSize: this._source.tileSize,
                minzoom: this._source.minzoom,
                maxzoom: this._source.maxzoom,
                roundZoom: this._source.roundZoom,
                reparseOverscaled: this._source.reparseOverscaled
            });
            if (this._source.hasTile) {
                idealTileIDs = idealTileIDs.filter(function (coord) {
                    return this$1._source.hasTile(coord);
                });
            }
        }
        var zoom = (this._source.roundZoom ? Math.round : Math.floor)(this.getZoom(transform));
        var minCoveringZoom = Math.max(zoom - SourceCache.maxOverzooming, this._source.minzoom);
        var maxCoveringZoom = Math.max(zoom + SourceCache.maxUnderzooming, this._source.minzoom);
        var retain = this._updateRetainedTiles(idealTileIDs, zoom);
        if (isRasterType(this._source.type)) {
            var parentsForFading = {};
            var fadingTiles = {};
            var ids = Object.keys(retain);
            for (var i = 0, list = ids; i < list.length; i += 1) {
                var id = list[i];
                var tileID = retain[id];
                var tile = this$1._tiles[id];
                if (!tile || tile.fadeEndTime && tile.fadeEndTime <= __chunk_1.browser.now()) {
                    continue;
                }
                var parentTile = this$1.findLoadedParent(tileID, minCoveringZoom);
                if (parentTile) {
                    this$1._addTile(parentTile.tileID);
                    parentsForFading[parentTile.tileID.key] = parentTile.tileID;
                }
                fadingTiles[id] = tileID;
            }
            this._retainLoadedChildren(fadingTiles, zoom, maxCoveringZoom, retain);
            for (var id$1 in parentsForFading) {
                if (!retain[id$1]) {
                    this$1._coveredTiles[id$1] = true;
                    retain[id$1] = parentsForFading[id$1];
                }
            }
        }
        for (var retainedId in retain) {
            this$1._tiles[retainedId].clearFadeHold();
        }
        var remove = __chunk_1.keysDifference(this._tiles, retain);
        for (var i$1 = 0, list$1 = remove; i$1 < list$1.length; i$1 += 1) {
            var tileID$1 = list$1[i$1];
            var tile$1 = this$1._tiles[tileID$1];
            if (tile$1.hasSymbolBuckets && !tile$1.holdingForFade()) {
                tile$1.setHoldDuration(this$1.map._fadeDuration);
            } else if (!tile$1.hasSymbolBuckets || tile$1.symbolFadeFinished()) {
                this$1._removeTile(tileID$1);
            }
        }
    };
    SourceCache.prototype.releaseSymbolFadeTiles = function releaseSymbolFadeTiles() {
        var this$1 = this;
        for (var id in this$1._tiles) {
            if (this$1._tiles[id].holdingForFade()) {
                this$1._removeTile(id);
            }
        }
    };
    SourceCache.prototype._updateRetainedTiles = function _updateRetainedTiles(idealTileIDs, zoom) {
        var this$1 = this;
        var retain = {};
        var checked = {};
        var minCoveringZoom = Math.max(zoom - SourceCache.maxOverzooming, this._source.minzoom);
        var maxCoveringZoom = Math.max(zoom + SourceCache.maxUnderzooming, this._source.minzoom);
        var missingTiles = {};
        for (var i = 0, list = idealTileIDs; i < list.length; i += 1) {
            var tileID = list[i];
            var tile = this$1._addTile(tileID);
            retain[tileID.key] = tileID;
            if (tile.hasData()) {
                continue;
            }
            if (zoom < this$1._source.maxzoom) {
                missingTiles[tileID.key] = tileID;
            }
        }
        this._retainLoadedChildren(missingTiles, zoom, maxCoveringZoom, retain);
        for (var i$1 = 0, list$1 = idealTileIDs; i$1 < list$1.length; i$1 += 1) {
            var tileID$1 = list$1[i$1];
            var tile$1 = this$1._tiles[tileID$1.key];
            if (tile$1.hasData()) {
                continue;
            }
            if (zoom + 1 > this$1._source.maxzoom) {
                var childCoord = tileID$1.children(this$1._source.maxzoom)[0];
                var childTile = this$1.getTile(childCoord);
                if (!!childTile && childTile.hasData()) {
                    retain[childCoord.key] = childCoord;
                    continue;
                }
            } else {
                var children = tileID$1.children(this$1._source.maxzoom);
                if (retain[children[0].key] && retain[children[1].key] && retain[children[2].key] && retain[children[3].key]) {
                    continue;
                }
            }
            var parentWasRequested = tile$1.wasRequested();
            for (var overscaledZ = tileID$1.overscaledZ - 1; overscaledZ >= minCoveringZoom; --overscaledZ) {
                var parentId = tileID$1.scaledTo(overscaledZ);
                if (checked[parentId.key]) {
                    break;
                }
                checked[parentId.key] = true;
                tile$1 = this$1.getTile(parentId);
                if (!tile$1 && parentWasRequested) {
                    tile$1 = this$1._addTile(parentId);
                }
                if (tile$1) {
                    retain[parentId.key] = parentId;
                    parentWasRequested = tile$1.wasRequested();
                    if (tile$1.hasData()) {
                        break;
                    }
                }
            }
        }
        return retain;
    };
    SourceCache.prototype._addTile = function _addTile(tileID) {
        var tile = this._tiles[tileID.key];
        if (tile) {
            return tile;
        }
        tile = this._cache.getAndRemove(tileID);
        if (tile) {
            this._setTileReloadTimer(tileID.key, tile);
            tile.tileID = tileID;
            this._state.initializeTileState(tile, this.map ? this.map.painter : null);
            if (this._cacheTimers[tileID.key]) {
                clearTimeout(this._cacheTimers[tileID.key]);
                delete this._cacheTimers[tileID.key];
                this._setTileReloadTimer(tileID.key, tile);
            }
        }
        var cached = Boolean(tile);
        if (!cached) {
            tile = new __chunk_1.Tile(tileID, this._source.tileSize * tileID.overscaleFactor());
            this._loadTile(tile, this._tileLoaded.bind(this, tile, tileID.key, tile.state));
        }
        if (!tile) {
            return null;
        }
        tile.uses++;
        this._tiles[tileID.key] = tile;
        if (!cached) {
            this._source.fire(new __chunk_1.Event('dataloading', {
                tile: tile,
                coord: tile.tileID,
                dataType: 'source'
            }));
        }
        return tile;
    };
    SourceCache.prototype._setTileReloadTimer = function _setTileReloadTimer(id, tile) {
        var this$1 = this;
        if (id in this._timers) {
            clearTimeout(this._timers[id]);
            delete this._timers[id];
        }
        var expiryTimeout = tile.getExpiryTimeout();
        if (expiryTimeout) {
            this._timers[id] = setTimeout(function () {
                this$1._reloadTile(id, 'expired');
                delete this$1._timers[id];
            }, expiryTimeout);
        }
    };
    SourceCache.prototype._removeTile = function _removeTile(id) {
        var tile = this._tiles[id];
        if (!tile) {
            return;
        }
        tile.uses--;
        delete this._tiles[id];
        if (this._timers[id]) {
            clearTimeout(this._timers[id]);
            delete this._timers[id];
        }
        if (tile.uses > 0) {
            return;
        }
        if (tile.hasData()) {
            this._cache.add(tile.tileID, tile, tile.getExpiryTimeout());
        } else {
            tile.aborted = true;
            this._abortTile(tile);
            this._unloadTile(tile);
        }
    };
    SourceCache.prototype.clearTiles = function clearTiles() {
        var this$1 = this;
        this._shouldReloadOnResume = false;
        this._paused = false;
        for (var id in this$1._tiles) {
            this$1._removeTile(id);
        }
        this._cache.reset();
    };
    SourceCache.prototype.tilesIn = function tilesIn(queryGeometry, maxPitchScaleFactor) {
        var this$1 = this;
        var tileResults = [];
        var ids = this.getIds();
        var minX = Infinity;
        var minY = Infinity;
        var maxX = -Infinity;
        var maxY = -Infinity;
        var z = queryGeometry[0].zoom;
        for (var k = 0; k < queryGeometry.length; k++) {
            var p = queryGeometry[k];
            minX = Math.min(minX, p.column);
            minY = Math.min(minY, p.row);
            maxX = Math.max(maxX, p.column);
            maxY = Math.max(maxY, p.row);
        }
        for (var i = 0; i < ids.length; i++) {
            var tile = this$1._tiles[ids[i]];
            if (tile.holdingForFade()) {
                continue;
            }
            var tileID = tile.tileID;
            var scale = Math.pow(2, this$1.transform.zoom - tile.tileID.overscaledZ);
            var queryPadding = maxPitchScaleFactor * tile.queryPadding * __chunk_1.EXTENT / tile.tileSize / scale;
            var tileSpaceBounds = [
                coordinateToTilePoint(tileID, new __chunk_1.Coordinate(minX, minY, z)),
                coordinateToTilePoint(tileID, new __chunk_1.Coordinate(maxX, maxY, z))
            ];
            if (tileSpaceBounds[0].x - queryPadding < __chunk_1.EXTENT && tileSpaceBounds[0].y - queryPadding < __chunk_1.EXTENT && tileSpaceBounds[1].x + queryPadding >= 0 && tileSpaceBounds[1].y + queryPadding >= 0) {
                var tileSpaceQueryGeometry = [];
                for (var j = 0; j < queryGeometry.length; j++) {
                    tileSpaceQueryGeometry.push(coordinateToTilePoint(tileID, queryGeometry[j]));
                }
                tileResults.push({
                    tile: tile,
                    tileID: tileID,
                    queryGeometry: [tileSpaceQueryGeometry],
                    scale: scale
                });
            }
        }
        return tileResults;
    };
    SourceCache.prototype.getVisibleCoordinates = function getVisibleCoordinates(symbolLayer) {
        var this$1 = this;
        var coords = this.getRenderableIds(symbolLayer).map(function (id) {
            return this$1._tiles[id].tileID;
        });
        for (var i = 0, list = coords; i < list.length; i += 1) {
            var coord = list[i];
            coord.posMatrix = this$1.transform.calculatePosMatrix(coord.toUnwrapped());
        }
        return coords;
    };
    SourceCache.prototype.hasTransition = function hasTransition() {
        var this$1 = this;
        if (this._source.hasTransition()) {
            return true;
        }
        if (isRasterType(this._source.type)) {
            for (var id in this$1._tiles) {
                var tile = this$1._tiles[id];
                if (tile.fadeEndTime !== undefined && tile.fadeEndTime >= __chunk_1.browser.now()) {
                    return true;
                }
            }
        }
        return false;
    };
    SourceCache.prototype.setFeatureState = function setFeatureState(sourceLayer, feature, state) {
        sourceLayer = sourceLayer || '_geojsonTileLayer';
        this._state.updateState(sourceLayer, feature, state);
    };
    SourceCache.prototype.getFeatureState = function getFeatureState(sourceLayer, feature) {
        sourceLayer = sourceLayer || '_geojsonTileLayer';
        return this._state.getState(sourceLayer, feature);
    };
    return SourceCache;
}(__chunk_1.Evented);
SourceCache.maxOverzooming = 10;
SourceCache.maxUnderzooming = 3;
function coordinateToTilePoint(tileID, coord) {
    var zoomedCoord = coord.zoomTo(tileID.canonical.z);
    return new __chunk_1.Point((zoomedCoord.column - (tileID.canonical.x + tileID.wrap * Math.pow(2, tileID.canonical.z))) * __chunk_1.EXTENT, (zoomedCoord.row - tileID.canonical.y) * __chunk_1.EXTENT);
}
function compareKeyZoom(a, b) {
    return a % 32 - b % 32 || b - a;
}
function isRasterType(type) {
    return type === 'raster' || type === 'image' || type === 'video';
}

function WebWorker () {
    return new __chunk_1.window.Worker(exported.workerUrl);
}

var WorkerPool = function WorkerPool() {
    this.active = {};
};
WorkerPool.prototype.acquire = function acquire(mapId) {
    var this$1 = this;
    if (!this.workers) {
        this.workers = [];
        while (this.workers.length < WorkerPool.workerCount) {
            this$1.workers.push(new WebWorker());
        }
    }
    this.active[mapId] = true;
    return this.workers.slice();
};
WorkerPool.prototype.release = function release(mapId) {
    delete this.active[mapId];
    if (Object.keys(this.active).length === 0) {
        this.workers.forEach(function (w) {
            w.terminate();
        });
        this.workers = null;
    }
};
WorkerPool.workerCount = Math.max(Math.floor(__chunk_1.browser.hardwareConcurrency / 2), 1);

var globalWorkerPool;
function getGlobalWorkerPool() {
    if (!globalWorkerPool) {
        globalWorkerPool = new WorkerPool();
    }
    return globalWorkerPool;
}

function deref(layer, parent) {
    var result = {};
    for (var k in layer) {
        if (k !== 'ref') {
            result[k] = layer[k];
        }
    }
    __chunk_1.refProperties.forEach(function (k) {
        if (k in parent) {
            result[k] = parent[k];
        }
    });
    return result;
}
function derefLayers(layers) {
    layers = layers.slice();
    var map = Object.create(null);
    for (var i = 0; i < layers.length; i++) {
        map[layers[i].id] = layers[i];
    }
    for (var i$1 = 0; i$1 < layers.length; i$1++) {
        if ('ref' in layers[i$1]) {
            layers[i$1] = deref(layers[i$1], map[layers[i$1].ref]);
        }
    }
    return layers;
}

var operations = {
    setStyle: 'setStyle',
    addLayer: 'addLayer',
    removeLayer: 'removeLayer',
    setPaintProperty: 'setPaintProperty',
    setLayoutProperty: 'setLayoutProperty',
    setFilter: 'setFilter',
    addSource: 'addSource',
    removeSource: 'removeSource',
    setGeoJSONSourceData: 'setGeoJSONSourceData',
    setLayerZoomRange: 'setLayerZoomRange',
    setLayerProperty: 'setLayerProperty',
    setCenter: 'setCenter',
    setZoom: 'setZoom',
    setBearing: 'setBearing',
    setPitch: 'setPitch',
    setSprite: 'setSprite',
    setGlyphs: 'setGlyphs',
    setTransition: 'setTransition',
    setLight: 'setLight'
};
function addSource(sourceId, after, commands) {
    commands.push({
        command: operations.addSource,
        args: [
            sourceId,
            after[sourceId]
        ]
    });
}
function removeSource(sourceId, commands, sourcesRemoved) {
    commands.push({
        command: operations.removeSource,
        args: [sourceId]
    });
    sourcesRemoved[sourceId] = true;
}
function updateSource(sourceId, after, commands, sourcesRemoved) {
    removeSource(sourceId, commands, sourcesRemoved);
    addSource(sourceId, after, commands);
}
function canUpdateGeoJSON(before, after, sourceId) {
    var prop;
    for (prop in before[sourceId]) {
        if (!before[sourceId].hasOwnProperty(prop)) {
            continue;
        }
        if (prop !== 'data' && !__chunk_1.deepEqual(before[sourceId][prop], after[sourceId][prop])) {
            return false;
        }
    }
    for (prop in after[sourceId]) {
        if (!after[sourceId].hasOwnProperty(prop)) {
            continue;
        }
        if (prop !== 'data' && !__chunk_1.deepEqual(before[sourceId][prop], after[sourceId][prop])) {
            return false;
        }
    }
    return true;
}
function diffSources(before, after, commands, sourcesRemoved) {
    before = before || {};
    after = after || {};
    var sourceId;
    for (sourceId in before) {
        if (!before.hasOwnProperty(sourceId)) {
            continue;
        }
        if (!after.hasOwnProperty(sourceId)) {
            removeSource(sourceId, commands, sourcesRemoved);
        }
    }
    for (sourceId in after) {
        if (!after.hasOwnProperty(sourceId)) {
            continue;
        }
        if (!before.hasOwnProperty(sourceId)) {
            addSource(sourceId, after, commands);
        } else if (!__chunk_1.deepEqual(before[sourceId], after[sourceId])) {
            if (before[sourceId].type === 'geojson' && after[sourceId].type === 'geojson' && canUpdateGeoJSON(before, after, sourceId)) {
                commands.push({
                    command: operations.setGeoJSONSourceData,
                    args: [
                        sourceId,
                        after[sourceId].data
                    ]
                });
            } else {
                updateSource(sourceId, after, commands, sourcesRemoved);
            }
        }
    }
}
function diffLayerPropertyChanges(before, after, commands, layerId, klass, command) {
    before = before || {};
    after = after || {};
    var prop;
    for (prop in before) {
        if (!before.hasOwnProperty(prop)) {
            continue;
        }
        if (!__chunk_1.deepEqual(before[prop], after[prop])) {
            commands.push({
                command: command,
                args: [
                    layerId,
                    prop,
                    after[prop],
                    klass
                ]
            });
        }
    }
    for (prop in after) {
        if (!after.hasOwnProperty(prop) || before.hasOwnProperty(prop)) {
            continue;
        }
        if (!__chunk_1.deepEqual(before[prop], after[prop])) {
            commands.push({
                command: command,
                args: [
                    layerId,
                    prop,
                    after[prop],
                    klass
                ]
            });
        }
    }
}
function pluckId(layer) {
    return layer.id;
}
function indexById(group, layer) {
    group[layer.id] = layer;
    return group;
}
function diffLayers(before, after, commands) {
    before = before || [];
    after = after || [];
    var beforeOrder = before.map(pluckId);
    var afterOrder = after.map(pluckId);
    var beforeIndex = before.reduce(indexById, {});
    var afterIndex = after.reduce(indexById, {});
    var tracker = beforeOrder.slice();
    var clean = Object.create(null);
    var i, d, layerId, beforeLayer, afterLayer, insertBeforeLayerId, prop;
    for (i = 0, d = 0; i < beforeOrder.length; i++) {
        layerId = beforeOrder[i];
        if (!afterIndex.hasOwnProperty(layerId)) {
            commands.push({
                command: operations.removeLayer,
                args: [layerId]
            });
            tracker.splice(tracker.indexOf(layerId, d), 1);
        } else {
            d++;
        }
    }
    for (i = 0, d = 0; i < afterOrder.length; i++) {
        layerId = afterOrder[afterOrder.length - 1 - i];
        if (tracker[tracker.length - 1 - i] === layerId) {
            continue;
        }
        if (beforeIndex.hasOwnProperty(layerId)) {
            commands.push({
                command: operations.removeLayer,
                args: [layerId]
            });
            tracker.splice(tracker.lastIndexOf(layerId, tracker.length - d), 1);
        } else {
            d++;
        }
        insertBeforeLayerId = tracker[tracker.length - i];
        commands.push({
            command: operations.addLayer,
            args: [
                afterIndex[layerId],
                insertBeforeLayerId
            ]
        });
        tracker.splice(tracker.length - i, 0, layerId);
        clean[layerId] = true;
    }
    for (i = 0; i < afterOrder.length; i++) {
        layerId = afterOrder[i];
        beforeLayer = beforeIndex[layerId];
        afterLayer = afterIndex[layerId];
        if (clean[layerId] || __chunk_1.deepEqual(beforeLayer, afterLayer)) {
            continue;
        }
        if (!__chunk_1.deepEqual(beforeLayer.source, afterLayer.source) || !__chunk_1.deepEqual(beforeLayer['source-layer'], afterLayer['source-layer']) || !__chunk_1.deepEqual(beforeLayer.type, afterLayer.type)) {
            commands.push({
                command: operations.removeLayer,
                args: [layerId]
            });
            insertBeforeLayerId = tracker[tracker.lastIndexOf(layerId) + 1];
            commands.push({
                command: operations.addLayer,
                args: [
                    afterLayer,
                    insertBeforeLayerId
                ]
            });
            continue;
        }
        diffLayerPropertyChanges(beforeLayer.layout, afterLayer.layout, commands, layerId, null, operations.setLayoutProperty);
        diffLayerPropertyChanges(beforeLayer.paint, afterLayer.paint, commands, layerId, null, operations.setPaintProperty);
        if (!__chunk_1.deepEqual(beforeLayer.filter, afterLayer.filter)) {
            commands.push({
                command: operations.setFilter,
                args: [
                    layerId,
                    afterLayer.filter
                ]
            });
        }
        if (!__chunk_1.deepEqual(beforeLayer.minzoom, afterLayer.minzoom) || !__chunk_1.deepEqual(beforeLayer.maxzoom, afterLayer.maxzoom)) {
            commands.push({
                command: operations.setLayerZoomRange,
                args: [
                    layerId,
                    afterLayer.minzoom,
                    afterLayer.maxzoom
                ]
            });
        }
        for (prop in beforeLayer) {
            if (!beforeLayer.hasOwnProperty(prop)) {
                continue;
            }
            if (prop === 'layout' || prop === 'paint' || prop === 'filter' || prop === 'metadata' || prop === 'minzoom' || prop === 'maxzoom') {
                continue;
            }
            if (prop.indexOf('paint.') === 0) {
                diffLayerPropertyChanges(beforeLayer[prop], afterLayer[prop], commands, layerId, prop.slice(6), operations.setPaintProperty);
            } else if (!__chunk_1.deepEqual(beforeLayer[prop], afterLayer[prop])) {
                commands.push({
                    command: operations.setLayerProperty,
                    args: [
                        layerId,
                        prop,
                        afterLayer[prop]
                    ]
                });
            }
        }
        for (prop in afterLayer) {
            if (!afterLayer.hasOwnProperty(prop) || beforeLayer.hasOwnProperty(prop)) {
                continue;
            }
            if (prop === 'layout' || prop === 'paint' || prop === 'filter' || prop === 'metadata' || prop === 'minzoom' || prop === 'maxzoom') {
                continue;
            }
            if (prop.indexOf('paint.') === 0) {
                diffLayerPropertyChanges(beforeLayer[prop], afterLayer[prop], commands, layerId, prop.slice(6), operations.setPaintProperty);
            } else if (!__chunk_1.deepEqual(beforeLayer[prop], afterLayer[prop])) {
                commands.push({
                    command: operations.setLayerProperty,
                    args: [
                        layerId,
                        prop,
                        afterLayer[prop]
                    ]
                });
            }
        }
    }
}
function diffStyles(before, after) {
    if (!before) {
        return [{
                command: operations.setStyle,
                args: [after]
            }];
    }
    var commands = [];
    try {
        if (!__chunk_1.deepEqual(before.version, after.version)) {
            return [{
                    command: operations.setStyle,
                    args: [after]
                }];
        }
        if (!__chunk_1.deepEqual(before.center, after.center)) {
            commands.push({
                command: operations.setCenter,
                args: [after.center]
            });
        }
        if (!__chunk_1.deepEqual(before.zoom, after.zoom)) {
            commands.push({
                command: operations.setZoom,
                args: [after.zoom]
            });
        }
        if (!__chunk_1.deepEqual(before.bearing, after.bearing)) {
            commands.push({
                command: operations.setBearing,
                args: [after.bearing]
            });
        }
        if (!__chunk_1.deepEqual(before.pitch, after.pitch)) {
            commands.push({
                command: operations.setPitch,
                args: [after.pitch]
            });
        }
        if (!__chunk_1.deepEqual(before.sprite, after.sprite)) {
            commands.push({
                command: operations.setSprite,
                args: [after.sprite]
            });
        }
        if (!__chunk_1.deepEqual(before.glyphs, after.glyphs)) {
            commands.push({
                command: operations.setGlyphs,
                args: [after.glyphs]
            });
        }
        if (!__chunk_1.deepEqual(before.transition, after.transition)) {
            commands.push({
                command: operations.setTransition,
                args: [after.transition]
            });
        }
        if (!__chunk_1.deepEqual(before.light, after.light)) {
            commands.push({
                command: operations.setLight,
                args: [after.light]
            });
        }
        var sourcesRemoved = {};
        var removeOrAddSourceCommands = [];
        diffSources(before.sources, after.sources, removeOrAddSourceCommands, sourcesRemoved);
        var beforeLayers = [];
        if (before.layers) {
            before.layers.forEach(function (layer) {
                if (sourcesRemoved[layer.source]) {
                    commands.push({
                        command: operations.removeLayer,
                        args: [layer.id]
                    });
                } else {
                    beforeLayers.push(layer);
                }
            });
        }
        commands = commands.concat(removeOrAddSourceCommands);
        diffLayers(beforeLayers, after.layers, commands);
    } catch (e) {
        console.warn('Unable to compute style diff:', e);
        commands = [{
                command: operations.setStyle,
                args: [after]
            }];
    }
    return commands;
}

var GridIndex = function GridIndex(width, height, cellSize) {
    var boxCells = this.boxCells = [];
    var circleCells = this.circleCells = [];
    this.xCellCount = Math.ceil(width / cellSize);
    this.yCellCount = Math.ceil(height / cellSize);
    for (var i = 0; i < this.xCellCount * this.yCellCount; i++) {
        boxCells.push([]);
        circleCells.push([]);
    }
    this.circleKeys = [];
    this.boxKeys = [];
    this.bboxes = [];
    this.circles = [];
    this.width = width;
    this.height = height;
    this.xScale = this.xCellCount / width;
    this.yScale = this.yCellCount / height;
    this.boxUid = 0;
    this.circleUid = 0;
};
GridIndex.prototype.keysLength = function keysLength() {
    return this.boxKeys.length + this.circleKeys.length;
};
GridIndex.prototype.insert = function insert(key, x1, y1, x2, y2) {
    this._forEachCell(x1, y1, x2, y2, this._insertBoxCell, this.boxUid++);
    this.boxKeys.push(key);
    this.bboxes.push(x1);
    this.bboxes.push(y1);
    this.bboxes.push(x2);
    this.bboxes.push(y2);
};
GridIndex.prototype.insertCircle = function insertCircle(key, x, y, radius) {
    this._forEachCell(x - radius, y - radius, x + radius, y + radius, this._insertCircleCell, this.circleUid++);
    this.circleKeys.push(key);
    this.circles.push(x);
    this.circles.push(y);
    this.circles.push(radius);
};
GridIndex.prototype._insertBoxCell = function _insertBoxCell(x1, y1, x2, y2, cellIndex, uid) {
    this.boxCells[cellIndex].push(uid);
};
GridIndex.prototype._insertCircleCell = function _insertCircleCell(x1, y1, x2, y2, cellIndex, uid) {
    this.circleCells[cellIndex].push(uid);
};
GridIndex.prototype._query = function _query(x1, y1, x2, y2, hitTest, predicate) {
    var this$1 = this;
    if (x2 < 0 || x1 > this.width || y2 < 0 || y1 > this.height) {
        return hitTest ? false : [];
    }
    var result = [];
    if (x1 <= 0 && y1 <= 0 && this.width <= x2 && this.height <= y2) {
        if (hitTest) {
            return true;
        }
        for (var boxUid = 0; boxUid < this.boxKeys.length; boxUid++) {
            result.push({
                key: this$1.boxKeys[boxUid],
                x1: this$1.bboxes[boxUid * 4],
                y1: this$1.bboxes[boxUid * 4 + 1],
                x2: this$1.bboxes[boxUid * 4 + 2],
                y2: this$1.bboxes[boxUid * 4 + 3]
            });
        }
        for (var circleUid = 0; circleUid < this.circleKeys.length; circleUid++) {
            var x = this$1.circles[circleUid * 3];
            var y = this$1.circles[circleUid * 3 + 1];
            var radius = this$1.circles[circleUid * 3 + 2];
            result.push({
                key: this$1.circleKeys[circleUid],
                x1: x - radius,
                y1: y - radius,
                x2: x + radius,
                y2: y + radius
            });
        }
        return predicate ? result.filter(predicate) : result;
    } else {
        var queryArgs = {
            hitTest: hitTest,
            seenUids: {
                box: {},
                circle: {}
            }
        };
        this._forEachCell(x1, y1, x2, y2, this._queryCell, result, queryArgs, predicate);
        return hitTest ? result.length > 0 : result;
    }
};
GridIndex.prototype._queryCircle = function _queryCircle(x, y, radius, hitTest, predicate) {
    var x1 = x - radius;
    var x2 = x + radius;
    var y1 = y - radius;
    var y2 = y + radius;
    if (x2 < 0 || x1 > this.width || y2 < 0 || y1 > this.height) {
        return hitTest ? false : [];
    }
    var result = [];
    var queryArgs = {
        hitTest: hitTest,
        circle: {
            x: x,
            y: y,
            radius: radius
        },
        seenUids: {
            box: {},
            circle: {}
        }
    };
    this._forEachCell(x1, y1, x2, y2, this._queryCellCircle, result, queryArgs, predicate);
    return hitTest ? result.length > 0 : result;
};
GridIndex.prototype.query = function query(x1, y1, x2, y2, predicate) {
    return this._query(x1, y1, x2, y2, false, predicate);
};
GridIndex.prototype.hitTest = function hitTest(x1, y1, x2, y2, predicate) {
    return this._query(x1, y1, x2, y2, true, predicate);
};
GridIndex.prototype.hitTestCircle = function hitTestCircle(x, y, radius, predicate) {
    return this._queryCircle(x, y, radius, true, predicate);
};
GridIndex.prototype._queryCell = function _queryCell(x1, y1, x2, y2, cellIndex, result, queryArgs, predicate) {
    var this$1 = this;
    var seenUids = queryArgs.seenUids;
    var boxCell = this.boxCells[cellIndex];
    if (boxCell !== null) {
        var bboxes = this.bboxes;
        for (var i = 0, list = boxCell; i < list.length; i += 1) {
            var boxUid = list[i];
            if (!seenUids.box[boxUid]) {
                seenUids.box[boxUid] = true;
                var offset = boxUid * 4;
                if (x1 <= bboxes[offset + 2] && y1 <= bboxes[offset + 3] && x2 >= bboxes[offset + 0] && y2 >= bboxes[offset + 1] && (!predicate || predicate(this$1.boxKeys[boxUid]))) {
                    if (queryArgs.hitTest) {
                        result.push(true);
                        return true;
                    } else {
                        result.push({
                            key: this$1.boxKeys[boxUid],
                            x1: bboxes[offset],
                            y1: bboxes[offset + 1],
                            x2: bboxes[offset + 2],
                            y2: bboxes[offset + 3]
                        });
                    }
                }
            }
        }
    }
    var circleCell = this.circleCells[cellIndex];
    if (circleCell !== null) {
        var circles = this.circles;
        for (var i$1 = 0, list$1 = circleCell; i$1 < list$1.length; i$1 += 1) {
            var circleUid = list$1[i$1];
            if (!seenUids.circle[circleUid]) {
                seenUids.circle[circleUid] = true;
                var offset$1 = circleUid * 3;
                if (this$1._circleAndRectCollide(circles[offset$1], circles[offset$1 + 1], circles[offset$1 + 2], x1, y1, x2, y2) && (!predicate || predicate(this$1.circleKeys[circleUid]))) {
                    if (queryArgs.hitTest) {
                        result.push(true);
                        return true;
                    } else {
                        var x = circles[offset$1];
                        var y = circles[offset$1 + 1];
                        var radius = circles[offset$1 + 2];
                        result.push({
                            key: this$1.circleKeys[circleUid],
                            x1: x - radius,
                            y1: y - radius,
                            x2: x + radius,
                            y2: y + radius
                        });
                    }
                }
            }
        }
    }
};
GridIndex.prototype._queryCellCircle = function _queryCellCircle(x1, y1, x2, y2, cellIndex, result, queryArgs, predicate) {
    var this$1 = this;
    var circle = queryArgs.circle;
    var seenUids = queryArgs.seenUids;
    var boxCell = this.boxCells[cellIndex];
    if (boxCell !== null) {
        var bboxes = this.bboxes;
        for (var i = 0, list = boxCell; i < list.length; i += 1) {
            var boxUid = list[i];
            if (!seenUids.box[boxUid]) {
                seenUids.box[boxUid] = true;
                var offset = boxUid * 4;
                if (this$1._circleAndRectCollide(circle.x, circle.y, circle.radius, bboxes[offset + 0], bboxes[offset + 1], bboxes[offset + 2], bboxes[offset + 3]) && (!predicate || predicate(this$1.boxKeys[boxUid]))) {
                    result.push(true);
                    return true;
                }
            }
        }
    }
    var circleCell = this.circleCells[cellIndex];
    if (circleCell !== null) {
        var circles = this.circles;
        for (var i$1 = 0, list$1 = circleCell; i$1 < list$1.length; i$1 += 1) {
            var circleUid = list$1[i$1];
            if (!seenUids.circle[circleUid]) {
                seenUids.circle[circleUid] = true;
                var offset$1 = circleUid * 3;
                if (this$1._circlesCollide(circles[offset$1], circles[offset$1 + 1], circles[offset$1 + 2], circle.x, circle.y, circle.radius) && (!predicate || predicate(this$1.circleKeys[circleUid]))) {
                    result.push(true);
                    return true;
                }
            }
        }
    }
};
GridIndex.prototype._forEachCell = function _forEachCell(x1, y1, x2, y2, fn, arg1, arg2, predicate) {
    var this$1 = this;
    var cx1 = this._convertToXCellCoord(x1);
    var cy1 = this._convertToYCellCoord(y1);
    var cx2 = this._convertToXCellCoord(x2);
    var cy2 = this._convertToYCellCoord(y2);
    for (var x = cx1; x <= cx2; x++) {
        for (var y = cy1; y <= cy2; y++) {
            var cellIndex = this$1.xCellCount * y + x;
            if (fn.call(this$1, x1, y1, x2, y2, cellIndex, arg1, arg2, predicate)) {
                return;
            }
        }
    }
};
GridIndex.prototype._convertToXCellCoord = function _convertToXCellCoord(x) {
    return Math.max(0, Math.min(this.xCellCount - 1, Math.floor(x * this.xScale)));
};
GridIndex.prototype._convertToYCellCoord = function _convertToYCellCoord(y) {
    return Math.max(0, Math.min(this.yCellCount - 1, Math.floor(y * this.yScale)));
};
GridIndex.prototype._circlesCollide = function _circlesCollide(x1, y1, r1, x2, y2, r2) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    var bothRadii = r1 + r2;
    return bothRadii * bothRadii > dx * dx + dy * dy;
};
GridIndex.prototype._circleAndRectCollide = function _circleAndRectCollide(circleX, circleY, radius, x1, y1, x2, y2) {
    var halfRectWidth = (x2 - x1) / 2;
    var distX = Math.abs(circleX - (x1 + halfRectWidth));
    if (distX > halfRectWidth + radius) {
        return false;
    }
    var halfRectHeight = (y2 - y1) / 2;
    var distY = Math.abs(circleY - (y1 + halfRectHeight));
    if (distY > halfRectHeight + radius) {
        return false;
    }
    if (distX <= halfRectWidth || distY <= halfRectHeight) {
        return true;
    }
    var dx = distX - halfRectWidth;
    var dy = distY - halfRectHeight;
    return dx * dx + dy * dy <= radius * radius;
};

var symbolLayoutProperties = __chunk_1.properties.layout;
function getLabelPlaneMatrix(posMatrix, pitchWithMap, rotateWithMap, transform, pixelsToTileUnits) {
    var m = __chunk_1.identity(new Float32Array(16));
    if (pitchWithMap) {
        __chunk_1.identity(m);
        __chunk_1.scale(m, m, [
            1 / pixelsToTileUnits,
            1 / pixelsToTileUnits,
            1
        ]);
        if (!rotateWithMap) {
            __chunk_1.rotateZ(m, m, transform.angle);
        }
    } else {
        __chunk_1.scale(m, m, [
            transform.width / 2,
            -transform.height / 2,
            1
        ]);
        __chunk_1.translate(m, m, [
            1,
            -1,
            0
        ]);
        __chunk_1.multiply(m, m, posMatrix);
    }
    return m;
}
function getGlCoordMatrix(posMatrix, pitchWithMap, rotateWithMap, transform, pixelsToTileUnits) {
    var m = __chunk_1.identity(new Float32Array(16));
    if (pitchWithMap) {
        __chunk_1.multiply(m, m, posMatrix);
        __chunk_1.scale(m, m, [
            pixelsToTileUnits,
            pixelsToTileUnits,
            1
        ]);
        if (!rotateWithMap) {
            __chunk_1.rotateZ(m, m, -transform.angle);
        }
    } else {
        __chunk_1.scale(m, m, [
            1,
            -1,
            1
        ]);
        __chunk_1.translate(m, m, [
            -1,
            -1,
            0
        ]);
        __chunk_1.scale(m, m, [
            2 / transform.width,
            2 / transform.height,
            1
        ]);
    }
    return m;
}
function project(point, matrix) {
    var pos = [
        point.x,
        point.y,
        0,
        1
    ];
    xyTransformMat4(pos, pos, matrix);
    var w = pos[3];
    return {
        point: new __chunk_1.Point(pos[0] / w, pos[1] / w),
        signedDistanceFromCamera: w
    };
}
function isVisible(anchorPos, clippingBuffer) {
    var x = anchorPos[0] / anchorPos[3];
    var y = anchorPos[1] / anchorPos[3];
    var inPaddedViewport = x >= -clippingBuffer[0] && x <= clippingBuffer[0] && y >= -clippingBuffer[1] && y <= clippingBuffer[1];
    return inPaddedViewport;
}
function updateLineLabels(bucket, posMatrix, painter, isText, labelPlaneMatrix, glCoordMatrix, pitchWithMap, keepUpright) {
    var sizeData = isText ? bucket.textSizeData : bucket.iconSizeData;
    var partiallyEvaluatedSize = __chunk_1.evaluateSizeForZoom(sizeData, painter.transform.zoom, symbolLayoutProperties.properties[isText ? 'text-size' : 'icon-size']);
    var clippingBuffer = [
        256 / painter.width * 2 + 1,
        256 / painter.height * 2 + 1
    ];
    var dynamicLayoutVertexArray = isText ? bucket.text.dynamicLayoutVertexArray : bucket.icon.dynamicLayoutVertexArray;
    dynamicLayoutVertexArray.clear();
    var lineVertexArray = bucket.lineVertexArray;
    var placedSymbols = isText ? bucket.text.placedSymbolArray : bucket.icon.placedSymbolArray;
    var aspectRatio = painter.transform.width / painter.transform.height;
    var useVertical = false;
    for (var s = 0; s < placedSymbols.length; s++) {
        var symbol = placedSymbols.get(s);
        if (symbol.hidden || symbol.writingMode === __chunk_1.WritingMode.vertical && !useVertical) {
            hideGlyphs(symbol.numGlyphs, dynamicLayoutVertexArray);
            continue;
        }
        useVertical = false;
        var anchorPos = [
            symbol.anchorX,
            symbol.anchorY,
            0,
            1
        ];
        __chunk_1.transformMat4(anchorPos, anchorPos, posMatrix);
        if (!isVisible(anchorPos, clippingBuffer)) {
            hideGlyphs(symbol.numGlyphs, dynamicLayoutVertexArray);
            continue;
        }
        var cameraToAnchorDistance = anchorPos[3];
        var perspectiveRatio = 0.5 + 0.5 * (cameraToAnchorDistance / painter.transform.cameraToCenterDistance);
        var fontSize = __chunk_1.evaluateSizeForFeature(sizeData, partiallyEvaluatedSize, symbol);
        var pitchScaledFontSize = pitchWithMap ? fontSize * perspectiveRatio : fontSize / perspectiveRatio;
        var tileAnchorPoint = new __chunk_1.Point(symbol.anchorX, symbol.anchorY);
        var anchorPoint = project(tileAnchorPoint, labelPlaneMatrix).point;
        var projectionCache = {};
        var placeUnflipped = placeGlyphsAlongLine(symbol, pitchScaledFontSize, false, keepUpright, posMatrix, labelPlaneMatrix, glCoordMatrix, bucket.glyphOffsetArray, lineVertexArray, dynamicLayoutVertexArray, anchorPoint, tileAnchorPoint, projectionCache, aspectRatio);
        useVertical = placeUnflipped.useVertical;
        if (placeUnflipped.notEnoughRoom || useVertical || placeUnflipped.needsFlipping && placeGlyphsAlongLine(symbol, pitchScaledFontSize, true, keepUpright, posMatrix, labelPlaneMatrix, glCoordMatrix, bucket.glyphOffsetArray, lineVertexArray, dynamicLayoutVertexArray, anchorPoint, tileAnchorPoint, projectionCache, aspectRatio).notEnoughRoom) {
            hideGlyphs(symbol.numGlyphs, dynamicLayoutVertexArray);
        }
    }
    if (isText) {
        bucket.text.dynamicLayoutVertexBuffer.updateData(dynamicLayoutVertexArray);
    } else {
        bucket.icon.dynamicLayoutVertexBuffer.updateData(dynamicLayoutVertexArray);
    }
}
function placeFirstAndLastGlyph(fontScale, glyphOffsetArray, lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, symbol, lineVertexArray, labelPlaneMatrix, projectionCache, returnTileDistance) {
    var glyphEndIndex = symbol.glyphStartIndex + symbol.numGlyphs;
    var lineStartIndex = symbol.lineStartIndex;
    var lineEndIndex = symbol.lineStartIndex + symbol.lineLength;
    var firstGlyphOffset = glyphOffsetArray.getoffsetX(symbol.glyphStartIndex);
    var lastGlyphOffset = glyphOffsetArray.getoffsetX(glyphEndIndex - 1);
    var firstPlacedGlyph = placeGlyphAlongLine(fontScale * firstGlyphOffset, lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, symbol.segment, lineStartIndex, lineEndIndex, lineVertexArray, labelPlaneMatrix, projectionCache, returnTileDistance);
    if (!firstPlacedGlyph) {
        return null;
    }
    var lastPlacedGlyph = placeGlyphAlongLine(fontScale * lastGlyphOffset, lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, symbol.segment, lineStartIndex, lineEndIndex, lineVertexArray, labelPlaneMatrix, projectionCache, returnTileDistance);
    if (!lastPlacedGlyph) {
        return null;
    }
    return {
        first: firstPlacedGlyph,
        last: lastPlacedGlyph
    };
}
function requiresOrientationChange(writingMode, firstPoint, lastPoint, aspectRatio) {
    if (writingMode === __chunk_1.WritingMode.horizontal) {
        var rise = Math.abs(lastPoint.y - firstPoint.y);
        var run = Math.abs(lastPoint.x - firstPoint.x) * aspectRatio;
        if (rise > run) {
            return { useVertical: true };
        }
    }
    if (writingMode === __chunk_1.WritingMode.vertical ? firstPoint.y < lastPoint.y : firstPoint.x > lastPoint.x) {
        return { needsFlipping: true };
    }
    return null;
}
function placeGlyphsAlongLine(symbol, fontSize, flip, keepUpright, posMatrix, labelPlaneMatrix, glCoordMatrix, glyphOffsetArray, lineVertexArray, dynamicLayoutVertexArray, anchorPoint, tileAnchorPoint, projectionCache, aspectRatio) {
    var fontScale = fontSize / 24;
    var lineOffsetX = symbol.lineOffsetX * fontSize;
    var lineOffsetY = symbol.lineOffsetY * fontSize;
    var placedGlyphs;
    if (symbol.numGlyphs > 1) {
        var glyphEndIndex = symbol.glyphStartIndex + symbol.numGlyphs;
        var lineStartIndex = symbol.lineStartIndex;
        var lineEndIndex = symbol.lineStartIndex + symbol.lineLength;
        var firstAndLastGlyph = placeFirstAndLastGlyph(fontScale, glyphOffsetArray, lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, symbol, lineVertexArray, labelPlaneMatrix, projectionCache, false);
        if (!firstAndLastGlyph) {
            return { notEnoughRoom: true };
        }
        var firstPoint = project(firstAndLastGlyph.first.point, glCoordMatrix).point;
        var lastPoint = project(firstAndLastGlyph.last.point, glCoordMatrix).point;
        if (keepUpright && !flip) {
            var orientationChange = requiresOrientationChange(symbol.writingMode, firstPoint, lastPoint, aspectRatio);
            if (orientationChange) {
                return orientationChange;
            }
        }
        placedGlyphs = [firstAndLastGlyph.first];
        for (var glyphIndex = symbol.glyphStartIndex + 1; glyphIndex < glyphEndIndex - 1; glyphIndex++) {
            placedGlyphs.push(placeGlyphAlongLine(fontScale * glyphOffsetArray.getoffsetX(glyphIndex), lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, symbol.segment, lineStartIndex, lineEndIndex, lineVertexArray, labelPlaneMatrix, projectionCache, false));
        }
        placedGlyphs.push(firstAndLastGlyph.last);
    } else {
        if (keepUpright && !flip) {
            var a = project(tileAnchorPoint, posMatrix).point;
            var tileVertexIndex = symbol.lineStartIndex + symbol.segment + 1;
            var tileSegmentEnd = new __chunk_1.Point(lineVertexArray.getx(tileVertexIndex), lineVertexArray.gety(tileVertexIndex));
            var projectedVertex = project(tileSegmentEnd, posMatrix);
            var b = projectedVertex.signedDistanceFromCamera > 0 ? projectedVertex.point : projectTruncatedLineSegment(tileAnchorPoint, tileSegmentEnd, a, 1, posMatrix);
            var orientationChange$1 = requiresOrientationChange(symbol.writingMode, a, b, aspectRatio);
            if (orientationChange$1) {
                return orientationChange$1;
            }
        }
        var singleGlyph = placeGlyphAlongLine(fontScale * glyphOffsetArray.getoffsetX(symbol.glyphStartIndex), lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, symbol.segment, symbol.lineStartIndex, symbol.lineStartIndex + symbol.lineLength, lineVertexArray, labelPlaneMatrix, projectionCache, false);
        if (!singleGlyph) {
            return { notEnoughRoom: true };
        }
        placedGlyphs = [singleGlyph];
    }
    for (var i = 0, list = placedGlyphs; i < list.length; i += 1) {
        var glyph = list[i];
        __chunk_1.addDynamicAttributes(dynamicLayoutVertexArray, glyph.point, glyph.angle);
    }
    return {};
}
function projectTruncatedLineSegment(previousTilePoint, currentTilePoint, previousProjectedPoint, minimumLength, projectionMatrix) {
    var projectedUnitVertex = project(previousTilePoint.add(previousTilePoint.sub(currentTilePoint)._unit()), projectionMatrix).point;
    var projectedUnitSegment = previousProjectedPoint.sub(projectedUnitVertex);
    return previousProjectedPoint.add(projectedUnitSegment._mult(minimumLength / projectedUnitSegment.mag()));
}
function placeGlyphAlongLine(offsetX, lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, anchorSegment, lineStartIndex, lineEndIndex, lineVertexArray, labelPlaneMatrix, projectionCache, returnTileDistance) {
    var combinedOffsetX = flip ? offsetX - lineOffsetX : offsetX + lineOffsetX;
    var dir = combinedOffsetX > 0 ? 1 : -1;
    var angle = 0;
    if (flip) {
        dir *= -1;
        angle = Math.PI;
    }
    if (dir < 0) {
        angle += Math.PI;
    }
    var currentIndex = dir > 0 ? lineStartIndex + anchorSegment : lineStartIndex + anchorSegment + 1;
    var initialIndex = currentIndex;
    var current = anchorPoint;
    var prev = anchorPoint;
    var distanceToPrev = 0;
    var currentSegmentDistance = 0;
    var absOffsetX = Math.abs(combinedOffsetX);
    while (distanceToPrev + currentSegmentDistance <= absOffsetX) {
        currentIndex += dir;
        if (currentIndex < lineStartIndex || currentIndex >= lineEndIndex) {
            return null;
        }
        prev = current;
        current = projectionCache[currentIndex];
        if (current === undefined) {
            var currentVertex = new __chunk_1.Point(lineVertexArray.getx(currentIndex), lineVertexArray.gety(currentIndex));
            var projection = project(currentVertex, labelPlaneMatrix);
            if (projection.signedDistanceFromCamera > 0) {
                current = projectionCache[currentIndex] = projection.point;
            } else {
                var previousLineVertexIndex = currentIndex - dir;
                var previousTilePoint = distanceToPrev === 0 ? tileAnchorPoint : new __chunk_1.Point(lineVertexArray.getx(previousLineVertexIndex), lineVertexArray.gety(previousLineVertexIndex));
                current = projectTruncatedLineSegment(previousTilePoint, currentVertex, prev, absOffsetX - distanceToPrev + 1, labelPlaneMatrix);
            }
        }
        distanceToPrev += currentSegmentDistance;
        currentSegmentDistance = prev.dist(current);
    }
    var segmentInterpolationT = (absOffsetX - distanceToPrev) / currentSegmentDistance;
    var prevToCurrent = current.sub(prev);
    var p = prevToCurrent.mult(segmentInterpolationT)._add(prev);
    p._add(prevToCurrent._unit()._perp()._mult(lineOffsetY * dir));
    var segmentAngle = angle + Math.atan2(current.y - prev.y, current.x - prev.x);
    return {
        point: p,
        angle: segmentAngle,
        tileDistance: returnTileDistance ? {
            prevTileDistance: currentIndex - dir === initialIndex ? 0 : lineVertexArray.gettileUnitDistanceFromAnchor(currentIndex - dir),
            lastSegmentViewportDistance: absOffsetX - distanceToPrev
        } : null
    };
}
var hiddenGlyphAttributes = new Float32Array([
    -Infinity,
    -Infinity,
    0,
    -Infinity,
    -Infinity,
    0,
    -Infinity,
    -Infinity,
    0,
    -Infinity,
    -Infinity,
    0
]);
function hideGlyphs(num, dynamicLayoutVertexArray) {
    for (var i = 0; i < num; i++) {
        var offset = dynamicLayoutVertexArray.length;
        dynamicLayoutVertexArray.resize(offset + 4);
        dynamicLayoutVertexArray.float32.set(hiddenGlyphAttributes, offset * 3);
    }
}
function xyTransformMat4(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    out[3] = m[3] * x + m[7] * y + m[15];
    return out;
}

var viewportPadding = 100;
var CollisionIndex = function CollisionIndex(transform, grid, ignoredGrid) {
    if (grid === void 0)
        grid = new GridIndex(transform.width + 2 * viewportPadding, transform.height + 2 * viewportPadding, 25);
    if (ignoredGrid === void 0)
        ignoredGrid = new GridIndex(transform.width + 2 * viewportPadding, transform.height + 2 * viewportPadding, 25);
    this.transform = transform;
    this.grid = grid;
    this.ignoredGrid = ignoredGrid;
    this.pitchfactor = Math.cos(transform._pitch) * transform.cameraToCenterDistance;
    this.screenRightBoundary = transform.width + viewportPadding;
    this.screenBottomBoundary = transform.height + viewportPadding;
    this.gridRightBoundary = transform.width + 2 * viewportPadding;
    this.gridBottomBoundary = transform.height + 2 * viewportPadding;
};
CollisionIndex.prototype.placeCollisionBox = function placeCollisionBox(collisionBox, allowOverlap, textPixelRatio, posMatrix, collisionGroupPredicate) {
    var projectedPoint = this.projectAndGetPerspectiveRatio(posMatrix, collisionBox.anchorPointX, collisionBox.anchorPointY);
    var tileToViewport = textPixelRatio * projectedPoint.perspectiveRatio;
    var tlX = collisionBox.x1 * tileToViewport + projectedPoint.point.x;
    var tlY = collisionBox.y1 * tileToViewport + projectedPoint.point.y;
    var brX = collisionBox.x2 * tileToViewport + projectedPoint.point.x;
    var brY = collisionBox.y2 * tileToViewport + projectedPoint.point.y;
    if (!this.isInsideGrid(tlX, tlY, brX, brY) || !allowOverlap && this.grid.hitTest(tlX, tlY, brX, brY, collisionGroupPredicate)) {
        return {
            box: [],
            offscreen: false
        };
    }
    return {
        box: [
            tlX,
            tlY,
            brX,
            brY
        ],
        offscreen: this.isOffscreen(tlX, tlY, brX, brY)
    };
};
CollisionIndex.prototype.approximateTileDistance = function approximateTileDistance(tileDistance, lastSegmentAngle, pixelsToTileUnits, cameraToAnchorDistance, pitchWithMap) {
    var incidenceStretch = pitchWithMap ? 1 : cameraToAnchorDistance / this.pitchfactor;
    var lastSegmentTile = tileDistance.lastSegmentViewportDistance * pixelsToTileUnits;
    return tileDistance.prevTileDistance + lastSegmentTile + (incidenceStretch - 1) * lastSegmentTile * Math.abs(Math.sin(lastSegmentAngle));
};
CollisionIndex.prototype.placeCollisionCircles = function placeCollisionCircles(collisionCircles, allowOverlap, scale, textPixelRatio, symbol, lineVertexArray, glyphOffsetArray, fontSize, posMatrix, labelPlaneMatrix, showCollisionCircles, pitchWithMap, collisionGroupPredicate) {
    var this$1 = this;
    var placedCollisionCircles = [];
    var projectedAnchor = this.projectAnchor(posMatrix, symbol.anchorX, symbol.anchorY);
    var projectionCache = {};
    var fontScale = fontSize / 24;
    var lineOffsetX = symbol.lineOffsetX * fontSize;
    var lineOffsetY = symbol.lineOffsetY * fontSize;
    var tileUnitAnchorPoint = new __chunk_1.Point(symbol.anchorX, symbol.anchorY);
    var labelPlaneAnchorPoint = project(tileUnitAnchorPoint, labelPlaneMatrix).point;
    var firstAndLastGlyph = placeFirstAndLastGlyph(fontScale, glyphOffsetArray, lineOffsetX, lineOffsetY, false, labelPlaneAnchorPoint, tileUnitAnchorPoint, symbol, lineVertexArray, labelPlaneMatrix, projectionCache, true);
    var collisionDetected = false;
    var inGrid = false;
    var entirelyOffscreen = true;
    var tileToViewport = projectedAnchor.perspectiveRatio * textPixelRatio;
    var pixelsToTileUnits = 1 / (textPixelRatio * scale);
    var firstTileDistance = 0, lastTileDistance = 0;
    if (firstAndLastGlyph) {
        firstTileDistance = this.approximateTileDistance(firstAndLastGlyph.first.tileDistance, firstAndLastGlyph.first.angle, pixelsToTileUnits, projectedAnchor.cameraDistance, pitchWithMap);
        lastTileDistance = this.approximateTileDistance(firstAndLastGlyph.last.tileDistance, firstAndLastGlyph.last.angle, pixelsToTileUnits, projectedAnchor.cameraDistance, pitchWithMap);
    }
    for (var k = 0; k < collisionCircles.length; k += 5) {
        var anchorPointX = collisionCircles[k];
        var anchorPointY = collisionCircles[k + 1];
        var tileUnitRadius = collisionCircles[k + 2];
        var boxSignedDistanceFromAnchor = collisionCircles[k + 3];
        if (!firstAndLastGlyph || boxSignedDistanceFromAnchor < -firstTileDistance || boxSignedDistanceFromAnchor > lastTileDistance) {
            markCollisionCircleUsed(collisionCircles, k, false);
            continue;
        }
        var projectedPoint = this$1.projectPoint(posMatrix, anchorPointX, anchorPointY);
        var radius = tileUnitRadius * tileToViewport;
        var atLeastOneCirclePlaced = placedCollisionCircles.length > 0;
        if (atLeastOneCirclePlaced) {
            var dx = projectedPoint.x - placedCollisionCircles[placedCollisionCircles.length - 4];
            var dy = projectedPoint.y - placedCollisionCircles[placedCollisionCircles.length - 3];
            var placedTooDensely = radius * radius * 2 > dx * dx + dy * dy;
            if (placedTooDensely) {
                var atLeastOneMoreCircle = k + 8 < collisionCircles.length;
                if (atLeastOneMoreCircle) {
                    var nextBoxDistanceToAnchor = collisionCircles[k + 8];
                    if (nextBoxDistanceToAnchor > -firstTileDistance && nextBoxDistanceToAnchor < lastTileDistance) {
                        markCollisionCircleUsed(collisionCircles, k, false);
                        continue;
                    }
                }
            }
        }
        var collisionBoxArrayIndex = k / 5;
        placedCollisionCircles.push(projectedPoint.x, projectedPoint.y, radius, collisionBoxArrayIndex);
        markCollisionCircleUsed(collisionCircles, k, true);
        var x1 = projectedPoint.x - radius;
        var y1 = projectedPoint.y - radius;
        var x2 = projectedPoint.x + radius;
        var y2 = projectedPoint.y + radius;
        entirelyOffscreen = entirelyOffscreen && this$1.isOffscreen(x1, y1, x2, y2);
        inGrid = inGrid || this$1.isInsideGrid(x1, y1, x2, y2);
        if (!allowOverlap) {
            if (this$1.grid.hitTestCircle(projectedPoint.x, projectedPoint.y, radius, collisionGroupPredicate)) {
                if (!showCollisionCircles) {
                    return {
                        circles: [],
                        offscreen: false
                    };
                } else {
                    collisionDetected = true;
                }
            }
        }
    }
    return {
        circles: collisionDetected || !inGrid ? [] : placedCollisionCircles,
        offscreen: entirelyOffscreen
    };
};
CollisionIndex.prototype.queryRenderedSymbols = function queryRenderedSymbols(viewportQueryGeometry) {
    if (viewportQueryGeometry.length === 0 || this.grid.keysLength() === 0 && this.ignoredGrid.keysLength() === 0) {
        return {};
    }
    var query = [];
    var minX = Infinity;
    var minY = Infinity;
    var maxX = -Infinity;
    var maxY = -Infinity;
    for (var i = 0, list = viewportQueryGeometry; i < list.length; i += 1) {
        var point = list[i];
        var gridPoint = new __chunk_1.Point(point.x + viewportPadding, point.y + viewportPadding);
        minX = Math.min(minX, gridPoint.x);
        minY = Math.min(minY, gridPoint.y);
        maxX = Math.max(maxX, gridPoint.x);
        maxY = Math.max(maxY, gridPoint.y);
        query.push(gridPoint);
    }
    var features = this.grid.query(minX, minY, maxX, maxY).concat(this.ignoredGrid.query(minX, minY, maxX, maxY));
    var seenFeatures = {};
    var result = {};
    for (var i$1 = 0, list$1 = features; i$1 < list$1.length; i$1 += 1) {
        var feature = list$1[i$1];
        var featureKey = feature.key;
        if (seenFeatures[featureKey.bucketInstanceId] === undefined) {
            seenFeatures[featureKey.bucketInstanceId] = {};
        }
        if (seenFeatures[featureKey.bucketInstanceId][featureKey.featureIndex]) {
            continue;
        }
        var bbox = [
            new __chunk_1.Point(feature.x1, feature.y1),
            new __chunk_1.Point(feature.x2, feature.y1),
            new __chunk_1.Point(feature.x2, feature.y2),
            new __chunk_1.Point(feature.x1, feature.y2)
        ];
        if (!__chunk_1.polygonIntersectsPolygon(query, bbox)) {
            continue;
        }
        seenFeatures[featureKey.bucketInstanceId][featureKey.featureIndex] = true;
        if (result[featureKey.bucketInstanceId] === undefined) {
            result[featureKey.bucketInstanceId] = [];
        }
        result[featureKey.bucketInstanceId].push(featureKey.featureIndex);
    }
    return result;
};
CollisionIndex.prototype.insertCollisionBox = function insertCollisionBox(collisionBox, ignorePlacement, bucketInstanceId, featureIndex, collisionGroupID) {
    var grid = ignorePlacement ? this.ignoredGrid : this.grid;
    var key = {
        bucketInstanceId: bucketInstanceId,
        featureIndex: featureIndex,
        collisionGroupID: collisionGroupID
    };
    grid.insert(key, collisionBox[0], collisionBox[1], collisionBox[2], collisionBox[3]);
};
CollisionIndex.prototype.insertCollisionCircles = function insertCollisionCircles(collisionCircles, ignorePlacement, bucketInstanceId, featureIndex, collisionGroupID) {
    var grid = ignorePlacement ? this.ignoredGrid : this.grid;
    var key = {
        bucketInstanceId: bucketInstanceId,
        featureIndex: featureIndex,
        collisionGroupID: collisionGroupID
    };
    for (var k = 0; k < collisionCircles.length; k += 4) {
        grid.insertCircle(key, collisionCircles[k], collisionCircles[k + 1], collisionCircles[k + 2]);
    }
};
CollisionIndex.prototype.projectAnchor = function projectAnchor(posMatrix, x, y) {
    var p = [
        x,
        y,
        0,
        1
    ];
    xyTransformMat4(p, p, posMatrix);
    return {
        perspectiveRatio: 0.5 + 0.5 * (this.transform.cameraToCenterDistance / p[3]),
        cameraDistance: p[3]
    };
};
CollisionIndex.prototype.projectPoint = function projectPoint(posMatrix, x, y) {
    var p = [
        x,
        y,
        0,
        1
    ];
    xyTransformMat4(p, p, posMatrix);
    return new __chunk_1.Point((p[0] / p[3] + 1) / 2 * this.transform.width + viewportPadding, (-p[1] / p[3] + 1) / 2 * this.transform.height + viewportPadding);
};
CollisionIndex.prototype.projectAndGetPerspectiveRatio = function projectAndGetPerspectiveRatio(posMatrix, x, y) {
    var p = [
        x,
        y,
        0,
        1
    ];
    xyTransformMat4(p, p, posMatrix);
    var a = new __chunk_1.Point((p[0] / p[3] + 1) / 2 * this.transform.width + viewportPadding, (-p[1] / p[3] + 1) / 2 * this.transform.height + viewportPadding);
    return {
        point: a,
        perspectiveRatio: 0.5 + 0.5 * (this.transform.cameraToCenterDistance / p[3])
    };
};
CollisionIndex.prototype.isOffscreen = function isOffscreen(x1, y1, x2, y2) {
    return x2 < viewportPadding || x1 >= this.screenRightBoundary || y2 < viewportPadding || y1 > this.screenBottomBoundary;
};
CollisionIndex.prototype.isInsideGrid = function isInsideGrid(x1, y1, x2, y2) {
    return x2 >= 0 && x1 < this.gridRightBoundary && y2 >= 0 && y1 < this.gridBottomBoundary;
};
function markCollisionCircleUsed(collisionCircles, index, used) {
    collisionCircles[index + 4] = used ? 1 : 0;
}

function pixelsToTileUnits (tile, pixelValue, z) {
    return pixelValue * (__chunk_1.EXTENT / (tile.tileSize * Math.pow(2, z - tile.tileID.overscaledZ)));
}

var OpacityState = function OpacityState(prevState, increment, placed, skipFade) {
    if (prevState) {
        this.opacity = Math.max(0, Math.min(1, prevState.opacity + (prevState.placed ? increment : -increment)));
    } else {
        this.opacity = skipFade && placed ? 1 : 0;
    }
    this.placed = placed;
};
OpacityState.prototype.isHidden = function isHidden() {
    return this.opacity === 0 && !this.placed;
};
var JointOpacityState = function JointOpacityState(prevState, increment, placedText, placedIcon, skipFade) {
    this.text = new OpacityState(prevState ? prevState.text : null, increment, placedText, skipFade);
    this.icon = new OpacityState(prevState ? prevState.icon : null, increment, placedIcon, skipFade);
};
JointOpacityState.prototype.isHidden = function isHidden() {
    return this.text.isHidden() && this.icon.isHidden();
};
var JointPlacement = function JointPlacement(text, icon, skipFade) {
    this.text = text;
    this.icon = icon;
    this.skipFade = skipFade;
};
var RetainedQueryData = function RetainedQueryData(bucketInstanceId, featureIndex, sourceLayerIndex, bucketIndex, tileID) {
    this.bucketInstanceId = bucketInstanceId;
    this.featureIndex = featureIndex;
    this.sourceLayerIndex = sourceLayerIndex;
    this.bucketIndex = bucketIndex;
    this.tileID = tileID;
};
var CollisionGroups = function CollisionGroups(crossSourceCollisions) {
    this.crossSourceCollisions = crossSourceCollisions;
    this.maxGroupID = 0;
    this.collisionGroups = {};
};
CollisionGroups.prototype.get = function get(sourceID) {
    if (!this.crossSourceCollisions) {
        if (!this.collisionGroups[sourceID]) {
            var nextGroupID = ++this.maxGroupID;
            this.collisionGroups[sourceID] = {
                ID: nextGroupID,
                predicate: function (key) {
                    return key.collisionGroupID === nextGroupID;
                }
            };
        }
        return this.collisionGroups[sourceID];
    } else {
        return {
            ID: 0,
            predicate: null
        };
    }
};
var Placement = function Placement(transform, fadeDuration, crossSourceCollisions) {
    this.transform = transform.clone();
    this.collisionIndex = new CollisionIndex(this.transform);
    this.placements = {};
    this.opacities = {};
    this.stale = false;
    this.fadeDuration = fadeDuration;
    this.retainedQueryData = {};
    this.collisionGroups = new CollisionGroups(crossSourceCollisions);
};
Placement.prototype.placeLayerTile = function placeLayerTile(styleLayer, tile, showCollisionBoxes, seenCrossTileIDs) {
    var symbolBucket = tile.getBucket(styleLayer);
    var bucketFeatureIndex = tile.latestFeatureIndex;
    if (!symbolBucket || !bucketFeatureIndex || styleLayer.id !== symbolBucket.layerIds[0]) {
        return;
    }
    var collisionBoxArray = tile.collisionBoxArray;
    var layout = symbolBucket.layers[0].layout;
    var scale = Math.pow(2, this.transform.zoom - tile.tileID.overscaledZ);
    var textPixelRatio = tile.tileSize / __chunk_1.EXTENT;
    var posMatrix = this.transform.calculatePosMatrix(tile.tileID.toUnwrapped());
    var textLabelPlaneMatrix = getLabelPlaneMatrix(posMatrix, layout.get('text-pitch-alignment') === 'map', layout.get('text-rotation-alignment') === 'map', this.transform, pixelsToTileUnits(tile, 1, this.transform.zoom));
    var iconLabelPlaneMatrix = getLabelPlaneMatrix(posMatrix, layout.get('icon-pitch-alignment') === 'map', layout.get('icon-rotation-alignment') === 'map', this.transform, pixelsToTileUnits(tile, 1, this.transform.zoom));
    this.retainedQueryData[symbolBucket.bucketInstanceId] = new RetainedQueryData(symbolBucket.bucketInstanceId, bucketFeatureIndex, symbolBucket.sourceLayerIndex, symbolBucket.index, tile.tileID);
    this.placeLayerBucket(symbolBucket, posMatrix, textLabelPlaneMatrix, iconLabelPlaneMatrix, scale, textPixelRatio, showCollisionBoxes, tile.holdingForFade(), seenCrossTileIDs, collisionBoxArray);
};
Placement.prototype.placeLayerBucket = function placeLayerBucket(bucket, posMatrix, textLabelPlaneMatrix, iconLabelPlaneMatrix, scale, textPixelRatio, showCollisionBoxes, holdingForFade, seenCrossTileIDs, collisionBoxArray) {
    var this$1 = this;
    var layout = bucket.layers[0].layout;
    var partiallyEvaluatedTextSize = __chunk_1.evaluateSizeForZoom(bucket.textSizeData, this.transform.zoom, __chunk_1.properties.layout.properties['text-size']);
    var textOptional = layout.get('text-optional');
    var iconOptional = layout.get('icon-optional');
    var textAllowOverlap = layout.get('text-allow-overlap');
    var iconAllowOverlap = layout.get('icon-allow-overlap');
    var alwaysShowText = textAllowOverlap && (iconAllowOverlap || !bucket.hasIconData() || iconOptional);
    var alwaysShowIcon = iconAllowOverlap && (textAllowOverlap || !bucket.hasTextData() || textOptional);
    var collisionGroup = this.collisionGroups.get(bucket.sourceID);
    if (!bucket.collisionArrays && collisionBoxArray) {
        bucket.deserializeCollisionBoxes(collisionBoxArray);
    }
    for (var i = 0; i < bucket.symbolInstances.length; i++) {
        var symbolInstance = bucket.symbolInstances.get(i);
        if (!seenCrossTileIDs[symbolInstance.crossTileID]) {
            if (holdingForFade) {
                this$1.placements[symbolInstance.crossTileID] = new JointPlacement(false, false, false);
                continue;
            }
            var placeText = false;
            var placeIcon = false;
            var offscreen = true;
            var placedGlyphBoxes = null;
            var placedGlyphCircles = null;
            var placedIconBoxes = null;
            var textFeatureIndex = 0;
            var iconFeatureIndex = 0;
            var collisionArrays = bucket.collisionArrays[i];
            if (collisionArrays.textFeatureIndex) {
                textFeatureIndex = collisionArrays.textFeatureIndex;
            }
            if (collisionArrays.textBox) {
                placedGlyphBoxes = this$1.collisionIndex.placeCollisionBox(collisionArrays.textBox, layout.get('text-allow-overlap'), textPixelRatio, posMatrix, collisionGroup.predicate);
                placeText = placedGlyphBoxes.box.length > 0;
                offscreen = offscreen && placedGlyphBoxes.offscreen;
            }
            var textCircles = collisionArrays.textCircles;
            if (textCircles) {
                var placedSymbol = bucket.text.placedSymbolArray.get(symbolInstance.horizontalPlacedTextSymbolIndex);
                var fontSize = __chunk_1.evaluateSizeForFeature(bucket.textSizeData, partiallyEvaluatedTextSize, placedSymbol);
                placedGlyphCircles = this$1.collisionIndex.placeCollisionCircles(textCircles, layout.get('text-allow-overlap'), scale, textPixelRatio, placedSymbol, bucket.lineVertexArray, bucket.glyphOffsetArray, fontSize, posMatrix, textLabelPlaneMatrix, showCollisionBoxes, layout.get('text-pitch-alignment') === 'map', collisionGroup.predicate);
                placeText = layout.get('text-allow-overlap') || placedGlyphCircles.circles.length > 0;
                offscreen = offscreen && placedGlyphCircles.offscreen;
            }
            if (collisionArrays.iconFeatureIndex) {
                iconFeatureIndex = collisionArrays.iconFeatureIndex;
            }
            if (collisionArrays.iconBox) {
                placedIconBoxes = this$1.collisionIndex.placeCollisionBox(collisionArrays.iconBox, layout.get('icon-allow-overlap'), textPixelRatio, posMatrix, collisionGroup.predicate);
                placeIcon = placedIconBoxes.box.length > 0;
                offscreen = offscreen && placedIconBoxes.offscreen;
            }
            var iconWithoutText = textOptional || symbolInstance.numGlyphVertices === 0 && symbolInstance.numVerticalGlyphVertices === 0;
            var textWithoutIcon = iconOptional || symbolInstance.numIconVertices === 0;
            if (!iconWithoutText && !textWithoutIcon) {
                placeIcon = placeText = placeIcon && placeText;
            } else if (!textWithoutIcon) {
                placeText = placeIcon && placeText;
            } else if (!iconWithoutText) {
                placeIcon = placeIcon && placeText;
            }
            if (placeText && placedGlyphBoxes) {
                this$1.collisionIndex.insertCollisionBox(placedGlyphBoxes.box, layout.get('text-ignore-placement'), bucket.bucketInstanceId, textFeatureIndex, collisionGroup.ID);
            }
            if (placeIcon && placedIconBoxes) {
                this$1.collisionIndex.insertCollisionBox(placedIconBoxes.box, layout.get('icon-ignore-placement'), bucket.bucketInstanceId, iconFeatureIndex, collisionGroup.ID);
            }
            if (placeText && placedGlyphCircles) {
                this$1.collisionIndex.insertCollisionCircles(placedGlyphCircles.circles, layout.get('text-ignore-placement'), bucket.bucketInstanceId, textFeatureIndex, collisionGroup.ID);
            }
            this$1.placements[symbolInstance.crossTileID] = new JointPlacement(placeText || alwaysShowText, placeIcon || alwaysShowIcon, offscreen || bucket.justReloaded);
            seenCrossTileIDs[symbolInstance.crossTileID] = true;
        }
    }
    bucket.justReloaded = false;
};
Placement.prototype.commit = function commit(prevPlacement, now) {
    var this$1 = this;
    this.commitTime = now;
    var placementChanged = false;
    var increment = prevPlacement && this.fadeDuration !== 0 ? (this.commitTime - prevPlacement.commitTime) / this.fadeDuration : 1;
    var prevOpacities = prevPlacement ? prevPlacement.opacities : {};
    for (var crossTileID in this$1.placements) {
        var jointPlacement = this$1.placements[crossTileID];
        var prevOpacity = prevOpacities[crossTileID];
        if (prevOpacity) {
            this$1.opacities[crossTileID] = new JointOpacityState(prevOpacity, increment, jointPlacement.text, jointPlacement.icon);
            placementChanged = placementChanged || jointPlacement.text !== prevOpacity.text.placed || jointPlacement.icon !== prevOpacity.icon.placed;
        } else {
            this$1.opacities[crossTileID] = new JointOpacityState(null, increment, jointPlacement.text, jointPlacement.icon, jointPlacement.skipFade);
            placementChanged = placementChanged || jointPlacement.text || jointPlacement.icon;
        }
    }
    for (var crossTileID$1 in prevOpacities) {
        var prevOpacity$1 = prevOpacities[crossTileID$1];
        if (!this$1.opacities[crossTileID$1]) {
            var jointOpacity = new JointOpacityState(prevOpacity$1, increment, false, false);
            if (!jointOpacity.isHidden()) {
                this$1.opacities[crossTileID$1] = jointOpacity;
                placementChanged = placementChanged || prevOpacity$1.text.placed || prevOpacity$1.icon.placed;
            }
        }
    }
    if (placementChanged) {
        this.lastPlacementChangeTime = now;
    } else if (typeof this.lastPlacementChangeTime !== 'number') {
        this.lastPlacementChangeTime = prevPlacement ? prevPlacement.lastPlacementChangeTime : now;
    }
};
Placement.prototype.updateLayerOpacities = function updateLayerOpacities(styleLayer, tiles) {
    var this$1 = this;
    var seenCrossTileIDs = {};
    for (var i = 0, list = tiles; i < list.length; i += 1) {
        var tile = list[i];
        var symbolBucket = tile.getBucket(styleLayer);
        if (symbolBucket && tile.latestFeatureIndex && styleLayer.id === symbolBucket.layerIds[0]) {
            this$1.updateBucketOpacities(symbolBucket, seenCrossTileIDs, tile.collisionBoxArray);
        }
    }
};
Placement.prototype.updateBucketOpacities = function updateBucketOpacities(bucket, seenCrossTileIDs, collisionBoxArray) {
    var this$1 = this;
    if (bucket.hasTextData()) {
        bucket.text.opacityVertexArray.clear();
    }
    if (bucket.hasIconData()) {
        bucket.icon.opacityVertexArray.clear();
    }
    if (bucket.hasCollisionBoxData()) {
        bucket.collisionBox.collisionVertexArray.clear();
    }
    if (bucket.hasCollisionCircleData()) {
        bucket.collisionCircle.collisionVertexArray.clear();
    }
    var layout = bucket.layers[0].layout;
    var duplicateOpacityState = new JointOpacityState(null, 0, false, false, true);
    var textAllowOverlap = layout.get('text-allow-overlap');
    var iconAllowOverlap = layout.get('icon-allow-overlap');
    var defaultOpacityState = new JointOpacityState(null, 0, textAllowOverlap && (iconAllowOverlap || !bucket.hasIconData() || layout.get('icon-optional')), iconAllowOverlap && (textAllowOverlap || !bucket.hasTextData() || layout.get('text-optional')), true);
    if (!bucket.collisionArrays && collisionBoxArray && (bucket.hasCollisionBoxData() || bucket.hasCollisionCircleData())) {
        bucket.deserializeCollisionBoxes(collisionBoxArray);
    }
    for (var s = 0; s < bucket.symbolInstances.length; s++) {
        var symbolInstance = bucket.symbolInstances.get(s);
        var isDuplicate = seenCrossTileIDs[symbolInstance.crossTileID];
        var opacityState = this$1.opacities[symbolInstance.crossTileID];
        if (isDuplicate) {
            opacityState = duplicateOpacityState;
        } else if (!opacityState) {
            opacityState = defaultOpacityState;
            this$1.opacities[symbolInstance.crossTileID] = opacityState;
        }
        seenCrossTileIDs[symbolInstance.crossTileID] = true;
        var hasText = symbolInstance.numGlyphVertices > 0 || symbolInstance.numVerticalGlyphVertices > 0;
        var hasIcon = symbolInstance.numIconVertices > 0;
        if (hasText) {
            var packedOpacity = packOpacity(opacityState.text);
            var opacityEntryCount = (symbolInstance.numGlyphVertices + symbolInstance.numVerticalGlyphVertices) / 4;
            for (var i = 0; i < opacityEntryCount; i++) {
                bucket.text.opacityVertexArray.emplaceBack(packedOpacity);
            }
            bucket.text.placedSymbolArray.get(symbolInstance.horizontalPlacedTextSymbolIndex).hidden = opacityState.text.isHidden();
            if (symbolInstance.verticalPlacedTextSymbolIndex >= 0) {
                bucket.text.placedSymbolArray.get(symbolInstance.verticalPlacedTextSymbolIndex).hidden = opacityState.text.isHidden();
            }
        }
        if (hasIcon) {
            var packedOpacity$1 = packOpacity(opacityState.icon);
            for (var i$1 = 0; i$1 < symbolInstance.numIconVertices / 4; i$1++) {
                bucket.icon.opacityVertexArray.emplaceBack(packedOpacity$1);
            }
            bucket.icon.placedSymbolArray.get(s).hidden = opacityState.icon.isHidden();
        }
        if (bucket.hasCollisionBoxData() || bucket.hasCollisionCircleData()) {
            var collisionArrays = bucket.collisionArrays[s];
            if (collisionArrays) {
                if (collisionArrays.textBox) {
                    updateCollisionVertices(bucket.collisionBox.collisionVertexArray, opacityState.text.placed, false);
                }
                if (collisionArrays.iconBox) {
                    updateCollisionVertices(bucket.collisionBox.collisionVertexArray, opacityState.icon.placed, false);
                }
                var textCircles = collisionArrays.textCircles;
                if (textCircles && bucket.hasCollisionCircleData()) {
                    for (var k = 0; k < textCircles.length; k += 5) {
                        var notUsed = isDuplicate || textCircles[k + 4] === 0;
                        updateCollisionVertices(bucket.collisionCircle.collisionVertexArray, opacityState.text.placed, notUsed);
                    }
                }
            }
        }
    }
    bucket.sortFeatures(this.transform.angle);
    if (this.retainedQueryData[bucket.bucketInstanceId]) {
        this.retainedQueryData[bucket.bucketInstanceId].featureSortOrder = bucket.featureSortOrder;
    }
    if (bucket.hasTextData() && bucket.text.opacityVertexBuffer) {
        bucket.text.opacityVertexBuffer.updateData(bucket.text.opacityVertexArray);
    }
    if (bucket.hasIconData() && bucket.icon.opacityVertexBuffer) {
        bucket.icon.opacityVertexBuffer.updateData(bucket.icon.opacityVertexArray);
    }
    if (bucket.hasCollisionBoxData() && bucket.collisionBox.collisionVertexBuffer) {
        bucket.collisionBox.collisionVertexBuffer.updateData(bucket.collisionBox.collisionVertexArray);
    }
    if (bucket.hasCollisionCircleData() && bucket.collisionCircle.collisionVertexBuffer) {
        bucket.collisionCircle.collisionVertexBuffer.updateData(bucket.collisionCircle.collisionVertexArray);
    }
};
Placement.prototype.symbolFadeChange = function symbolFadeChange(now) {
    return this.fadeDuration === 0 ? 1 : (now - this.commitTime) / this.fadeDuration;
};
Placement.prototype.hasTransitions = function hasTransitions(now) {
    return this.stale || now - this.lastPlacementChangeTime < this.fadeDuration;
};
Placement.prototype.stillRecent = function stillRecent(now) {
    return this.commitTime !== 'undefined' && this.commitTime + this.fadeDuration > now;
};
Placement.prototype.setStale = function setStale() {
    this.stale = true;
};
function updateCollisionVertices(collisionVertexArray, placed, notUsed) {
    collisionVertexArray.emplaceBack(placed ? 1 : 0, notUsed ? 1 : 0);
    collisionVertexArray.emplaceBack(placed ? 1 : 0, notUsed ? 1 : 0);
    collisionVertexArray.emplaceBack(placed ? 1 : 0, notUsed ? 1 : 0);
    collisionVertexArray.emplaceBack(placed ? 1 : 0, notUsed ? 1 : 0);
}
var shift25 = Math.pow(2, 25);
var shift24 = Math.pow(2, 24);
var shift17 = Math.pow(2, 17);
var shift16 = Math.pow(2, 16);
var shift9 = Math.pow(2, 9);
var shift8 = Math.pow(2, 8);
var shift1 = Math.pow(2, 1);
function packOpacity(opacityState) {
    if (opacityState.opacity === 0 && !opacityState.placed) {
        return 0;
    } else if (opacityState.opacity === 1 && opacityState.placed) {
        return 4294967295;
    }
    var targetBit = opacityState.placed ? 1 : 0;
    var opacityBits = Math.floor(opacityState.opacity * 127);
    return opacityBits * shift25 + targetBit * shift24 + opacityBits * shift17 + targetBit * shift16 + opacityBits * shift9 + targetBit * shift8 + opacityBits * shift1 + targetBit;
}

var LayerPlacement = function LayerPlacement() {
    this._currentTileIndex = 0;
    this._seenCrossTileIDs = {};
};
LayerPlacement.prototype.continuePlacement = function continuePlacement(tiles, placement, showCollisionBoxes, styleLayer, shouldPausePlacement) {
    var this$1 = this;
    while (this._currentTileIndex < tiles.length) {
        var tile = tiles[this$1._currentTileIndex];
        placement.placeLayerTile(styleLayer, tile, showCollisionBoxes, this$1._seenCrossTileIDs);
        this$1._currentTileIndex++;
        if (shouldPausePlacement()) {
            return true;
        }
    }
};
var PauseablePlacement = function PauseablePlacement(transform, order, forceFullPlacement, showCollisionBoxes, fadeDuration, crossSourceCollisions) {
    this.placement = new Placement(transform, fadeDuration, crossSourceCollisions);
    this._currentPlacementIndex = order.length - 1;
    this._forceFullPlacement = forceFullPlacement;
    this._showCollisionBoxes = showCollisionBoxes;
    this._done = false;
};
PauseablePlacement.prototype.isDone = function isDone() {
    return this._done;
};
PauseablePlacement.prototype.continuePlacement = function continuePlacement(order, layers, layerTiles) {
    var this$1 = this;
    var startTime = __chunk_1.browser.now();
    var shouldPausePlacement = function () {
        var elapsedTime = __chunk_1.browser.now() - startTime;
        return this$1._forceFullPlacement ? false : elapsedTime > 2;
    };
    while (this._currentPlacementIndex >= 0) {
        var layerId = order[this$1._currentPlacementIndex];
        var layer = layers[layerId];
        var placementZoom = this$1.placement.collisionIndex.transform.zoom;
        if (layer.type === 'symbol' && (!layer.minzoom || layer.minzoom <= placementZoom) && (!layer.maxzoom || layer.maxzoom > placementZoom)) {
            if (!this$1._inProgressLayer) {
                this$1._inProgressLayer = new LayerPlacement();
            }
            var pausePlacement = this$1._inProgressLayer.continuePlacement(layerTiles[layer.source], this$1.placement, this$1._showCollisionBoxes, layer, shouldPausePlacement);
            if (pausePlacement) {
                return;
            }
            delete this$1._inProgressLayer;
        }
        this$1._currentPlacementIndex--;
    }
    this._done = true;
};
PauseablePlacement.prototype.commit = function commit(previousPlacement, now) {
    this.placement.commit(previousPlacement, now);
    return this.placement;
};

var roundingFactor = 512 / __chunk_1.EXTENT / 2;
var TileLayerIndex = function TileLayerIndex(tileID, symbolInstances, bucketInstanceId) {
    var this$1 = this;
    this.tileID = tileID;
    this.indexedSymbolInstances = {};
    this.bucketInstanceId = bucketInstanceId;
    for (var i = 0; i < symbolInstances.length; i++) {
        var symbolInstance = symbolInstances.get(i);
        var key = symbolInstance.key;
        if (!this$1.indexedSymbolInstances[key]) {
            this$1.indexedSymbolInstances[key] = [];
        }
        this$1.indexedSymbolInstances[key].push({
            crossTileID: symbolInstance.crossTileID,
            coord: this$1.getScaledCoordinates(symbolInstance, tileID)
        });
    }
};
TileLayerIndex.prototype.getScaledCoordinates = function getScaledCoordinates(symbolInstance, childTileID) {
    var zDifference = childTileID.canonical.z - this.tileID.canonical.z;
    var scale = roundingFactor / Math.pow(2, zDifference);
    return {
        x: Math.floor((childTileID.canonical.x * __chunk_1.EXTENT + symbolInstance.anchorX) * scale),
        y: Math.floor((childTileID.canonical.y * __chunk_1.EXTENT + symbolInstance.anchorY) * scale)
    };
};
TileLayerIndex.prototype.findMatches = function findMatches(symbolInstances, newTileID, zoomCrossTileIDs) {
    var this$1 = this;
    var tolerance = this.tileID.canonical.z < newTileID.canonical.z ? 1 : Math.pow(2, this.tileID.canonical.z - newTileID.canonical.z);
    for (var i = 0; i < symbolInstances.length; i++) {
        var symbolInstance = symbolInstances.get(i);
        if (symbolInstance.crossTileID) {
            continue;
        }
        var indexedInstances = this$1.indexedSymbolInstances[symbolInstance.key];
        if (!indexedInstances) {
            continue;
        }
        var scaledSymbolCoord = this$1.getScaledCoordinates(symbolInstance, newTileID);
        for (var i$1 = 0, list = indexedInstances; i$1 < list.length; i$1 += 1) {
            var thisTileSymbol = list[i$1];
            if (Math.abs(thisTileSymbol.coord.x - scaledSymbolCoord.x) <= tolerance && Math.abs(thisTileSymbol.coord.y - scaledSymbolCoord.y) <= tolerance && !zoomCrossTileIDs[thisTileSymbol.crossTileID]) {
                zoomCrossTileIDs[thisTileSymbol.crossTileID] = true;
                symbolInstance.crossTileID = thisTileSymbol.crossTileID;
                break;
            }
        }
    }
};
var CrossTileIDs = function CrossTileIDs() {
    this.maxCrossTileID = 0;
};
CrossTileIDs.prototype.generate = function generate() {
    return ++this.maxCrossTileID;
};
var CrossTileSymbolLayerIndex = function CrossTileSymbolLayerIndex() {
    this.indexes = {};
    this.usedCrossTileIDs = {};
    this.lng = 0;
};
CrossTileSymbolLayerIndex.prototype.handleWrapJump = function handleWrapJump(lng) {
    var this$1 = this;
    var wrapDelta = Math.round((lng - this.lng) / 360);
    if (wrapDelta !== 0) {
        for (var zoom in this$1.indexes) {
            var zoomIndexes = this$1.indexes[zoom];
            var newZoomIndex = {};
            for (var key in zoomIndexes) {
                var index = zoomIndexes[key];
                index.tileID = index.tileID.unwrapTo(index.tileID.wrap + wrapDelta);
                newZoomIndex[index.tileID.key] = index;
            }
            this$1.indexes[zoom] = newZoomIndex;
        }
    }
    this.lng = lng;
};
CrossTileSymbolLayerIndex.prototype.addBucket = function addBucket(tileID, bucket, crossTileIDs) {
    var this$1 = this;
    if (this.indexes[tileID.overscaledZ] && this.indexes[tileID.overscaledZ][tileID.key]) {
        if (this.indexes[tileID.overscaledZ][tileID.key].bucketInstanceId === bucket.bucketInstanceId) {
            return false;
        } else {
            this.removeBucketCrossTileIDs(tileID.overscaledZ, this.indexes[tileID.overscaledZ][tileID.key]);
        }
    }
    for (var i = 0; i < bucket.symbolInstances.length; i++) {
        var symbolInstance = bucket.symbolInstances.get(i);
        symbolInstance.crossTileID = 0;
    }
    if (!this.usedCrossTileIDs[tileID.overscaledZ]) {
        this.usedCrossTileIDs[tileID.overscaledZ] = {};
    }
    var zoomCrossTileIDs = this.usedCrossTileIDs[tileID.overscaledZ];
    for (var zoom in this$1.indexes) {
        var zoomIndexes = this$1.indexes[zoom];
        if (Number(zoom) > tileID.overscaledZ) {
            for (var id in zoomIndexes) {
                var childIndex = zoomIndexes[id];
                if (childIndex.tileID.isChildOf(tileID)) {
                    childIndex.findMatches(bucket.symbolInstances, tileID, zoomCrossTileIDs);
                }
            }
        } else {
            var parentCoord = tileID.scaledTo(Number(zoom));
            var parentIndex = zoomIndexes[parentCoord.key];
            if (parentIndex) {
                parentIndex.findMatches(bucket.symbolInstances, tileID, zoomCrossTileIDs);
            }
        }
    }
    for (var i$1 = 0; i$1 < bucket.symbolInstances.length; i$1++) {
        var symbolInstance$1 = bucket.symbolInstances.get(i$1);
        if (!symbolInstance$1.crossTileID) {
            symbolInstance$1.crossTileID = crossTileIDs.generate();
            zoomCrossTileIDs[symbolInstance$1.crossTileID] = true;
        }
    }
    if (this.indexes[tileID.overscaledZ] === undefined) {
        this.indexes[tileID.overscaledZ] = {};
    }
    this.indexes[tileID.overscaledZ][tileID.key] = new TileLayerIndex(tileID, bucket.symbolInstances, bucket.bucketInstanceId);
    return true;
};
CrossTileSymbolLayerIndex.prototype.removeBucketCrossTileIDs = function removeBucketCrossTileIDs(zoom, removedBucket) {
    var this$1 = this;
    for (var key in removedBucket.indexedSymbolInstances) {
        for (var i = 0, list = removedBucket.indexedSymbolInstances[key]; i < list.length; i += 1) {
            var symbolInstance = list[i];
            delete this$1.usedCrossTileIDs[zoom][symbolInstance.crossTileID];
        }
    }
};
CrossTileSymbolLayerIndex.prototype.removeStaleBuckets = function removeStaleBuckets(currentIDs) {
    var this$1 = this;
    var tilesChanged = false;
    for (var z in this$1.indexes) {
        var zoomIndexes = this$1.indexes[z];
        for (var tileKey in zoomIndexes) {
            if (!currentIDs[zoomIndexes[tileKey].bucketInstanceId]) {
                this$1.removeBucketCrossTileIDs(z, zoomIndexes[tileKey]);
                delete zoomIndexes[tileKey];
                tilesChanged = true;
            }
        }
    }
    return tilesChanged;
};
var CrossTileSymbolIndex = function CrossTileSymbolIndex() {
    this.layerIndexes = {};
    this.crossTileIDs = new CrossTileIDs();
    this.maxBucketInstanceId = 0;
    this.bucketsInCurrentPlacement = {};
};
CrossTileSymbolIndex.prototype.addLayer = function addLayer(styleLayer, tiles, lng) {
    var this$1 = this;
    var layerIndex = this.layerIndexes[styleLayer.id];
    if (layerIndex === undefined) {
        layerIndex = this.layerIndexes[styleLayer.id] = new CrossTileSymbolLayerIndex();
    }
    var symbolBucketsChanged = false;
    var currentBucketIDs = {};
    layerIndex.handleWrapJump(lng);
    for (var i = 0, list = tiles; i < list.length; i += 1) {
        var tile = list[i];
        var symbolBucket = tile.getBucket(styleLayer);
        if (!symbolBucket || styleLayer.id !== symbolBucket.layerIds[0]) {
            continue;
        }
        if (!symbolBucket.bucketInstanceId) {
            symbolBucket.bucketInstanceId = ++this$1.maxBucketInstanceId;
        }
        if (layerIndex.addBucket(tile.tileID, symbolBucket, this$1.crossTileIDs)) {
            symbolBucketsChanged = true;
        }
        currentBucketIDs[symbolBucket.bucketInstanceId] = true;
    }
    if (layerIndex.removeStaleBuckets(currentBucketIDs)) {
        symbolBucketsChanged = true;
    }
    return symbolBucketsChanged;
};
CrossTileSymbolIndex.prototype.pruneUnusedLayers = function pruneUnusedLayers(usedLayers) {
    var this$1 = this;
    var usedLayerMap = {};
    usedLayers.forEach(function (usedLayer) {
        usedLayerMap[usedLayer] = true;
    });
    for (var layerId in this$1.layerIndexes) {
        if (!usedLayerMap[layerId]) {
            delete this$1.layerIndexes[layerId];
        }
    }
};

var emitValidationErrors = function (evented, errors) {
    return __chunk_1.emitValidationErrors(evented, errors && errors.filter(function (error) {
        return error.identifier !== 'source.canvas';
    }));
};
var supportedDiffOperations = __chunk_1.pick(operations, [
    'addLayer',
    'removeLayer',
    'setPaintProperty',
    'setLayoutProperty',
    'setFilter',
    'addSource',
    'removeSource',
    'setLayerZoomRange',
    'setLight',
    'setTransition',
    'setGeoJSONSourceData'
]);
var ignoredDiffOperations = __chunk_1.pick(operations, [
    'setCenter',
    'setZoom',
    'setBearing',
    'setPitch'
]);
var Style = function (Evented) {
    function Style(map, options) {
        var this$1 = this;
        if (options === void 0)
            options = {};
        Evented.call(this);
        this.map = map;
        this.dispatcher = new Dispatcher(getGlobalWorkerPool(), this);
        this.imageManager = new ImageManager();
        this.glyphManager = new GlyphManager(map._transformRequest, options.localIdeographFontFamily);
        this.lineAtlas = new LineAtlas(256, 512);
        this.crossTileSymbolIndex = new CrossTileSymbolIndex();
        this._layers = {};
        this._order = [];
        this.sourceCaches = {};
        this.zoomHistory = new __chunk_1.ZoomHistory();
        this._loaded = false;
        this._resetUpdates();
        this.dispatcher.broadcast('setReferrer', __chunk_1.getReferrer());
        var self = this;
        this._rtlTextPluginCallback = Style.registerForPluginAvailability(function (args) {
            self.dispatcher.broadcast('loadRTLTextPlugin', args.pluginURL, args.completionCallback);
            for (var id in self.sourceCaches) {
                self.sourceCaches[id].reload();
            }
        });
        this.on('data', function (event) {
            if (event.dataType !== 'source' || event.sourceDataType !== 'metadata') {
                return;
            }
            var sourceCache = this$1.sourceCaches[event.sourceId];
            if (!sourceCache) {
                return;
            }
            var source = sourceCache.getSource();
            if (!source || !source.vectorLayerIds) {
                return;
            }
            for (var layerId in this$1._layers) {
                var layer = this$1._layers[layerId];
                if (layer.source === source.id) {
                    this$1._validateLayer(layer);
                }
            }
        });
    }
    if (Evented)
        Style.__proto__ = Evented;
    Style.prototype = Object.create(Evented && Evented.prototype);
    Style.prototype.constructor = Style;
    Style.prototype.loadURL = function loadURL(url, options) {
        var this$1 = this;
        if (options === void 0)
            options = {};
        this.fire(new __chunk_1.Event('dataloading', { dataType: 'style' }));
        var validate = typeof options.validate === 'boolean' ? options.validate : !__chunk_1.isMapboxURL(url);
        url = __chunk_1.normalizeStyleURL(url, options.accessToken);
        var request = this.map._transformRequest(url, __chunk_1.ResourceType.Style);
        this._request = __chunk_1.getJSON(request, function (error, json) {
            this$1._request = null;
            if (error) {
                this$1.fire(new __chunk_1.ErrorEvent(error));
            } else if (json) {
                this$1._load(json, validate);
            }
        });
    };
    Style.prototype.loadJSON = function loadJSON(json, options) {
        var this$1 = this;
        if (options === void 0)
            options = {};
        this.fire(new __chunk_1.Event('dataloading', { dataType: 'style' }));
        this._request = __chunk_1.browser.frame(function () {
            this$1._request = null;
            this$1._load(json, options.validate !== false);
        });
    };
    Style.prototype._load = function _load(json, validate) {
        var this$1 = this;
        if (validate && emitValidationErrors(this, __chunk_1.validateStyle(json))) {
            return;
        }
        this._loaded = true;
        this.stylesheet = json;
        for (var id in json.sources) {
            this$1.addSource(id, json.sources[id], { validate: false });
        }
        if (json.sprite) {
            this._spriteRequest = loadSprite(json.sprite, this.map._transformRequest, function (err, images) {
                this$1._spriteRequest = null;
                if (err) {
                    this$1.fire(new __chunk_1.ErrorEvent(err));
                } else if (images) {
                    for (var id in images) {
                        this$1.imageManager.addImage(id, images[id]);
                    }
                }
                this$1.imageManager.setLoaded(true);
                this$1.fire(new __chunk_1.Event('data', { dataType: 'style' }));
            });
        } else {
            this.imageManager.setLoaded(true);
        }
        this.glyphManager.setURL(json.glyphs);
        var layers = derefLayers(this.stylesheet.layers);
        this._order = layers.map(function (layer) {
            return layer.id;
        });
        this._layers = {};
        for (var i = 0, list = layers; i < list.length; i += 1) {
            var layer = list[i];
            layer = __chunk_1.createStyleLayer(layer);
            layer.setEventedParent(this$1, { layer: { id: layer.id } });
            this$1._layers[layer.id] = layer;
        }
        this.dispatcher.broadcast('setLayers', this._serializeLayers(this._order));
        this.light = new Light(this.stylesheet.light);
        this.fire(new __chunk_1.Event('data', { dataType: 'style' }));
        this.fire(new __chunk_1.Event('style.load'));
    };
    Style.prototype._validateLayer = function _validateLayer(layer) {
        var sourceCache = this.sourceCaches[layer.source];
        if (!sourceCache) {
            return;
        }
        var sourceLayer = layer.sourceLayer;
        if (!sourceLayer) {
            return;
        }
        var source = sourceCache.getSource();
        if (source.type === 'geojson' || source.vectorLayerIds && source.vectorLayerIds.indexOf(sourceLayer) === -1) {
            this.fire(new __chunk_1.ErrorEvent(new Error('Source layer "' + sourceLayer + '" ' + 'does not exist on source "' + source.id + '" ' + 'as specified by style layer "' + layer.id + '"')));
        }
    };
    Style.prototype.loaded = function loaded() {
        var this$1 = this;
        if (!this._loaded) {
            return false;
        }
        if (Object.keys(this._updatedSources).length) {
            return false;
        }
        for (var id in this$1.sourceCaches) {
            if (!this$1.sourceCaches[id].loaded()) {
                return false;
            }
        }
        if (!this.imageManager.isLoaded()) {
            return false;
        }
        return true;
    };
    Style.prototype._serializeLayers = function _serializeLayers(ids) {
        var this$1 = this;
        var serializedLayers = [];
        for (var i = 0, list = ids; i < list.length; i += 1) {
            var id = list[i];
            var layer = this$1._layers[id];
            if (layer.type !== 'custom') {
                serializedLayers.push(layer.serialize());
            }
        }
        return serializedLayers;
    };
    Style.prototype.hasTransitions = function hasTransitions() {
        var this$1 = this;
        if (this.light && this.light.hasTransition()) {
            return true;
        }
        for (var id in this$1.sourceCaches) {
            if (this$1.sourceCaches[id].hasTransition()) {
                return true;
            }
        }
        for (var id$1 in this$1._layers) {
            if (this$1._layers[id$1].hasTransition()) {
                return true;
            }
        }
        return false;
    };
    Style.prototype._checkLoaded = function _checkLoaded() {
        if (!this._loaded) {
            throw new Error('Style is not done loading');
        }
    };
    Style.prototype.update = function update(parameters) {
        var this$1 = this;
        if (!this._loaded) {
            return;
        }
        var changed = this._changed;
        if (this._changed) {
            var updatedIds = Object.keys(this._updatedLayers);
            var removedIds = Object.keys(this._removedLayers);
            if (updatedIds.length || removedIds.length) {
                this._updateWorkerLayers(updatedIds, removedIds);
            }
            for (var id in this$1._updatedSources) {
                var action = this$1._updatedSources[id];
                if (action === 'reload') {
                    this$1._reloadSource(id);
                } else if (action === 'clear') {
                    this$1._clearSource(id);
                }
            }
            for (var id$1 in this$1._updatedPaintProps) {
                this$1._layers[id$1].updateTransitions(parameters);
            }
            this.light.updateTransitions(parameters);
            this._resetUpdates();
        }
        for (var sourceId in this$1.sourceCaches) {
            this$1.sourceCaches[sourceId].used = false;
        }
        for (var i = 0, list = this$1._order; i < list.length; i += 1) {
            var layerId = list[i];
            var layer = this$1._layers[layerId];
            layer.recalculate(parameters);
            if (!layer.isHidden(parameters.zoom) && layer.source) {
                this$1.sourceCaches[layer.source].used = true;
            }
        }
        this.light.recalculate(parameters);
        this.z = parameters.zoom;
        if (changed) {
            this.fire(new __chunk_1.Event('data', { dataType: 'style' }));
        }
    };
    Style.prototype._updateWorkerLayers = function _updateWorkerLayers(updatedIds, removedIds) {
        this.dispatcher.broadcast('updateLayers', {
            layers: this._serializeLayers(updatedIds),
            removedIds: removedIds
        });
    };
    Style.prototype._resetUpdates = function _resetUpdates() {
        this._changed = false;
        this._updatedLayers = {};
        this._removedLayers = {};
        this._updatedSources = {};
        this._updatedPaintProps = {};
    };
    Style.prototype.setState = function setState(nextState) {
        var this$1 = this;
        this._checkLoaded();
        if (emitValidationErrors(this, __chunk_1.validateStyle(nextState))) {
            return false;
        }
        nextState = __chunk_1.clone(nextState);
        nextState.layers = derefLayers(nextState.layers);
        var changes = diffStyles(this.serialize(), nextState).filter(function (op) {
            return !(op.command in ignoredDiffOperations);
        });
        if (changes.length === 0) {
            return false;
        }
        var unimplementedOps = changes.filter(function (op) {
            return !(op.command in supportedDiffOperations);
        });
        if (unimplementedOps.length > 0) {
            throw new Error('Unimplemented: ' + unimplementedOps.map(function (op) {
                return op.command;
            }).join(', ') + '.');
        }
        changes.forEach(function (op) {
            if (op.command === 'setTransition') {
                return;
            }
            this$1[op.command].apply(this$1, op.args);
        });
        this.stylesheet = nextState;
        return true;
    };
    Style.prototype.addImage = function addImage(id, image) {
        if (this.getImage(id)) {
            return this.fire(new __chunk_1.ErrorEvent(new Error('An image with this name already exists.')));
        }
        this.imageManager.addImage(id, image);
        this.fire(new __chunk_1.Event('data', { dataType: 'style' }));
    };
    Style.prototype.getImage = function getImage(id) {
        return this.imageManager.getImage(id);
    };
    Style.prototype.removeImage = function removeImage(id) {
        if (!this.getImage(id)) {
            return this.fire(new __chunk_1.ErrorEvent(new Error('No image with this name exists.')));
        }
        this.imageManager.removeImage(id);
        this.fire(new __chunk_1.Event('data', { dataType: 'style' }));
    };
    Style.prototype.listImages = function listImages() {
        this._checkLoaded();
        return this.imageManager.listImages();
    };
    Style.prototype.addSource = function addSource(id, source, options) {
        var this$1 = this;
        this._checkLoaded();
        if (this.sourceCaches[id] !== undefined) {
            throw new Error('There is already a source with this ID');
        }
        if (!source.type) {
            throw new Error('The type property must be defined, but the only the following properties were given: ' + Object.keys(source).join(', ') + '.');
        }
        var builtIns = [
            'vector',
            'raster',
            'geojson',
            'video',
            'image'
        ];
        var shouldValidate = builtIns.indexOf(source.type) >= 0;
        if (shouldValidate && this._validate(__chunk_1.validateStyle.source, 'sources.' + id, source, null, options)) {
            return;
        }
        if (this.map && this.map._collectResourceTiming) {
            source.collectResourceTiming = true;
        }
        var sourceCache = this.sourceCaches[id] = new SourceCache(id, source, this.dispatcher);
        sourceCache.style = this;
        sourceCache.setEventedParent(this, function () {
            return {
                isSourceLoaded: this$1.loaded(),
                source: sourceCache.serialize(),
                sourceId: id
            };
        });
        sourceCache.onAdd(this.map);
        this._changed = true;
    };
    Style.prototype.removeSource = function removeSource(id) {
        var this$1 = this;
        this._checkLoaded();
        if (this.sourceCaches[id] === undefined) {
            throw new Error('There is no source with this ID');
        }
        for (var layerId in this$1._layers) {
            if (this$1._layers[layerId].source === id) {
                return this$1.fire(new __chunk_1.ErrorEvent(new Error('Source "' + id + '" cannot be removed while layer "' + layerId + '" is using it.')));
            }
        }
        var sourceCache = this.sourceCaches[id];
        delete this.sourceCaches[id];
        delete this._updatedSources[id];
        sourceCache.fire(new __chunk_1.Event('data', {
            sourceDataType: 'metadata',
            dataType: 'source',
            sourceId: id
        }));
        sourceCache.setEventedParent(null);
        sourceCache.clearTiles();
        if (sourceCache.onRemove) {
            sourceCache.onRemove(this.map);
        }
        this._changed = true;
    };
    Style.prototype.setGeoJSONSourceData = function setGeoJSONSourceData(id, data) {
        this._checkLoaded();
        var geojsonSource = this.sourceCaches[id].getSource();
        geojsonSource.setData(data);
        this._changed = true;
    };
    Style.prototype.getSource = function getSource(id) {
        return this.sourceCaches[id] && this.sourceCaches[id].getSource();
    };
    Style.prototype.addLayer = function addLayer(layerObject, before, options) {
        this._checkLoaded();
        var id = layerObject.id;
        if (this.getLayer(id)) {
            this.fire(new __chunk_1.ErrorEvent(new Error('Layer with id "' + id + '" already exists on this map')));
            return;
        }
        var layer;
        if (layerObject.type === 'custom') {
            if (emitValidationErrors(this, __chunk_1.validateCustomStyleLayer(layerObject))) {
                return;
            }
            layer = __chunk_1.createStyleLayer(layerObject);
        } else {
            if (typeof layerObject.source === 'object') {
                this.addSource(id, layerObject.source);
                layerObject = __chunk_1.clone(layerObject);
                layerObject = __chunk_1.extend(layerObject, { source: id });
            }
            if (this._validate(__chunk_1.validateStyle.layer, 'layers.' + id, layerObject, { arrayIndex: -1 }, options)) {
                return;
            }
            layer = __chunk_1.createStyleLayer(layerObject);
            this._validateLayer(layer);
            layer.setEventedParent(this, { layer: { id: id } });
        }
        var index = before ? this._order.indexOf(before) : this._order.length;
        if (before && index === -1) {
            this.fire(new __chunk_1.ErrorEvent(new Error('Layer with id "' + before + '" does not exist on this map.')));
            return;
        }
        this._order.splice(index, 0, id);
        this._layerOrderChanged = true;
        this._layers[id] = layer;
        if (this._removedLayers[id] && layer.source && layer.type !== 'custom') {
            var removed = this._removedLayers[id];
            delete this._removedLayers[id];
            if (removed.type !== layer.type) {
                this._updatedSources[layer.source] = 'clear';
            } else {
                this._updatedSources[layer.source] = 'reload';
                this.sourceCaches[layer.source].pause();
            }
        }
        this._updateLayer(layer);
        if (layer.onAdd) {
            layer.onAdd(this.map);
        }
    };
    Style.prototype.moveLayer = function moveLayer(id, before) {
        this._checkLoaded();
        this._changed = true;
        var layer = this._layers[id];
        if (!layer) {
            this.fire(new __chunk_1.ErrorEvent(new Error('The layer \'' + id + '\' does not exist in the map\'s style and cannot be moved.')));
            return;
        }
        if (id === before) {
            return;
        }
        var index = this._order.indexOf(id);
        this._order.splice(index, 1);
        var newIndex = before ? this._order.indexOf(before) : this._order.length;
        if (before && newIndex === -1) {
            this.fire(new __chunk_1.ErrorEvent(new Error('Layer with id "' + before + '" does not exist on this map.')));
            return;
        }
        this._order.splice(newIndex, 0, id);
        this._layerOrderChanged = true;
    };
    Style.prototype.removeLayer = function removeLayer(id) {
        this._checkLoaded();
        var layer = this._layers[id];
        if (!layer) {
            this.fire(new __chunk_1.ErrorEvent(new Error('The layer \'' + id + '\' does not exist in the map\'s style and cannot be removed.')));
            return;
        }
        layer.setEventedParent(null);
        var index = this._order.indexOf(id);
        this._order.splice(index, 1);
        this._layerOrderChanged = true;
        this._changed = true;
        this._removedLayers[id] = layer;
        delete this._layers[id];
        delete this._updatedLayers[id];
        delete this._updatedPaintProps[id];
        if (layer.onRemove) {
            layer.onRemove(this.map);
        }
    };
    Style.prototype.getLayer = function getLayer(id) {
        return this._layers[id];
    };
    Style.prototype.setLayerZoomRange = function setLayerZoomRange(layerId, minzoom, maxzoom) {
        this._checkLoaded();
        var layer = this.getLayer(layerId);
        if (!layer) {
            this.fire(new __chunk_1.ErrorEvent(new Error('The layer \'' + layerId + '\' does not exist in the map\'s style and cannot have zoom extent.')));
            return;
        }
        if (layer.minzoom === minzoom && layer.maxzoom === maxzoom) {
            return;
        }
        if (minzoom != null) {
            layer.minzoom = minzoom;
        }
        if (maxzoom != null) {
            layer.maxzoom = maxzoom;
        }
        this._updateLayer(layer);
    };
    Style.prototype.setFilter = function setFilter(layerId, filter) {
        this._checkLoaded();
        var layer = this.getLayer(layerId);
        if (!layer) {
            this.fire(new __chunk_1.ErrorEvent(new Error('The layer \'' + layerId + '\' does not exist in the map\'s style and cannot be filtered.')));
            return;
        }
        if (__chunk_1.deepEqual(layer.filter, filter)) {
            return;
        }
        if (filter === null || filter === undefined) {
            layer.filter = undefined;
            this._updateLayer(layer);
            return;
        }
        if (this._validate(__chunk_1.validateStyle.filter, 'layers.' + layer.id + '.filter', filter)) {
            return;
        }
        layer.filter = __chunk_1.clone(filter);
        this._updateLayer(layer);
    };
    Style.prototype.getFilter = function getFilter(layer) {
        return __chunk_1.clone(this.getLayer(layer).filter);
    };
    Style.prototype.setLayoutProperty = function setLayoutProperty(layerId, name, value) {
        this._checkLoaded();
        var layer = this.getLayer(layerId);
        if (!layer) {
            this.fire(new __chunk_1.ErrorEvent(new Error('The layer \'' + layerId + '\' does not exist in the map\'s style and cannot be styled.')));
            return;
        }
        if (__chunk_1.deepEqual(layer.getLayoutProperty(name), value)) {
            return;
        }
        layer.setLayoutProperty(name, value);
        this._updateLayer(layer);
    };
    Style.prototype.getLayoutProperty = function getLayoutProperty(layer, name) {
        return this.getLayer(layer).getLayoutProperty(name);
    };
    Style.prototype.setPaintProperty = function setPaintProperty(layerId, name, value) {
        this._checkLoaded();
        var layer = this.getLayer(layerId);
        if (!layer) {
            this.fire(new __chunk_1.ErrorEvent(new Error('The layer \'' + layerId + '\' does not exist in the map\'s style and cannot be styled.')));
            return;
        }
        if (__chunk_1.deepEqual(layer.getPaintProperty(name), value)) {
            return;
        }
        var requiresRelayout = layer.setPaintProperty(name, value);
        if (requiresRelayout) {
            this._updateLayer(layer);
        }
        this._changed = true;
        this._updatedPaintProps[layerId] = true;
    };
    Style.prototype.getPaintProperty = function getPaintProperty(layer, name) {
        return this.getLayer(layer).getPaintProperty(name);
    };
    Style.prototype.setFeatureState = function setFeatureState(feature, state) {
        this._checkLoaded();
        var sourceId = feature.source;
        var sourceLayer = feature.sourceLayer;
        var sourceCache = this.sourceCaches[sourceId];
        var featureId = parseInt(feature.id, 10);
        if (sourceCache === undefined) {
            this.fire(new __chunk_1.ErrorEvent(new Error('The source \'' + sourceId + '\' does not exist in the map\'s style.')));
            return;
        }
        var sourceType = sourceCache.getSource().type;
        if (sourceType === 'vector' && !sourceLayer) {
            this.fire(new __chunk_1.ErrorEvent(new Error('The sourceLayer parameter must be provided for vector source types.')));
            return;
        }
        if (isNaN(featureId) || featureId < 0) {
            this.fire(new __chunk_1.ErrorEvent(new Error('The feature id parameter must be provided and non-negative.')));
            return;
        }
        sourceCache.setFeatureState(sourceLayer, featureId, state);
    };
    Style.prototype.getFeatureState = function getFeatureState(feature) {
        this._checkLoaded();
        var sourceId = feature.source;
        var sourceLayer = feature.sourceLayer;
        var sourceCache = this.sourceCaches[sourceId];
        var featureId = parseInt(feature.id, 10);
        if (sourceCache === undefined) {
            this.fire(new __chunk_1.ErrorEvent(new Error('The source \'' + sourceId + '\' does not exist in the map\'s style.')));
            return;
        }
        var sourceType = sourceCache.getSource().type;
        if (sourceType === 'vector' && !sourceLayer) {
            this.fire(new __chunk_1.ErrorEvent(new Error('The sourceLayer parameter must be provided for vector source types.')));
            return;
        }
        if (isNaN(featureId) || featureId < 0) {
            this.fire(new __chunk_1.ErrorEvent(new Error('The feature id parameter must be provided and non-negative.')));
            return;
        }
        return sourceCache.getFeatureState(sourceLayer, featureId);
    };
    Style.prototype.getTransition = function getTransition() {
        return __chunk_1.extend({
            duration: 300,
            delay: 0
        }, this.stylesheet && this.stylesheet.transition);
    };
    Style.prototype.serialize = function serialize() {
        return __chunk_1.filterObject({
            version: this.stylesheet.version,
            name: this.stylesheet.name,
            metadata: this.stylesheet.metadata,
            light: this.stylesheet.light,
            center: this.stylesheet.center,
            zoom: this.stylesheet.zoom,
            bearing: this.stylesheet.bearing,
            pitch: this.stylesheet.pitch,
            sprite: this.stylesheet.sprite,
            glyphs: this.stylesheet.glyphs,
            transition: this.stylesheet.transition,
            sources: __chunk_1.mapObject(this.sourceCaches, function (source) {
                return source.serialize();
            }),
            layers: this._serializeLayers(this._order)
        }, function (value) {
            return value !== undefined;
        });
    };
    Style.prototype._updateLayer = function _updateLayer(layer) {
        this._updatedLayers[layer.id] = true;
        if (layer.source && !this._updatedSources[layer.source]) {
            this._updatedSources[layer.source] = 'reload';
            this.sourceCaches[layer.source].pause();
        }
        this._changed = true;
    };
    Style.prototype._flattenRenderedFeatures = function _flattenRenderedFeatures(sourceResults) {
        var this$1 = this;
        var features = [];
        for (var l = this._order.length - 1; l >= 0; l--) {
            var layerId = this$1._order[l];
            for (var i$1 = 0, list$1 = sourceResults; i$1 < list$1.length; i$1 += 1) {
                var sourceResult = list$1[i$1];
                var layerFeatures = sourceResult[layerId];
                if (layerFeatures) {
                    for (var i = 0, list = layerFeatures; i < list.length; i += 1) {
                        var feature = list[i];
                        features.push(feature);
                    }
                }
            }
        }
        return features;
    };
    Style.prototype.queryRenderedFeatures = function queryRenderedFeatures$1(queryGeometry, params, transform) {
        var this$1 = this;
        if (params && params.filter) {
            this._validate(__chunk_1.validateStyle.filter, 'queryRenderedFeatures.filter', params.filter);
        }
        var includedSources = {};
        if (params && params.layers) {
            if (!Array.isArray(params.layers)) {
                this.fire(new __chunk_1.ErrorEvent(new Error('parameters.layers must be an Array.')));
                return [];
            }
            for (var i = 0, list = params.layers; i < list.length; i += 1) {
                var layerId = list[i];
                var layer = this$1._layers[layerId];
                if (!layer) {
                    this$1.fire(new __chunk_1.ErrorEvent(new Error('The layer \'' + layerId + '\' does not exist in the map\'s style and cannot be queried for features.')));
                    return [];
                }
                includedSources[layer.source] = true;
            }
        }
        var sourceResults = [];
        var queryCoordinates = queryGeometry.map(function (p) {
            return transform.pointCoordinate(p);
        });
        for (var id in this$1.sourceCaches) {
            if (params.layers && !includedSources[id]) {
                continue;
            }
            sourceResults.push(queryRenderedFeatures(this$1.sourceCaches[id], this$1._layers, queryCoordinates, params, transform));
        }
        if (this.placement) {
            sourceResults.push(queryRenderedSymbols(this._layers, this.sourceCaches, queryGeometry, params, this.placement.collisionIndex, this.placement.retainedQueryData));
        }
        return this._flattenRenderedFeatures(sourceResults);
    };
    Style.prototype.querySourceFeatures = function querySourceFeatures$1(sourceID, params) {
        if (params && params.filter) {
            this._validate(__chunk_1.validateStyle.filter, 'querySourceFeatures.filter', params.filter);
        }
        var sourceCache = this.sourceCaches[sourceID];
        return sourceCache ? querySourceFeatures(sourceCache, params) : [];
    };
    Style.prototype.addSourceType = function addSourceType(name, SourceType, callback) {
        if (Style.getSourceType(name)) {
            return callback(new Error('A source type called "' + name + '" already exists.'));
        }
        Style.setSourceType(name, SourceType);
        if (!SourceType.workerSourceURL) {
            return callback(null, null);
        }
        this.dispatcher.broadcast('loadWorkerSource', {
            name: name,
            url: SourceType.workerSourceURL
        }, callback);
    };
    Style.prototype.getLight = function getLight() {
        return this.light.getLight();
    };
    Style.prototype.setLight = function setLight(lightOptions) {
        this._checkLoaded();
        var light = this.light.getLight();
        var _update = false;
        for (var key in lightOptions) {
            if (!__chunk_1.deepEqual(lightOptions[key], light[key])) {
                _update = true;
                break;
            }
        }
        if (!_update) {
            return;
        }
        var parameters = {
            now: __chunk_1.browser.now(),
            transition: __chunk_1.extend({
                duration: 300,
                delay: 0
            }, this.stylesheet.transition)
        };
        this.light.setLight(lightOptions);
        this.light.updateTransitions(parameters);
    };
    Style.prototype._validate = function _validate(validate, key, value, props, options) {
        if (options && options.validate === false) {
            return false;
        }
        return emitValidationErrors(this, validate.call(__chunk_1.validateStyle, __chunk_1.extend({
            key: key,
            style: this.serialize(),
            value: value,
            styleSpec: __chunk_1.styleSpec
        }, props)));
    };
    Style.prototype._remove = function _remove() {
        var this$1 = this;
        if (this._request) {
            this._request.cancel();
            this._request = null;
        }
        if (this._spriteRequest) {
            this._spriteRequest.cancel();
            this._spriteRequest = null;
        }
        __chunk_1.evented.off('pluginAvailable', this._rtlTextPluginCallback);
        for (var id in this$1.sourceCaches) {
            this$1.sourceCaches[id].clearTiles();
        }
        this.dispatcher.remove();
    };
    Style.prototype._clearSource = function _clearSource(id) {
        this.sourceCaches[id].clearTiles();
    };
    Style.prototype._reloadSource = function _reloadSource(id) {
        this.sourceCaches[id].resume();
        this.sourceCaches[id].reload();
    };
    Style.prototype._updateSources = function _updateSources(transform) {
        var this$1 = this;
        for (var id in this$1.sourceCaches) {
            this$1.sourceCaches[id].update(transform);
        }
    };
    Style.prototype._generateCollisionBoxes = function _generateCollisionBoxes() {
        var this$1 = this;
        for (var id in this$1.sourceCaches) {
            this$1._reloadSource(id);
        }
    };
    Style.prototype._updatePlacement = function _updatePlacement(transform, showCollisionBoxes, fadeDuration, crossSourceCollisions) {
        var this$1 = this;
        var symbolBucketsChanged = false;
        var placementCommitted = false;
        var layerTiles = {};
        for (var i = 0, list = this$1._order; i < list.length; i += 1) {
            var layerID = list[i];
            var styleLayer = this$1._layers[layerID];
            if (styleLayer.type !== 'symbol') {
                continue;
            }
            if (!layerTiles[styleLayer.source]) {
                var sourceCache = this$1.sourceCaches[styleLayer.source];
                layerTiles[styleLayer.source] = sourceCache.getRenderableIds(true).map(function (id) {
                    return sourceCache.getTileByID(id);
                }).sort(function (a, b) {
                    return b.tileID.overscaledZ - a.tileID.overscaledZ || (a.tileID.isLessThan(b.tileID) ? -1 : 1);
                });
            }
            var layerBucketsChanged = this$1.crossTileSymbolIndex.addLayer(styleLayer, layerTiles[styleLayer.source], transform.center.lng);
            symbolBucketsChanged = symbolBucketsChanged || layerBucketsChanged;
        }
        this.crossTileSymbolIndex.pruneUnusedLayers(this._order);
        var forceFullPlacement = this._layerOrderChanged;
        if (forceFullPlacement || !this.pauseablePlacement || this.pauseablePlacement.isDone() && !this.placement.stillRecent(__chunk_1.browser.now())) {
            this.pauseablePlacement = new PauseablePlacement(transform, this._order, forceFullPlacement, showCollisionBoxes, fadeDuration, crossSourceCollisions);
            this._layerOrderChanged = false;
        }
        if (this.pauseablePlacement.isDone()) {
            this.placement.setStale();
        } else {
            this.pauseablePlacement.continuePlacement(this._order, this._layers, layerTiles);
            if (this.pauseablePlacement.isDone()) {
                this.placement = this.pauseablePlacement.commit(this.placement, __chunk_1.browser.now());
                placementCommitted = true;
            }
            if (symbolBucketsChanged) {
                this.pauseablePlacement.placement.setStale();
            }
        }
        if (placementCommitted || symbolBucketsChanged) {
            for (var i$1 = 0, list$1 = this$1._order; i$1 < list$1.length; i$1 += 1) {
                var layerID$1 = list$1[i$1];
                var styleLayer$1 = this$1._layers[layerID$1];
                if (styleLayer$1.type !== 'symbol') {
                    continue;
                }
                this$1.placement.updateLayerOpacities(styleLayer$1, layerTiles[styleLayer$1.source]);
            }
        }
        var needsRerender = !this.pauseablePlacement.isDone() || this.placement.hasTransitions(__chunk_1.browser.now());
        return needsRerender;
    };
    Style.prototype._releaseSymbolFadeTiles = function _releaseSymbolFadeTiles() {
        var this$1 = this;
        for (var id in this$1.sourceCaches) {
            this$1.sourceCaches[id].releaseSymbolFadeTiles();
        }
    };
    Style.prototype.getImages = function getImages(mapId, params, callback) {
        this.imageManager.getImages(params.icons, callback);
    };
    Style.prototype.getGlyphs = function getGlyphs(mapId, params, callback) {
        this.glyphManager.getGlyphs(params.stacks, callback);
    };
    return Style;
}(__chunk_1.Evented);
Style.getSourceType = getType;
Style.setSourceType = setType;
Style.registerForPluginAvailability = __chunk_1.registerForPluginAvailability;

var posAttributes = __chunk_1.createLayout([{
        name: 'a_pos',
        type: 'Int16',
        components: 2
    }]);

var preludeFrag = "#ifdef GL_ES\nprecision mediump float;\n#else\n#if !defined(lowp)\n#define lowp\n#endif\n#if !defined(mediump)\n#define mediump\n#endif\n#if !defined(highp)\n#define highp\n#endif\n#endif";

var preludeVert = "#ifdef GL_ES\nprecision highp float;\n#else\n#if !defined(lowp)\n#define lowp\n#endif\n#if !defined(mediump)\n#define mediump\n#endif\n#if !defined(highp)\n#define highp\n#endif\n#endif\nvec2 unpack_float(const float packedValue) {int packedIntValue=int(packedValue);int v0=packedIntValue/256;return vec2(v0,packedIntValue-v0*256);}vec2 unpack_opacity(const float packedOpacity) {int intOpacity=int(packedOpacity)/2;return vec2(float(intOpacity)/127.0,mod(packedOpacity,2.0));}vec4 decode_color(const vec2 encodedColor) {return vec4(unpack_float(encodedColor[0])/255.0,unpack_float(encodedColor[1])/255.0\n);}float unpack_mix_vec2(const vec2 packedValue,const float t) {return mix(packedValue[0],packedValue[1],t);}vec4 unpack_mix_color(const vec4 packedColors,const float t) {vec4 minColor=decode_color(vec2(packedColors[0],packedColors[1]));vec4 maxColor=decode_color(vec2(packedColors[2],packedColors[3]));return mix(minColor,maxColor,t);}vec2 get_pattern_pos(const vec2 pixel_coord_upper,const vec2 pixel_coord_lower,const vec2 pattern_size,const float tile_units_to_pixels,const vec2 pos) {vec2 offset=mod(mod(mod(pixel_coord_upper,pattern_size)*256.0,pattern_size)*256.0+pixel_coord_lower,pattern_size);return (tile_units_to_pixels*pos+offset)/pattern_size;}";

var backgroundFrag = "uniform vec4 u_color;uniform float u_opacity;void main() {gl_FragColor=u_color*u_opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var backgroundVert = "attribute vec2 a_pos;uniform mat4 u_matrix;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);}";

var backgroundPatternFrag = "uniform vec2 u_pattern_tl_a;uniform vec2 u_pattern_br_a;uniform vec2 u_pattern_tl_b;uniform vec2 u_pattern_br_b;uniform vec2 u_texsize;uniform float u_mix;uniform float u_opacity;uniform sampler2D u_image;varying vec2 v_pos_a;varying vec2 v_pos_b;void main() {vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(u_pattern_tl_a/u_texsize,u_pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(u_pattern_tl_b/u_texsize,u_pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);gl_FragColor=mix(color1,color2,u_mix)*u_opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var backgroundPatternVert = "uniform mat4 u_matrix;uniform vec2 u_pattern_size_a;uniform vec2 u_pattern_size_b;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform float u_scale_a;uniform float u_scale_b;uniform float u_tile_units_to_pixels;attribute vec2 a_pos;varying vec2 v_pos_a;varying vec2 v_pos_b;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,u_scale_a*u_pattern_size_a,u_tile_units_to_pixels,a_pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,u_scale_b*u_pattern_size_b,u_tile_units_to_pixels,a_pos);}";

var circleFrag = "#pragma mapbox: define highp vec4 color\n#pragma mapbox: define mediump float radius\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define highp vec4 stroke_color\n#pragma mapbox: define mediump float stroke_width\n#pragma mapbox: define lowp float stroke_opacity\nvarying vec3 v_data;void main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize mediump float radius\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize highp vec4 stroke_color\n#pragma mapbox: initialize mediump float stroke_width\n#pragma mapbox: initialize lowp float stroke_opacity\nvec2 extrude=v_data.xy;float extrude_length=length(extrude);lowp float antialiasblur=v_data.z;float antialiased_blur=-max(blur,antialiasblur);float opacity_t=smoothstep(0.0,antialiased_blur,extrude_length-1.0);float color_t=stroke_width < 0.01 ? 0.0 : smoothstep(antialiased_blur,0.0,extrude_length-radius/(radius+stroke_width));gl_FragColor=opacity_t*mix(color*opacity,stroke_color*stroke_opacity,color_t);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var circleVert = "uniform mat4 u_matrix;uniform bool u_scale_with_map;uniform bool u_pitch_with_map;uniform vec2 u_extrude_scale;uniform highp float u_camera_to_center_distance;attribute vec2 a_pos;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define mediump float radius\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define highp vec4 stroke_color\n#pragma mapbox: define mediump float stroke_width\n#pragma mapbox: define lowp float stroke_opacity\nvarying vec3 v_data;void main(void) {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize mediump float radius\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize highp vec4 stroke_color\n#pragma mapbox: initialize mediump float stroke_width\n#pragma mapbox: initialize lowp float stroke_opacity\nvec2 extrude=vec2(mod(a_pos,2.0)*2.0-1.0);vec2 circle_center=floor(a_pos*0.5);if (u_pitch_with_map) {vec2 corner_position=circle_center;if (u_scale_with_map) {corner_position+=extrude*(radius+stroke_width)*u_extrude_scale;} else {vec4 projected_center=u_matrix*vec4(circle_center,0,1);corner_position+=extrude*(radius+stroke_width)*u_extrude_scale*(projected_center.w/u_camera_to_center_distance);}gl_Position=u_matrix*vec4(corner_position,0,1);} else {gl_Position=u_matrix*vec4(circle_center,0,1);if (u_scale_with_map) {gl_Position.xy+=extrude*(radius+stroke_width)*u_extrude_scale*u_camera_to_center_distance;} else {gl_Position.xy+=extrude*(radius+stroke_width)*u_extrude_scale*gl_Position.w;}}lowp float antialiasblur=1.0/DEVICE_PIXEL_RATIO/(radius+stroke_width);v_data=vec3(extrude.x,extrude.y,antialiasblur);}";

var clippingMaskFrag = "void main() {gl_FragColor=vec4(1.0);}";

var clippingMaskVert = "attribute vec2 a_pos;uniform mat4 u_matrix;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);}";

var heatmapFrag = "#pragma mapbox: define highp float weight\nuniform highp float u_intensity;varying vec2 v_extrude;\n#define GAUSS_COEF 0.3989422804014327\nvoid main() {\n#pragma mapbox: initialize highp float weight\nfloat d=-0.5*3.0*3.0*dot(v_extrude,v_extrude);float val=weight*u_intensity*GAUSS_COEF*exp(d);gl_FragColor=vec4(val,1.0,1.0,1.0);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var heatmapVert = "#pragma mapbox: define highp float weight\n#pragma mapbox: define mediump float radius\nuniform mat4 u_matrix;uniform float u_extrude_scale;uniform float u_opacity;uniform float u_intensity;attribute vec2 a_pos;varying vec2 v_extrude;const highp float ZERO=1.0/255.0/16.0;\n#define GAUSS_COEF 0.3989422804014327\nvoid main(void) {\n#pragma mapbox: initialize highp float weight\n#pragma mapbox: initialize mediump float radius\nvec2 unscaled_extrude=vec2(mod(a_pos,2.0)*2.0-1.0);float S=sqrt(-2.0*log(ZERO/weight/u_intensity/GAUSS_COEF))/3.0;v_extrude=S*unscaled_extrude;vec2 extrude=v_extrude*radius*u_extrude_scale;vec4 pos=vec4(floor(a_pos*0.5)+extrude,0,1);gl_Position=u_matrix*pos;}";

var heatmapTextureFrag = "uniform sampler2D u_image;uniform sampler2D u_color_ramp;uniform float u_opacity;varying vec2 v_pos;void main() {float t=texture2D(u_image,v_pos).r;vec4 color=texture2D(u_color_ramp,vec2(t,0.5));gl_FragColor=color*u_opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(0.0);\n#endif\n}";

var heatmapTextureVert = "uniform mat4 u_matrix;uniform vec2 u_world;attribute vec2 a_pos;varying vec2 v_pos;void main() {gl_Position=u_matrix*vec4(a_pos*u_world,0,1);v_pos.x=a_pos.x;v_pos.y=1.0-a_pos.y;}";

var collisionBoxFrag = "varying float v_placed;varying float v_notUsed;void main() {float alpha=0.5;gl_FragColor=vec4(1.0,0.0,0.0,1.0)*alpha;if (v_placed > 0.5) {gl_FragColor=vec4(0.0,0.0,1.0,0.5)*alpha;}if (v_notUsed > 0.5) {gl_FragColor*=.1;}}";

var collisionBoxVert = "attribute vec2 a_pos;attribute vec2 a_anchor_pos;attribute vec2 a_extrude;attribute vec2 a_placed;uniform mat4 u_matrix;uniform vec2 u_extrude_scale;uniform float u_camera_to_center_distance;varying float v_placed;varying float v_notUsed;void main() {vec4 projectedPoint=u_matrix*vec4(a_anchor_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float collision_perspective_ratio=clamp(0.5+0.5*(u_camera_to_center_distance/camera_to_anchor_distance),0.0,4.0);gl_Position=u_matrix*vec4(a_pos,0.0,1.0);gl_Position.xy+=a_extrude*u_extrude_scale*gl_Position.w*collision_perspective_ratio;v_placed=a_placed.x;v_notUsed=a_placed.y;}";

var collisionCircleFrag = "uniform float u_overscale_factor;varying float v_placed;varying float v_notUsed;varying float v_radius;varying vec2 v_extrude;varying vec2 v_extrude_scale;void main() {float alpha=0.5;vec4 color=vec4(1.0,0.0,0.0,1.0)*alpha;if (v_placed > 0.5) {color=vec4(0.0,0.0,1.0,0.5)*alpha;}if (v_notUsed > 0.5) {color*=.2;}float extrude_scale_length=length(v_extrude_scale);float extrude_length=length(v_extrude)*extrude_scale_length;float stroke_width=15.0*extrude_scale_length/u_overscale_factor;float radius=v_radius*extrude_scale_length;float distance_to_edge=abs(extrude_length-radius);float opacity_t=smoothstep(-stroke_width,0.0,-distance_to_edge);gl_FragColor=opacity_t*color;}";

var collisionCircleVert = "attribute vec2 a_pos;attribute vec2 a_anchor_pos;attribute vec2 a_extrude;attribute vec2 a_placed;uniform mat4 u_matrix;uniform vec2 u_extrude_scale;uniform float u_camera_to_center_distance;varying float v_placed;varying float v_notUsed;varying float v_radius;varying vec2 v_extrude;varying vec2 v_extrude_scale;void main() {vec4 projectedPoint=u_matrix*vec4(a_anchor_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float collision_perspective_ratio=clamp(0.5+0.5*(u_camera_to_center_distance/camera_to_anchor_distance),0.0,4.0);gl_Position=u_matrix*vec4(a_pos,0.0,1.0);highp float padding_factor=1.2;gl_Position.xy+=a_extrude*u_extrude_scale*padding_factor*gl_Position.w*collision_perspective_ratio;v_placed=a_placed.x;v_notUsed=a_placed.y;v_radius=abs(a_extrude.y);v_extrude=a_extrude*padding_factor;v_extrude_scale=u_extrude_scale*u_camera_to_center_distance*collision_perspective_ratio;}";

var debugFrag = "uniform highp vec4 u_color;void main() {gl_FragColor=u_color;}";

var debugVert = "attribute vec2 a_pos;uniform mat4 u_matrix;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);}";

var fillFrag = "#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float opacity\ngl_FragColor=color*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var fillVert = "attribute vec2 a_pos;uniform mat4 u_matrix;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float opacity\ngl_Position=u_matrix*vec4(a_pos,0,1);}";

var fillOutlineFrag = "#pragma mapbox: define highp vec4 outline_color\n#pragma mapbox: define lowp float opacity\nvarying vec2 v_pos;void main() {\n#pragma mapbox: initialize highp vec4 outline_color\n#pragma mapbox: initialize lowp float opacity\nfloat dist=length(v_pos-gl_FragCoord.xy);float alpha=1.0-smoothstep(0.0,1.0,dist);gl_FragColor=outline_color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var fillOutlineVert = "attribute vec2 a_pos;uniform mat4 u_matrix;uniform vec2 u_world;varying vec2 v_pos;\n#pragma mapbox: define highp vec4 outline_color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 outline_color\n#pragma mapbox: initialize lowp float opacity\ngl_Position=u_matrix*vec4(a_pos,0,1);v_pos=(gl_Position.xy/gl_Position.w+1.0)/2.0*u_world;}";

var fillOutlinePatternFrag = "uniform vec2 u_texsize;uniform sampler2D u_image;uniform float u_fade;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec2 v_pos;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(pattern_tl_a/u_texsize,pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(pattern_tl_b/u_texsize,pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);float dist=length(v_pos-gl_FragCoord.xy);float alpha=1.0-smoothstep(0.0,1.0,dist);gl_FragColor=mix(color1,color2,u_fade)*alpha*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var fillOutlinePatternVert = "uniform mat4 u_matrix;uniform vec2 u_world;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform vec4 u_scale;attribute vec2 a_pos;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec2 v_pos;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float pixelRatio=u_scale.x;float tileRatio=u_scale.y;float fromScale=u_scale.z;float toScale=u_scale.w;gl_Position=u_matrix*vec4(a_pos,0,1);vec2 display_size_a=vec2((pattern_br_a.x-pattern_tl_a.x)/pixelRatio,(pattern_br_a.y-pattern_tl_a.y)/pixelRatio);vec2 display_size_b=vec2((pattern_br_b.x-pattern_tl_b.x)/pixelRatio,(pattern_br_b.y-pattern_tl_b.y)/pixelRatio);v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,fromScale*display_size_a,tileRatio,a_pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,toScale*display_size_b,tileRatio,a_pos);v_pos=(gl_Position.xy/gl_Position.w+1.0)/2.0*u_world;}";

var fillPatternFrag = "uniform vec2 u_texsize;uniform float u_fade;uniform sampler2D u_image;varying vec2 v_pos_a;varying vec2 v_pos_b;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(pattern_tl_a/u_texsize,pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(pattern_tl_b/u_texsize,pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);gl_FragColor=mix(color1,color2,u_fade)*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var fillPatternVert = "uniform mat4 u_matrix;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform vec4 u_scale;attribute vec2 a_pos;varying vec2 v_pos_a;varying vec2 v_pos_b;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float pixelRatio=u_scale.x;float tileZoomRatio=u_scale.y;float fromScale=u_scale.z;float toScale=u_scale.w;vec2 display_size_a=vec2((pattern_br_a.x-pattern_tl_a.x)/pixelRatio,(pattern_br_a.y-pattern_tl_a.y)/pixelRatio);vec2 display_size_b=vec2((pattern_br_b.x-pattern_tl_b.x)/pixelRatio,(pattern_br_b.y-pattern_tl_b.y)/pixelRatio);gl_Position=u_matrix*vec4(a_pos,0,1);v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,fromScale*display_size_a,tileZoomRatio,a_pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,toScale*display_size_b,tileZoomRatio,a_pos);}";

var fillExtrusionFrag = "varying vec4 v_color;void main() {gl_FragColor=v_color;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var fillExtrusionVert = "uniform mat4 u_matrix;uniform vec3 u_lightcolor;uniform lowp vec3 u_lightpos;uniform lowp float u_lightintensity;uniform float u_vertical_gradient;attribute vec2 a_pos;attribute vec4 a_normal_ed;varying vec4 v_color;\n#pragma mapbox: define highp float base\n#pragma mapbox: define highp float height\n#pragma mapbox: define highp vec4 color\nvoid main() {\n#pragma mapbox: initialize highp float base\n#pragma mapbox: initialize highp float height\n#pragma mapbox: initialize highp vec4 color\nvec3 normal=a_normal_ed.xyz;base=max(0.0,base);height=max(0.0,height);float t=mod(normal.x,2.0);gl_Position=u_matrix*vec4(a_pos,t > 0.0 ? height : base,1);float colorvalue=color.r*0.2126+color.g*0.7152+color.b*0.0722;v_color=vec4(0.0,0.0,0.0,1.0);vec4 ambientlight=vec4(0.03,0.03,0.03,1.0);color+=ambientlight;float directional=clamp(dot(normal/16384.0,u_lightpos),0.0,1.0);directional=mix((1.0-u_lightintensity),max((1.0-colorvalue+u_lightintensity),1.0),directional);if (normal.y !=0.0) {directional*=((1.0-u_vertical_gradient)+(u_vertical_gradient*clamp((t+base)*pow(height/150.0,0.5),mix(0.7,0.98,1.0-u_lightintensity),1.0)));}v_color.r+=clamp(color.r*directional*u_lightcolor.r,mix(0.0,0.3,1.0-u_lightcolor.r),1.0);v_color.g+=clamp(color.g*directional*u_lightcolor.g,mix(0.0,0.3,1.0-u_lightcolor.g),1.0);v_color.b+=clamp(color.b*directional*u_lightcolor.b,mix(0.0,0.3,1.0-u_lightcolor.b),1.0);}";

var fillExtrusionPatternFrag = "uniform vec2 u_texsize;uniform float u_fade;uniform sampler2D u_image;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec4 v_lighting;\n#pragma mapbox: define lowp float base\n#pragma mapbox: define lowp float height\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\nvoid main() {\n#pragma mapbox: initialize lowp float base\n#pragma mapbox: initialize lowp float height\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(pattern_tl_a/u_texsize,pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(pattern_tl_b/u_texsize,pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);vec4 mixedColor=mix(color1,color2,u_fade);gl_FragColor=mixedColor*v_lighting;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var fillExtrusionPatternVert = "uniform mat4 u_matrix;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform float u_height_factor;uniform vec4 u_scale;uniform float u_vertical_gradient;uniform vec3 u_lightcolor;uniform lowp vec3 u_lightpos;uniform lowp float u_lightintensity;attribute vec2 a_pos;attribute vec4 a_normal_ed;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec4 v_lighting;\n#pragma mapbox: define lowp float base\n#pragma mapbox: define lowp float height\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\nvoid main() {\n#pragma mapbox: initialize lowp float base\n#pragma mapbox: initialize lowp float height\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float pixelRatio=u_scale.x;float tileRatio=u_scale.y;float fromScale=u_scale.z;float toScale=u_scale.w;vec3 normal=a_normal_ed.xyz;float edgedistance=a_normal_ed.w;vec2 display_size_a=vec2((pattern_br_a.x-pattern_tl_a.x)/pixelRatio,(pattern_br_a.y-pattern_tl_a.y)/pixelRatio);vec2 display_size_b=vec2((pattern_br_b.x-pattern_tl_b.x)/pixelRatio,(pattern_br_b.y-pattern_tl_b.y)/pixelRatio);vec3 normal=a_normal_ed.xyz;float edgedistance=a_normal_ed.w;base=max(0.0,base);height=max(0.0,height);float t=mod(normal.x,2.0);float z=t > 0.0 ? height : base;gl_Position=u_matrix*vec4(a_pos,z,1);vec2 pos=normal.x==1.0 && normal.y==0.0 && normal.z==16384.0\n? a_pos\n: vec2(edgedistance,z*u_height_factor);v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,fromScale*display_size_a,tileRatio,pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,toScale*display_size_b,tileRatio,pos);v_lighting=vec4(0.0,0.0,0.0,1.0);float directional=clamp(dot(normal/16383.0,u_lightpos),0.0,1.0);directional=mix((1.0-u_lightintensity),max((0.5+u_lightintensity),1.0),directional);if (normal.y !=0.0) {directional*=((1.0-u_vertical_gradient)+(u_vertical_gradient*clamp((t+base)*pow(height/150.0,0.5),mix(0.7,0.98,1.0-u_lightintensity),1.0)));}v_lighting.rgb+=clamp(directional*u_lightcolor,mix(vec3(0.0),vec3(0.3),1.0-u_lightcolor),vec3(1.0));}";

var extrusionTextureFrag = "uniform sampler2D u_image;uniform float u_opacity;varying vec2 v_pos;void main() {gl_FragColor=texture2D(u_image,v_pos)*u_opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(0.0);\n#endif\n}";

var extrusionTextureVert = "uniform mat4 u_matrix;uniform vec2 u_world;attribute vec2 a_pos;varying vec2 v_pos;void main() {gl_Position=u_matrix*vec4(a_pos*u_world,0,1);v_pos.x=a_pos.x;v_pos.y=1.0-a_pos.y;}";

var hillshadePrepareFrag = "#ifdef GL_ES\nprecision highp float;\n#endif\nuniform sampler2D u_image;varying vec2 v_pos;uniform vec2 u_dimension;uniform float u_zoom;uniform float u_maxzoom;float getElevation(vec2 coord,float bias) {vec4 data=texture2D(u_image,coord)*255.0;return (data.r+data.g*256.0+data.b*256.0*256.0)/4.0;}void main() {vec2 epsilon=1.0/u_dimension;float a=getElevation(v_pos+vec2(-epsilon.x,-epsilon.y),0.0);float b=getElevation(v_pos+vec2(0,-epsilon.y),0.0);float c=getElevation(v_pos+vec2(epsilon.x,-epsilon.y),0.0);float d=getElevation(v_pos+vec2(-epsilon.x,0),0.0);float e=getElevation(v_pos,0.0);float f=getElevation(v_pos+vec2(epsilon.x,0),0.0);float g=getElevation(v_pos+vec2(-epsilon.x,epsilon.y),0.0);float h=getElevation(v_pos+vec2(0,epsilon.y),0.0);float i=getElevation(v_pos+vec2(epsilon.x,epsilon.y),0.0);float exaggeration=u_zoom < 2.0 ? 0.4 : u_zoom < 4.5 ? 0.35 : 0.3;vec2 deriv=vec2((c+f+f+i)-(a+d+d+g),(g+h+h+i)-(a+b+b+c))/ pow(2.0,(u_zoom-u_maxzoom)*exaggeration+19.2562-u_zoom);gl_FragColor=clamp(vec4(deriv.x/2.0+0.5,deriv.y/2.0+0.5,1.0,1.0),0.0,1.0);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var hillshadePrepareVert = "uniform mat4 u_matrix;attribute vec2 a_pos;attribute vec2 a_texture_pos;varying vec2 v_pos;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);v_pos=(a_texture_pos/8192.0)/2.0+0.25;}";

var hillshadeFrag = "uniform sampler2D u_image;varying vec2 v_pos;uniform vec2 u_latrange;uniform vec2 u_light;uniform vec4 u_shadow;uniform vec4 u_highlight;uniform vec4 u_accent;\n#define PI 3.141592653589793\nvoid main() {vec4 pixel=texture2D(u_image,v_pos);vec2 deriv=((pixel.rg*2.0)-1.0);float scaleFactor=cos(radians((u_latrange[0]-u_latrange[1])*(1.0-v_pos.y)+u_latrange[1]));float slope=atan(1.25*length(deriv)/scaleFactor);float aspect=deriv.x !=0.0 ? atan(deriv.y,-deriv.x) : PI/2.0*(deriv.y > 0.0 ? 1.0 :-1.0);float intensity=u_light.x;float azimuth=u_light.y+PI;float base=1.875-intensity*1.75;float maxValue=0.5*PI;float scaledSlope=intensity !=0.5 ? ((pow(base,slope)-1.0)/(pow(base,maxValue)-1.0))*maxValue : slope;float accent=cos(scaledSlope);vec4 accent_color=(1.0-accent)*u_accent*clamp(intensity*2.0,0.0,1.0);float shade=abs(mod((aspect+azimuth)/PI+0.5,2.0)-1.0);vec4 shade_color=mix(u_shadow,u_highlight,shade)*sin(scaledSlope)*clamp(intensity*2.0,0.0,1.0);gl_FragColor=accent_color*(1.0-shade_color.a)+shade_color;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var hillshadeVert = "uniform mat4 u_matrix;attribute vec2 a_pos;attribute vec2 a_texture_pos;varying vec2 v_pos;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);v_pos=a_texture_pos/8192.0;}";

var lineFrag = "#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\nvarying vec2 v_width2;varying vec2 v_normal;varying float v_gamma_scale;void main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\nfloat dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/DEVICE_PIXEL_RATIO)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);gl_FragColor=color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var lineVert = "\n#define ANTIALIASING 1.0/DEVICE_PIXEL_RATIO/2.0\n#define scale 0.015873016\nattribute vec4 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform mediump float u_ratio;uniform vec2 u_gl_units_to_pixels;varying vec2 v_normal;varying vec2 v_width2;varying float v_gamma_scale;varying highp float v_linesofar;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float width\nvec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;v_linesofar=(floor(a_data.z/4.0)+a_data.w*64.0)*2.0;vec2 pos=a_pos_normal.xy;mediump vec2 normal=a_pos_normal.zw;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;float extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_gl_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;v_width2=vec2(outset,inset);}";

var lineGradientFrag = "#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\nuniform sampler2D u_image;varying vec2 v_width2;varying vec2 v_normal;varying float v_gamma_scale;varying highp float v_lineprogress;void main() {\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\nfloat dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/DEVICE_PIXEL_RATIO)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);vec4 color=texture2D(u_image,vec2(v_lineprogress,0.5));gl_FragColor=color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var lineGradientVert = "\n#define MAX_LINE_DISTANCE 32767.0\n#define ANTIALIASING 1.0/DEVICE_PIXEL_RATIO/2.0\n#define scale 0.015873016\nattribute vec4 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform mediump float u_ratio;uniform vec2 u_gl_units_to_pixels;varying vec2 v_normal;varying vec2 v_width2;varying float v_gamma_scale;varying highp float v_lineprogress;\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\nvoid main() {\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float width\nvec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;v_lineprogress=(floor(a_data.z/4.0)+a_data.w*64.0)*2.0/MAX_LINE_DISTANCE;vec2 pos=a_pos_normal.xy;mediump vec2 normal=a_pos_normal.zw;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;float extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_gl_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;v_width2=vec2(outset,inset);}";

var linePatternFrag = "uniform vec2 u_texsize;uniform float u_fade;uniform mediump vec4 u_scale;uniform sampler2D u_image;varying vec2 v_normal;varying vec2 v_width2;varying float v_linesofar;varying float v_gamma_scale;\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float pixelRatio=u_scale.x;float tileZoomRatio=u_scale.y;float fromScale=u_scale.z;float toScale=u_scale.w;vec2 display_size_a=vec2((pattern_br_a.x-pattern_tl_a.x)/pixelRatio,(pattern_br_a.y-pattern_tl_a.y)/pixelRatio);vec2 display_size_b=vec2((pattern_br_b.x-pattern_tl_b.x)/pixelRatio,(pattern_br_b.y-pattern_tl_b.y)/pixelRatio);vec2 pattern_size_a=vec2(display_size_a.x*fromScale/tileZoomRatio,display_size_a.y);vec2 pattern_size_b=vec2(display_size_b.x*toScale/tileZoomRatio,display_size_b.y);float dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/DEVICE_PIXEL_RATIO)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);float x_a=mod(v_linesofar/pattern_size_a.x,1.0);float x_b=mod(v_linesofar/pattern_size_b.x,1.0);float y_a=0.5+(v_normal.y*clamp(v_width2.s,0.0,(pattern_size_a.y+2.0)/2.0)/pattern_size_a.y);float y_b=0.5+(v_normal.y*clamp(v_width2.s,0.0,(pattern_size_b.y+2.0)/2.0)/pattern_size_b.y);vec2 pos_a=mix(pattern_tl_a/u_texsize,pattern_br_a/u_texsize,vec2(x_a,y_a));vec2 pos_b=mix(pattern_tl_b/u_texsize,pattern_br_b/u_texsize,vec2(x_b,y_b));vec4 color=mix(texture2D(u_image,pos_a),texture2D(u_image,pos_b),u_fade);gl_FragColor=color*alpha*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var linePatternVert = "\n#define scale 0.015873016\n#define LINE_DISTANCE_SCALE 2.0\n#define ANTIALIASING 1.0/DEVICE_PIXEL_RATIO/2.0\nattribute vec4 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform vec2 u_gl_units_to_pixels;uniform mediump float u_ratio;varying vec2 v_normal;varying vec2 v_width2;varying float v_linesofar;varying float v_gamma_scale;\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\nvoid main() {\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize mediump float width\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\nvec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;float a_linesofar=(floor(a_data.z/4.0)+a_data.w*64.0)*LINE_DISTANCE_SCALE;vec2 pos=a_pos_normal.xy;mediump vec2 normal=a_pos_normal.zw;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;float extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_gl_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;v_linesofar=a_linesofar;v_width2=vec2(outset,inset);}";

var lineSDFFrag = "uniform sampler2D u_image;uniform float u_sdfgamma;uniform float u_mix;varying vec2 v_normal;varying vec2 v_width2;varying vec2 v_tex_a;varying vec2 v_tex_b;varying float v_gamma_scale;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp float floorwidth\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float width\n#pragma mapbox: initialize lowp float floorwidth\nfloat dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/DEVICE_PIXEL_RATIO)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);float sdfdist_a=texture2D(u_image,v_tex_a).a;float sdfdist_b=texture2D(u_image,v_tex_b).a;float sdfdist=mix(sdfdist_a,sdfdist_b,u_mix);alpha*=smoothstep(0.5-u_sdfgamma/floorwidth,0.5+u_sdfgamma/floorwidth,sdfdist);gl_FragColor=color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var lineSDFVert = "\n#define scale 0.015873016\n#define LINE_DISTANCE_SCALE 2.0\n#define ANTIALIASING 1.0/DEVICE_PIXEL_RATIO/2.0\nattribute vec4 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform mediump float u_ratio;uniform vec2 u_patternscale_a;uniform float u_tex_y_a;uniform vec2 u_patternscale_b;uniform float u_tex_y_b;uniform vec2 u_gl_units_to_pixels;varying vec2 v_normal;varying vec2 v_width2;varying vec2 v_tex_a;varying vec2 v_tex_b;varying float v_gamma_scale;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp float floorwidth\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float width\n#pragma mapbox: initialize lowp float floorwidth\nvec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;float a_linesofar=(floor(a_data.z/4.0)+a_data.w*64.0)*LINE_DISTANCE_SCALE;vec2 pos=a_pos_normal.xy;mediump vec2 normal=a_pos_normal.zw;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;float extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_gl_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;v_tex_a=vec2(a_linesofar*u_patternscale_a.x/floorwidth,normal.y*u_patternscale_a.y+u_tex_y_a);v_tex_b=vec2(a_linesofar*u_patternscale_b.x/floorwidth,normal.y*u_patternscale_b.y+u_tex_y_b);v_width2=vec2(outset,inset);}";

var rasterFrag = "uniform float u_fade_t;uniform float u_opacity;uniform sampler2D u_image0;uniform sampler2D u_image1;varying vec2 v_pos0;varying vec2 v_pos1;uniform float u_brightness_low;uniform float u_brightness_high;uniform float u_saturation_factor;uniform float u_contrast_factor;uniform vec3 u_spin_weights;void main() {vec4 color0=texture2D(u_image0,v_pos0);vec4 color1=texture2D(u_image1,v_pos1);if (color0.a > 0.0) {color0.rgb=color0.rgb/color0.a;}if (color1.a > 0.0) {color1.rgb=color1.rgb/color1.a;}vec4 color=mix(color0,color1,u_fade_t);color.a*=u_opacity;vec3 rgb=color.rgb;rgb=vec3(dot(rgb,u_spin_weights.xyz),dot(rgb,u_spin_weights.zxy),dot(rgb,u_spin_weights.yzx));float average=(color.r+color.g+color.b)/3.0;rgb+=(average-rgb)*u_saturation_factor;rgb=(rgb-0.5)*u_contrast_factor+0.5;vec3 u_high_vec=vec3(u_brightness_low,u_brightness_low,u_brightness_low);vec3 u_low_vec=vec3(u_brightness_high,u_brightness_high,u_brightness_high);gl_FragColor=vec4(mix(u_high_vec,u_low_vec,rgb)*color.a,color.a);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var rasterVert = "uniform mat4 u_matrix;uniform vec2 u_tl_parent;uniform float u_scale_parent;uniform float u_buffer_scale;attribute vec2 a_pos;attribute vec2 a_texture_pos;varying vec2 v_pos0;varying vec2 v_pos1;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);v_pos0=(((a_texture_pos/8192.0)-0.5)/u_buffer_scale )+0.5;v_pos1=(v_pos0*u_scale_parent)+u_tl_parent;}";

var symbolIconFrag = "uniform sampler2D u_texture;\n#pragma mapbox: define lowp float opacity\nvarying vec2 v_tex;varying float v_fade_opacity;void main() {\n#pragma mapbox: initialize lowp float opacity\nlowp float alpha=opacity*v_fade_opacity;gl_FragColor=texture2D(u_texture,v_tex)*alpha;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var symbolIconVert = "const float PI=3.141592653589793;attribute vec4 a_pos_offset;attribute vec4 a_data;attribute vec3 a_projected_pos;attribute float a_fade_opacity;uniform bool u_is_size_zoom_constant;uniform bool u_is_size_feature_constant;uniform highp float u_size_t;uniform highp float u_size;uniform highp float u_camera_to_center_distance;uniform highp float u_pitch;uniform bool u_rotate_symbol;uniform highp float u_aspect_ratio;uniform float u_fade_change;\n#pragma mapbox: define lowp float opacity\nuniform mat4 u_matrix;uniform mat4 u_label_plane_matrix;uniform mat4 u_gl_coord_matrix;uniform bool u_is_text;uniform bool u_pitch_with_map;uniform vec2 u_texsize;varying vec2 v_tex;varying float v_fade_opacity;void main() {\n#pragma mapbox: initialize lowp float opacity\nvec2 a_pos=a_pos_offset.xy;vec2 a_offset=a_pos_offset.zw;vec2 a_tex=a_data.xy;vec2 a_size=a_data.zw;highp float segment_angle=-a_projected_pos[2];float size;if (!u_is_size_zoom_constant && !u_is_size_feature_constant) {size=mix(a_size[0],a_size[1],u_size_t)/256.0;} else if (u_is_size_zoom_constant && !u_is_size_feature_constant) {size=a_size[0]/256.0;} else if (!u_is_size_zoom_constant && u_is_size_feature_constant) {size=u_size;} else {size=u_size;}vec4 projectedPoint=u_matrix*vec4(a_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float distance_ratio=u_pitch_with_map ?\ncamera_to_anchor_distance/u_camera_to_center_distance :\nu_camera_to_center_distance/camera_to_anchor_distance;highp float perspective_ratio=clamp(0.5+0.5*distance_ratio,0.0,4.0);size*=perspective_ratio;float fontScale=u_is_text ? size/24.0 : size;highp float symbol_rotation=0.0;if (u_rotate_symbol) {vec4 offsetProjectedPoint=u_matrix*vec4(a_pos+vec2(1,0),0,1);vec2 a=projectedPoint.xy/projectedPoint.w;vec2 b=offsetProjectedPoint.xy/offsetProjectedPoint.w;symbol_rotation=atan((b.y-a.y)/u_aspect_ratio,b.x-a.x);}highp float angle_sin=sin(segment_angle+symbol_rotation);highp float angle_cos=cos(segment_angle+symbol_rotation);mat2 rotation_matrix=mat2(angle_cos,-1.0*angle_sin,angle_sin,angle_cos);vec4 projected_pos=u_label_plane_matrix*vec4(a_projected_pos.xy,0.0,1.0);gl_Position=u_gl_coord_matrix*vec4(projected_pos.xy/projected_pos.w+rotation_matrix*(a_offset/32.0*fontScale),0.0,1.0);v_tex=a_tex/u_texsize;vec2 fade_opacity=unpack_opacity(a_fade_opacity);float fade_change=fade_opacity[1] > 0.5 ? u_fade_change :-u_fade_change;v_fade_opacity=max(0.0,min(1.0,fade_opacity[0]+fade_change));}";

var symbolSDFFrag = "#define SDF_PX 8.0\n#define EDGE_GAMMA 0.105/DEVICE_PIXEL_RATIO\nuniform bool u_is_halo;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nuniform sampler2D u_texture;uniform highp float u_gamma_scale;uniform bool u_is_text;varying vec2 v_data0;varying vec3 v_data1;void main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nvec2 tex=v_data0.xy;float gamma_scale=v_data1.x;float size=v_data1.y;float fade_opacity=v_data1[2];float fontScale=u_is_text ? size/24.0 : size;lowp vec4 color=fill_color;highp float gamma=EDGE_GAMMA/(fontScale*u_gamma_scale);lowp float buff=(256.0-64.0)/256.0;if (u_is_halo) {color=halo_color;gamma=(halo_blur*1.19/SDF_PX+EDGE_GAMMA)/(fontScale*u_gamma_scale);buff=(6.0-halo_width/fontScale)/SDF_PX;}lowp float dist=texture2D(u_texture,tex).a;highp float gamma_scaled=gamma*gamma_scale;highp float alpha=smoothstep(buff-gamma_scaled,buff+gamma_scaled,dist);gl_FragColor=color*(alpha*opacity*fade_opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var symbolSDFVert = "const float PI=3.141592653589793;attribute vec4 a_pos_offset;attribute vec4 a_data;attribute vec3 a_projected_pos;attribute float a_fade_opacity;uniform bool u_is_size_zoom_constant;uniform bool u_is_size_feature_constant;uniform highp float u_size_t;uniform highp float u_size;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nuniform mat4 u_matrix;uniform mat4 u_label_plane_matrix;uniform mat4 u_gl_coord_matrix;uniform bool u_is_text;uniform bool u_pitch_with_map;uniform highp float u_pitch;uniform bool u_rotate_symbol;uniform highp float u_aspect_ratio;uniform highp float u_camera_to_center_distance;uniform float u_fade_change;uniform vec2 u_texsize;varying vec2 v_data0;varying vec3 v_data1;void main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nvec2 a_pos=a_pos_offset.xy;vec2 a_offset=a_pos_offset.zw;vec2 a_tex=a_data.xy;vec2 a_size=a_data.zw;highp float segment_angle=-a_projected_pos[2];float size;if (!u_is_size_zoom_constant && !u_is_size_feature_constant) {size=mix(a_size[0],a_size[1],u_size_t)/256.0;} else if (u_is_size_zoom_constant && !u_is_size_feature_constant) {size=a_size[0]/256.0;} else if (!u_is_size_zoom_constant && u_is_size_feature_constant) {size=u_size;} else {size=u_size;}vec4 projectedPoint=u_matrix*vec4(a_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float distance_ratio=u_pitch_with_map ?\ncamera_to_anchor_distance/u_camera_to_center_distance :\nu_camera_to_center_distance/camera_to_anchor_distance;highp float perspective_ratio=clamp(0.5+0.5*distance_ratio,0.0,4.0);size*=perspective_ratio;float fontScale=u_is_text ? size/24.0 : size;highp float symbol_rotation=0.0;if (u_rotate_symbol) {vec4 offsetProjectedPoint=u_matrix*vec4(a_pos+vec2(1,0),0,1);vec2 a=projectedPoint.xy/projectedPoint.w;vec2 b=offsetProjectedPoint.xy/offsetProjectedPoint.w;symbol_rotation=atan((b.y-a.y)/u_aspect_ratio,b.x-a.x);}highp float angle_sin=sin(segment_angle+symbol_rotation);highp float angle_cos=cos(segment_angle+symbol_rotation);mat2 rotation_matrix=mat2(angle_cos,-1.0*angle_sin,angle_sin,angle_cos);vec4 projected_pos=u_label_plane_matrix*vec4(a_projected_pos.xy,0.0,1.0);gl_Position=u_gl_coord_matrix*vec4(projected_pos.xy/projected_pos.w+rotation_matrix*(a_offset/32.0*fontScale),0.0,1.0);float gamma_scale=gl_Position.w;vec2 tex=a_tex/u_texsize;vec2 fade_opacity=unpack_opacity(a_fade_opacity);float fade_change=fade_opacity[1] > 0.5 ? u_fade_change :-u_fade_change;float interpolated_fade_opacity=max(0.0,min(1.0,fade_opacity[0]+fade_change));v_data0=vec2(tex.x,tex.y);v_data1=vec3(gamma_scale,size,interpolated_fade_opacity);}";

var prelude = compile(preludeFrag, preludeVert);
var background = compile(backgroundFrag, backgroundVert);
var backgroundPattern = compile(backgroundPatternFrag, backgroundPatternVert);
var circle = compile(circleFrag, circleVert);
var clippingMask = compile(clippingMaskFrag, clippingMaskVert);
var heatmap = compile(heatmapFrag, heatmapVert);
var heatmapTexture = compile(heatmapTextureFrag, heatmapTextureVert);
var collisionBox = compile(collisionBoxFrag, collisionBoxVert);
var collisionCircle = compile(collisionCircleFrag, collisionCircleVert);
var debug = compile(debugFrag, debugVert);
var fill = compile(fillFrag, fillVert);
var fillOutline = compile(fillOutlineFrag, fillOutlineVert);
var fillOutlinePattern = compile(fillOutlinePatternFrag, fillOutlinePatternVert);
var fillPattern = compile(fillPatternFrag, fillPatternVert);
var fillExtrusion = compile(fillExtrusionFrag, fillExtrusionVert);
var fillExtrusionPattern = compile(fillExtrusionPatternFrag, fillExtrusionPatternVert);
var extrusionTexture = compile(extrusionTextureFrag, extrusionTextureVert);
var hillshadePrepare = compile(hillshadePrepareFrag, hillshadePrepareVert);
var hillshade = compile(hillshadeFrag, hillshadeVert);
var line = compile(lineFrag, lineVert);
var lineGradient = compile(lineGradientFrag, lineGradientVert);
var linePattern = compile(linePatternFrag, linePatternVert);
var lineSDF = compile(lineSDFFrag, lineSDFVert);
var raster = compile(rasterFrag, rasterVert);
var symbolIcon = compile(symbolIconFrag, symbolIconVert);
var symbolSDF = compile(symbolSDFFrag, symbolSDFVert);
function compile(fragmentSource, vertexSource) {
    var re = /#pragma mapbox: ([\w]+) ([\w]+) ([\w]+) ([\w]+)/g;
    var fragmentPragmas = {};
    fragmentSource = fragmentSource.replace(re, function (match, operation, precision, type, name) {
        fragmentPragmas[name] = true;
        if (operation === 'define') {
            return '\n#ifndef HAS_UNIFORM_u_' + name + '\nvarying ' + precision + ' ' + type + ' ' + name + ';\n#else\nuniform ' + precision + ' ' + type + ' u_' + name + ';\n#endif\n';
        } else {
            return '\n#ifdef HAS_UNIFORM_u_' + name + '\n    ' + precision + ' ' + type + ' ' + name + ' = u_' + name + ';\n#endif\n';
        }
    });
    vertexSource = vertexSource.replace(re, function (match, operation, precision, type, name) {
        var attrType = type === 'float' ? 'vec2' : 'vec4';
        var unpackType = name.match(/color/) ? 'color' : attrType;
        if (fragmentPragmas[name]) {
            if (operation === 'define') {
                return '\n#ifndef HAS_UNIFORM_u_' + name + '\nuniform lowp float a_' + name + '_t;\nattribute ' + precision + ' ' + attrType + ' a_' + name + ';\nvarying ' + precision + ' ' + type + ' ' + name + ';\n#else\nuniform ' + precision + ' ' + type + ' u_' + name + ';\n#endif\n';
            } else {
                if (unpackType === 'vec4') {
                    return '\n#ifndef HAS_UNIFORM_u_' + name + '\n    ' + name + ' = a_' + name + ';\n#else\n    ' + precision + ' ' + type + ' ' + name + ' = u_' + name + ';\n#endif\n';
                } else {
                    return '\n#ifndef HAS_UNIFORM_u_' + name + '\n    ' + name + ' = unpack_mix_' + unpackType + '(a_' + name + ', a_' + name + '_t);\n#else\n    ' + precision + ' ' + type + ' ' + name + ' = u_' + name + ';\n#endif\n';
                }
            }
        } else {
            if (operation === 'define') {
                return '\n#ifndef HAS_UNIFORM_u_' + name + '\nuniform lowp float a_' + name + '_t;\nattribute ' + precision + ' ' + attrType + ' a_' + name + ';\n#else\nuniform ' + precision + ' ' + type + ' u_' + name + ';\n#endif\n';
            } else {
                if (unpackType === 'vec4') {
                    return '\n#ifndef HAS_UNIFORM_u_' + name + '\n    ' + precision + ' ' + type + ' ' + name + ' = a_' + name + ';\n#else\n    ' + precision + ' ' + type + ' ' + name + ' = u_' + name + ';\n#endif\n';
                } else {
                    return '\n#ifndef HAS_UNIFORM_u_' + name + '\n    ' + precision + ' ' + type + ' ' + name + ' = unpack_mix_' + unpackType + '(a_' + name + ', a_' + name + '_t);\n#else\n    ' + precision + ' ' + type + ' ' + name + ' = u_' + name + ';\n#endif\n';
                }
            }
        }
    });
    return {
        fragmentSource: fragmentSource,
        vertexSource: vertexSource
    };
}

var shaders = /*#__PURE__*/Object.freeze({
prelude: prelude,
background: background,
backgroundPattern: backgroundPattern,
circle: circle,
clippingMask: clippingMask,
heatmap: heatmap,
heatmapTexture: heatmapTexture,
collisionBox: collisionBox,
collisionCircle: collisionCircle,
debug: debug,
fill: fill,
fillOutline: fillOutline,
fillOutlinePattern: fillOutlinePattern,
fillPattern: fillPattern,
fillExtrusion: fillExtrusion,
fillExtrusionPattern: fillExtrusionPattern,
extrusionTexture: extrusionTexture,
hillshadePrepare: hillshadePrepare,
hillshade: hillshade,
line: line,
lineGradient: lineGradient,
linePattern: linePattern,
lineSDF: lineSDF,
raster: raster,
symbolIcon: symbolIcon,
symbolSDF: symbolSDF
});

var VertexArrayObject = function VertexArrayObject() {
    this.boundProgram = null;
    this.boundLayoutVertexBuffer = null;
    this.boundPaintVertexBuffers = [];
    this.boundIndexBuffer = null;
    this.boundVertexOffset = null;
    this.boundDynamicVertexBuffer = null;
    this.vao = null;
};
VertexArrayObject.prototype.bind = function bind(context, program, layoutVertexBuffer, paintVertexBuffers, indexBuffer, vertexOffset, dynamicVertexBuffer, dynamicVertexBuffer2) {
    var this$1 = this;
    this.context = context;
    var paintBuffersDiffer = this.boundPaintVertexBuffers.length !== paintVertexBuffers.length;
    for (var i = 0; !paintBuffersDiffer && i < paintVertexBuffers.length; i++) {
        if (this$1.boundPaintVertexBuffers[i] !== paintVertexBuffers[i]) {
            paintBuffersDiffer = true;
        }
    }
    var isFreshBindRequired = !this.vao || this.boundProgram !== program || this.boundLayoutVertexBuffer !== layoutVertexBuffer || paintBuffersDiffer || this.boundIndexBuffer !== indexBuffer || this.boundVertexOffset !== vertexOffset || this.boundDynamicVertexBuffer !== dynamicVertexBuffer || this.boundDynamicVertexBuffer2 !== dynamicVertexBuffer2;
    if (!context.extVertexArrayObject || isFreshBindRequired) {
        this.freshBind(program, layoutVertexBuffer, paintVertexBuffers, indexBuffer, vertexOffset, dynamicVertexBuffer, dynamicVertexBuffer2);
    } else {
        context.bindVertexArrayOES.set(this.vao);
        if (dynamicVertexBuffer) {
            dynamicVertexBuffer.bind();
        }
        if (indexBuffer && indexBuffer.dynamicDraw) {
            indexBuffer.bind();
        }
        if (dynamicVertexBuffer2) {
            dynamicVertexBuffer2.bind();
        }
    }
};
VertexArrayObject.prototype.freshBind = function freshBind(program, layoutVertexBuffer, paintVertexBuffers, indexBuffer, vertexOffset, dynamicVertexBuffer, dynamicVertexBuffer2) {
    var numPrevAttributes;
    var numNextAttributes = program.numAttributes;
    var context = this.context;
    var gl = context.gl;
    if (context.extVertexArrayObject) {
        if (this.vao) {
            this.destroy();
        }
        this.vao = context.extVertexArrayObject.createVertexArrayOES();
        context.bindVertexArrayOES.set(this.vao);
        numPrevAttributes = 0;
        this.boundProgram = program;
        this.boundLayoutVertexBuffer = layoutVertexBuffer;
        this.boundPaintVertexBuffers = paintVertexBuffers;
        this.boundIndexBuffer = indexBuffer;
        this.boundVertexOffset = vertexOffset;
        this.boundDynamicVertexBuffer = dynamicVertexBuffer;
        this.boundDynamicVertexBuffer2 = dynamicVertexBuffer2;
    } else {
        numPrevAttributes = context.currentNumAttributes || 0;
        for (var i = numNextAttributes; i < numPrevAttributes; i++) {
            gl.disableVertexAttribArray(i);
        }
    }
    layoutVertexBuffer.enableAttributes(gl, program);
    for (var i$1 = 0, list = paintVertexBuffers; i$1 < list.length; i$1 += 1) {
        var vertexBuffer = list[i$1];
        vertexBuffer.enableAttributes(gl, program);
    }
    if (dynamicVertexBuffer) {
        dynamicVertexBuffer.enableAttributes(gl, program);
    }
    if (dynamicVertexBuffer2) {
        dynamicVertexBuffer2.enableAttributes(gl, program);
    }
    layoutVertexBuffer.bind();
    layoutVertexBuffer.setVertexAttribPointers(gl, program, vertexOffset);
    for (var i$2 = 0, list$1 = paintVertexBuffers; i$2 < list$1.length; i$2 += 1) {
        var vertexBuffer$1 = list$1[i$2];
        vertexBuffer$1.bind();
        vertexBuffer$1.setVertexAttribPointers(gl, program, vertexOffset);
    }
    if (dynamicVertexBuffer) {
        dynamicVertexBuffer.bind();
        dynamicVertexBuffer.setVertexAttribPointers(gl, program, vertexOffset);
    }
    if (indexBuffer) {
        indexBuffer.bind();
    }
    if (dynamicVertexBuffer2) {
        dynamicVertexBuffer2.bind();
        dynamicVertexBuffer2.setVertexAttribPointers(gl, program, vertexOffset);
    }
    context.currentNumAttributes = numNextAttributes;
};
VertexArrayObject.prototype.destroy = function destroy() {
    if (this.vao) {
        this.context.extVertexArrayObject.deleteVertexArrayOES(this.vao);
        this.vao = null;
    }
};

var Program$1 = function Program(context, source, configuration, fixedUniforms, showOverdrawInspector) {
    var this$1 = this;
    var gl = context.gl;
    this.program = gl.createProgram();
    var defines = configuration.defines().concat('#define DEVICE_PIXEL_RATIO ' + __chunk_1.browser.devicePixelRatio.toFixed(1));
    if (showOverdrawInspector) {
        defines.push('#define OVERDRAW_INSPECTOR;');
    }
    var fragmentSource = defines.concat(prelude.fragmentSource, source.fragmentSource).join('\n');
    var vertexSource = defines.concat(prelude.vertexSource, source.vertexSource).join('\n');
    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShader, fragmentSource);
    gl.compileShader(fragmentShader);
    gl.attachShader(this.program, fragmentShader);
    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertexShader, vertexSource);
    gl.compileShader(vertexShader);
    gl.attachShader(this.program, vertexShader);
    var layoutAttributes = configuration.layoutAttributes || [];
    for (var i = 0; i < layoutAttributes.length; i++) {
        gl.bindAttribLocation(this$1.program, i, layoutAttributes[i].name);
    }
    gl.linkProgram(this.program);
    this.numAttributes = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);
    this.attributes = {};
    var uniformLocations = {};
    for (var i$1 = 0; i$1 < this.numAttributes; i$1++) {
        var attribute = gl.getActiveAttrib(this$1.program, i$1);
        if (attribute) {
            this$1.attributes[attribute.name] = gl.getAttribLocation(this$1.program, attribute.name);
        }
    }
    var numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);
    for (var i$2 = 0; i$2 < numUniforms; i$2++) {
        var uniform = gl.getActiveUniform(this$1.program, i$2);
        if (uniform) {
            uniformLocations[uniform.name] = gl.getUniformLocation(this$1.program, uniform.name);
        }
    }
    this.fixedUniforms = fixedUniforms(context, uniformLocations);
    this.binderUniforms = configuration.getUniforms(context, uniformLocations);
};
Program$1.prototype.draw = function draw(context, drawMode, depthMode, stencilMode, colorMode, cullFaceMode, uniformValues, layerID, layoutVertexBuffer, indexBuffer, segments, currentProperties, zoom, configuration, dynamicLayoutBuffer, dynamicLayoutBuffer2) {
    var this$1 = this;
    var obj;
    var gl = context.gl;
    context.program.set(this.program);
    context.setDepthMode(depthMode);
    context.setStencilMode(stencilMode);
    context.setColorMode(colorMode);
    context.setCullFace(cullFaceMode);
    for (var name in this$1.fixedUniforms) {
        this$1.fixedUniforms[name].set(uniformValues[name]);
    }
    if (configuration) {
        configuration.setUniforms(context, this.binderUniforms, currentProperties, { zoom: zoom });
    }
    var primitiveSize = (obj = {}, obj[gl.LINES] = 2, obj[gl.TRIANGLES] = 3, obj[gl.LINE_STRIP] = 1, obj)[drawMode];
    for (var i = 0, list = segments.get(); i < list.length; i += 1) {
        var segment = list[i];
        var vaos = segment.vaos || (segment.vaos = {});
        var vao = vaos[layerID] || (vaos[layerID] = new VertexArrayObject());
        vao.bind(context, this$1, layoutVertexBuffer, configuration ? configuration.getPaintVertexBuffers() : [], indexBuffer, segment.vertexOffset, dynamicLayoutBuffer, dynamicLayoutBuffer2);
        gl.drawElements(drawMode, segment.primitiveLength * primitiveSize, gl.UNSIGNED_SHORT, segment.primitiveOffset * primitiveSize * 2);
    }
};

function patternUniformValues(crossfade, painter, tile) {
    var tileRatio = 1 / pixelsToTileUnits(tile, 1, painter.transform.tileZoom);
    var numTiles = Math.pow(2, tile.tileID.overscaledZ);
    var tileSizeAtNearestZoom = tile.tileSize * Math.pow(2, painter.transform.tileZoom) / numTiles;
    var pixelX = tileSizeAtNearestZoom * (tile.tileID.canonical.x + tile.tileID.wrap * numTiles);
    var pixelY = tileSizeAtNearestZoom * tile.tileID.canonical.y;
    return {
        'u_image': 0,
        'u_texsize': tile.imageAtlasTexture.size,
        'u_scale': [
            __chunk_1.browser.devicePixelRatio,
            tileRatio,
            crossfade.fromScale,
            crossfade.toScale
        ],
        'u_fade': crossfade.t,
        'u_pixel_coord_upper': [
            pixelX >> 16,
            pixelY >> 16
        ],
        'u_pixel_coord_lower': [
            pixelX & 65535,
            pixelY & 65535
        ]
    };
}
function bgPatternUniformValues(image, crossfade, painter, tile) {
    var imagePosA = painter.imageManager.getPattern(image.from);
    var imagePosB = painter.imageManager.getPattern(image.to);
    var ref = painter.imageManager.getPixelSize();
    var width = ref.width;
    var height = ref.height;
    var numTiles = Math.pow(2, tile.tileID.overscaledZ);
    var tileSizeAtNearestZoom = tile.tileSize * Math.pow(2, painter.transform.tileZoom) / numTiles;
    var pixelX = tileSizeAtNearestZoom * (tile.tileID.canonical.x + tile.tileID.wrap * numTiles);
    var pixelY = tileSizeAtNearestZoom * tile.tileID.canonical.y;
    return {
        'u_image': 0,
        'u_pattern_tl_a': imagePosA.tl,
        'u_pattern_br_a': imagePosA.br,
        'u_pattern_tl_b': imagePosB.tl,
        'u_pattern_br_b': imagePosB.br,
        'u_texsize': [
            width,
            height
        ],
        'u_mix': crossfade.t,
        'u_pattern_size_a': imagePosA.displaySize,
        'u_pattern_size_b': imagePosB.displaySize,
        'u_scale_a': crossfade.fromScale,
        'u_scale_b': crossfade.toScale,
        'u_tile_units_to_pixels': 1 / pixelsToTileUnits(tile, 1, painter.transform.tileZoom),
        'u_pixel_coord_upper': [
            pixelX >> 16,
            pixelY >> 16
        ],
        'u_pixel_coord_lower': [
            pixelX & 65535,
            pixelY & 65535
        ]
    };
}

var fillExtrusionUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_lightpos': new __chunk_1.Uniform3f(context, locations.u_lightpos),
        'u_lightintensity': new __chunk_1.Uniform1f(context, locations.u_lightintensity),
        'u_lightcolor': new __chunk_1.Uniform3f(context, locations.u_lightcolor),
        'u_vertical_gradient': new __chunk_1.Uniform1f(context, locations.u_vertical_gradient)
    };
};
var fillExtrusionPatternUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_lightpos': new __chunk_1.Uniform3f(context, locations.u_lightpos),
        'u_lightintensity': new __chunk_1.Uniform1f(context, locations.u_lightintensity),
        'u_lightcolor': new __chunk_1.Uniform3f(context, locations.u_lightcolor),
        'u_vertical_gradient': new __chunk_1.Uniform1f(context, locations.u_vertical_gradient),
        'u_height_factor': new __chunk_1.Uniform1f(context, locations.u_height_factor),
        'u_image': new __chunk_1.Uniform1i(context, locations.u_image),
        'u_texsize': new __chunk_1.Uniform2f(context, locations.u_texsize),
        'u_pixel_coord_upper': new __chunk_1.Uniform2f(context, locations.u_pixel_coord_upper),
        'u_pixel_coord_lower': new __chunk_1.Uniform2f(context, locations.u_pixel_coord_lower),
        'u_scale': new __chunk_1.Uniform4f(context, locations.u_scale),
        'u_fade': new __chunk_1.Uniform1f(context, locations.u_fade)
    };
};
var extrusionTextureUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_world': new __chunk_1.Uniform2f(context, locations.u_world),
        'u_image': new __chunk_1.Uniform1i(context, locations.u_image),
        'u_opacity': new __chunk_1.Uniform1f(context, locations.u_opacity)
    };
};
var fillExtrusionUniformValues = function (matrix, painter, shouldUseVerticalGradient) {
    var light = painter.style.light;
    var _lp = light.properties.get('position');
    var lightPos = [
        _lp.x,
        _lp.y,
        _lp.z
    ];
    var lightMat = __chunk_1.create$2();
    if (light.properties.get('anchor') === 'viewport') {
        __chunk_1.fromRotation(lightMat, -painter.transform.angle);
    }
    __chunk_1.transformMat3(lightPos, lightPos, lightMat);
    var lightColor = light.properties.get('color');
    return {
        'u_matrix': matrix,
        'u_lightpos': lightPos,
        'u_lightintensity': light.properties.get('intensity'),
        'u_lightcolor': [
            lightColor.r,
            lightColor.g,
            lightColor.b
        ],
        'u_vertical_gradient': +shouldUseVerticalGradient
    };
};
var fillExtrusionPatternUniformValues = function (matrix, painter, shouldUseVerticalGradient, coord, crossfade, tile) {
    return __chunk_1.extend(fillExtrusionUniformValues(matrix, painter, shouldUseVerticalGradient), patternUniformValues(crossfade, painter, tile), { 'u_height_factor': -Math.pow(2, coord.overscaledZ) / tile.tileSize / 8 });
};
var extrusionTextureUniformValues = function (painter, opacity, textureUnit) {
    var matrix = __chunk_1.create();
    __chunk_1.ortho(matrix, 0, painter.width, painter.height, 0, 0, 1);
    var gl = painter.context.gl;
    return {
        'u_matrix': matrix,
        'u_world': [
            gl.drawingBufferWidth,
            gl.drawingBufferHeight
        ],
        'u_image': textureUnit,
        'u_opacity': opacity
    };
};

var fillUniforms = function (context, locations) {
    return { 'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix) };
};
var fillPatternUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_image': new __chunk_1.Uniform1i(context, locations.u_image),
        'u_texsize': new __chunk_1.Uniform2f(context, locations.u_texsize),
        'u_pixel_coord_upper': new __chunk_1.Uniform2f(context, locations.u_pixel_coord_upper),
        'u_pixel_coord_lower': new __chunk_1.Uniform2f(context, locations.u_pixel_coord_lower),
        'u_scale': new __chunk_1.Uniform4f(context, locations.u_scale),
        'u_fade': new __chunk_1.Uniform1f(context, locations.u_fade)
    };
};
var fillOutlineUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_world': new __chunk_1.Uniform2f(context, locations.u_world)
    };
};
var fillOutlinePatternUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_world': new __chunk_1.Uniform2f(context, locations.u_world),
        'u_image': new __chunk_1.Uniform1i(context, locations.u_image),
        'u_texsize': new __chunk_1.Uniform2f(context, locations.u_texsize),
        'u_pixel_coord_upper': new __chunk_1.Uniform2f(context, locations.u_pixel_coord_upper),
        'u_pixel_coord_lower': new __chunk_1.Uniform2f(context, locations.u_pixel_coord_lower),
        'u_scale': new __chunk_1.Uniform4f(context, locations.u_scale),
        'u_fade': new __chunk_1.Uniform1f(context, locations.u_fade)
    };
};
var fillUniformValues = function (matrix) {
    return { 'u_matrix': matrix };
};
var fillPatternUniformValues = function (matrix, painter, crossfade, tile) {
    return __chunk_1.extend(fillUniformValues(matrix), patternUniformValues(crossfade, painter, tile));
};
var fillOutlineUniformValues = function (matrix, drawingBufferSize) {
    return {
        'u_matrix': matrix,
        'u_world': drawingBufferSize
    };
};
var fillOutlinePatternUniformValues = function (matrix, painter, crossfade, tile, drawingBufferSize) {
    return __chunk_1.extend(fillPatternUniformValues(matrix, painter, crossfade, tile), { 'u_world': drawingBufferSize });
};

var circleUniforms = function (context, locations) {
    return {
        'u_camera_to_center_distance': new __chunk_1.Uniform1f(context, locations.u_camera_to_center_distance),
        'u_scale_with_map': new __chunk_1.Uniform1i(context, locations.u_scale_with_map),
        'u_pitch_with_map': new __chunk_1.Uniform1i(context, locations.u_pitch_with_map),
        'u_extrude_scale': new __chunk_1.Uniform2f(context, locations.u_extrude_scale),
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix)
    };
};
var circleUniformValues = function (painter, coord, tile, layer) {
    var transform = painter.transform;
    var pitchWithMap, extrudeScale;
    if (layer.paint.get('circle-pitch-alignment') === 'map') {
        var pixelRatio = pixelsToTileUnits(tile, 1, transform.zoom);
        pitchWithMap = true;
        extrudeScale = [
            pixelRatio,
            pixelRatio
        ];
    } else {
        pitchWithMap = false;
        extrudeScale = transform.pixelsToGLUnits;
    }
    return {
        'u_camera_to_center_distance': transform.cameraToCenterDistance,
        'u_scale_with_map': +(layer.paint.get('circle-pitch-scale') === 'map'),
        'u_matrix': painter.translatePosMatrix(coord.posMatrix, tile, layer.paint.get('circle-translate'), layer.paint.get('circle-translate-anchor')),
        'u_pitch_with_map': +pitchWithMap,
        'u_extrude_scale': extrudeScale
    };
};

var collisionUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_camera_to_center_distance': new __chunk_1.Uniform1f(context, locations.u_camera_to_center_distance),
        'u_pixels_to_tile_units': new __chunk_1.Uniform1f(context, locations.u_pixels_to_tile_units),
        'u_extrude_scale': new __chunk_1.Uniform2f(context, locations.u_extrude_scale),
        'u_overscale_factor': new __chunk_1.Uniform1f(context, locations.u_overscale_factor)
    };
};
var collisionUniformValues = function (matrix, transform, tile) {
    var pixelRatio = pixelsToTileUnits(tile, 1, transform.zoom);
    var scale = Math.pow(2, transform.zoom - tile.tileID.overscaledZ);
    var overscaleFactor = tile.tileID.overscaleFactor();
    return {
        'u_matrix': matrix,
        'u_camera_to_center_distance': transform.cameraToCenterDistance,
        'u_pixels_to_tile_units': pixelRatio,
        'u_extrude_scale': [
            transform.pixelsToGLUnits[0] / (pixelRatio * scale),
            transform.pixelsToGLUnits[1] / (pixelRatio * scale)
        ],
        'u_overscale_factor': overscaleFactor
    };
};

var debugUniforms = function (context, locations) {
    return {
        'u_color': new __chunk_1.UniformColor(context, locations.u_color),
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix)
    };
};
var debugUniformValues = function (matrix, color) {
    return {
        'u_matrix': matrix,
        'u_color': color
    };
};

var clippingMaskUniforms = function (context, locations) {
    return { 'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix) };
};
var clippingMaskUniformValues = function (matrix) {
    return { 'u_matrix': matrix };
};

var heatmapUniforms = function (context, locations) {
    return {
        'u_extrude_scale': new __chunk_1.Uniform1f(context, locations.u_extrude_scale),
        'u_intensity': new __chunk_1.Uniform1f(context, locations.u_intensity),
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix)
    };
};
var heatmapTextureUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_world': new __chunk_1.Uniform2f(context, locations.u_world),
        'u_image': new __chunk_1.Uniform1i(context, locations.u_image),
        'u_color_ramp': new __chunk_1.Uniform1i(context, locations.u_color_ramp),
        'u_opacity': new __chunk_1.Uniform1f(context, locations.u_opacity)
    };
};
var heatmapUniformValues = function (matrix, tile, zoom, intensity) {
    return {
        'u_matrix': matrix,
        'u_extrude_scale': pixelsToTileUnits(tile, 1, zoom),
        'u_intensity': intensity
    };
};
var heatmapTextureUniformValues = function (painter, layer, textureUnit, colorRampUnit) {
    var matrix = __chunk_1.create();
    __chunk_1.ortho(matrix, 0, painter.width, painter.height, 0, 0, 1);
    var gl = painter.context.gl;
    return {
        'u_matrix': matrix,
        'u_world': [
            gl.drawingBufferWidth,
            gl.drawingBufferHeight
        ],
        'u_image': textureUnit,
        'u_color_ramp': colorRampUnit,
        'u_opacity': layer.paint.get('heatmap-opacity')
    };
};

var hillshadeUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_image': new __chunk_1.Uniform1i(context, locations.u_image),
        'u_latrange': new __chunk_1.Uniform2f(context, locations.u_latrange),
        'u_light': new __chunk_1.Uniform2f(context, locations.u_light),
        'u_shadow': new __chunk_1.UniformColor(context, locations.u_shadow),
        'u_highlight': new __chunk_1.UniformColor(context, locations.u_highlight),
        'u_accent': new __chunk_1.UniformColor(context, locations.u_accent)
    };
};
var hillshadePrepareUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_image': new __chunk_1.Uniform1i(context, locations.u_image),
        'u_dimension': new __chunk_1.Uniform2f(context, locations.u_dimension),
        'u_zoom': new __chunk_1.Uniform1f(context, locations.u_zoom),
        'u_maxzoom': new __chunk_1.Uniform1f(context, locations.u_maxzoom)
    };
};
var hillshadeUniformValues = function (painter, tile, layer) {
    var shadow = layer.paint.get('hillshade-shadow-color');
    var highlight = layer.paint.get('hillshade-highlight-color');
    var accent = layer.paint.get('hillshade-accent-color');
    var azimuthal = layer.paint.get('hillshade-illumination-direction') * (Math.PI / 180);
    if (layer.paint.get('hillshade-illumination-anchor') === 'viewport') {
        azimuthal -= painter.transform.angle;
    }
    return {
        'u_matrix': painter.transform.calculatePosMatrix(tile.tileID.toUnwrapped(), true),
        'u_image': 0,
        'u_latrange': getTileLatRange(painter, tile.tileID),
        'u_light': [
            layer.paint.get('hillshade-exaggeration'),
            azimuthal
        ],
        'u_shadow': shadow,
        'u_highlight': highlight,
        'u_accent': accent
    };
};
var hillshadeUniformPrepareValues = function (tile, maxzoom) {
    var tileSize = tile.dem.dim;
    var matrix = __chunk_1.create();
    __chunk_1.ortho(matrix, 0, __chunk_1.EXTENT, -__chunk_1.EXTENT, 0, 0, 1);
    __chunk_1.translate(matrix, matrix, [
        0,
        -__chunk_1.EXTENT,
        0
    ]);
    return {
        'u_matrix': matrix,
        'u_image': 1,
        'u_dimension': [
            tileSize * 2,
            tileSize * 2
        ],
        'u_zoom': tile.tileID.overscaledZ,
        'u_maxzoom': maxzoom
    };
};
function getTileLatRange(painter, tileID) {
    var coordinate0 = tileID.toCoordinate();
    var coordinate1 = new __chunk_1.Coordinate(coordinate0.column, coordinate0.row + 1, coordinate0.zoom);
    return [
        painter.transform.coordinateLocation(coordinate0).lat,
        painter.transform.coordinateLocation(coordinate1).lat
    ];
}

var lineUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_ratio': new __chunk_1.Uniform1f(context, locations.u_ratio),
        'u_gl_units_to_pixels': new __chunk_1.Uniform2f(context, locations.u_gl_units_to_pixels)
    };
};
var lineGradientUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_ratio': new __chunk_1.Uniform1f(context, locations.u_ratio),
        'u_gl_units_to_pixels': new __chunk_1.Uniform2f(context, locations.u_gl_units_to_pixels),
        'u_image': new __chunk_1.Uniform1i(context, locations.u_image)
    };
};
var linePatternUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_texsize': new __chunk_1.Uniform2f(context, locations.u_texsize),
        'u_ratio': new __chunk_1.Uniform1f(context, locations.u_ratio),
        'u_image': new __chunk_1.Uniform1i(context, locations.u_image),
        'u_gl_units_to_pixels': new __chunk_1.Uniform2f(context, locations.u_gl_units_to_pixels),
        'u_scale': new __chunk_1.Uniform4f(context, locations.u_scale),
        'u_fade': new __chunk_1.Uniform1f(context, locations.u_fade)
    };
};
var lineSDFUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_ratio': new __chunk_1.Uniform1f(context, locations.u_ratio),
        'u_gl_units_to_pixels': new __chunk_1.Uniform2f(context, locations.u_gl_units_to_pixels),
        'u_patternscale_a': new __chunk_1.Uniform2f(context, locations.u_patternscale_a),
        'u_patternscale_b': new __chunk_1.Uniform2f(context, locations.u_patternscale_b),
        'u_sdfgamma': new __chunk_1.Uniform1f(context, locations.u_sdfgamma),
        'u_image': new __chunk_1.Uniform1i(context, locations.u_image),
        'u_tex_y_a': new __chunk_1.Uniform1f(context, locations.u_tex_y_a),
        'u_tex_y_b': new __chunk_1.Uniform1f(context, locations.u_tex_y_b),
        'u_mix': new __chunk_1.Uniform1f(context, locations.u_mix)
    };
};
var lineUniformValues = function (painter, tile, layer) {
    var transform = painter.transform;
    return {
        'u_matrix': calculateMatrix(painter, tile, layer),
        'u_ratio': 1 / pixelsToTileUnits(tile, 1, transform.zoom),
        'u_gl_units_to_pixels': [
            1 / transform.pixelsToGLUnits[0],
            1 / transform.pixelsToGLUnits[1]
        ]
    };
};
var lineGradientUniformValues = function (painter, tile, layer) {
    return __chunk_1.extend(lineUniformValues(painter, tile, layer), { 'u_image': 0 });
};
var linePatternUniformValues = function (painter, tile, layer, crossfade) {
    var transform = painter.transform;
    var tileZoomRatio = calculateTileRatio(tile, transform);
    return {
        'u_matrix': calculateMatrix(painter, tile, layer),
        'u_texsize': tile.imageAtlasTexture.size,
        'u_ratio': 1 / pixelsToTileUnits(tile, 1, transform.zoom),
        'u_image': 0,
        'u_scale': [
            __chunk_1.browser.devicePixelRatio,
            tileZoomRatio,
            crossfade.fromScale,
            crossfade.toScale
        ],
        'u_fade': crossfade.t,
        'u_gl_units_to_pixels': [
            1 / transform.pixelsToGLUnits[0],
            1 / transform.pixelsToGLUnits[1]
        ]
    };
};
var lineSDFUniformValues = function (painter, tile, layer, dasharray, crossfade) {
    var transform = painter.transform;
    var lineAtlas = painter.lineAtlas;
    var tileRatio = calculateTileRatio(tile, transform);
    var round = layer.layout.get('line-cap') === 'round';
    var posA = lineAtlas.getDash(dasharray.from, round);
    var posB = lineAtlas.getDash(dasharray.to, round);
    var widthA = posA.width * crossfade.fromScale;
    var widthB = posB.width * crossfade.toScale;
    return __chunk_1.extend(lineUniformValues(painter, tile, layer), {
        'u_patternscale_a': [
            tileRatio / widthA,
            -posA.height / 2
        ],
        'u_patternscale_b': [
            tileRatio / widthB,
            -posB.height / 2
        ],
        'u_sdfgamma': lineAtlas.width / (Math.min(widthA, widthB) * 256 * __chunk_1.browser.devicePixelRatio) / 2,
        'u_image': 0,
        'u_tex_y_a': posA.y,
        'u_tex_y_b': posB.y,
        'u_mix': crossfade.t
    });
};
function calculateTileRatio(tile, transform) {
    return 1 / pixelsToTileUnits(tile, 1, transform.tileZoom);
}
function calculateMatrix(painter, tile, layer) {
    return painter.translatePosMatrix(tile.tileID.posMatrix, tile, layer.paint.get('line-translate'), layer.paint.get('line-translate-anchor'));
}

var rasterUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_tl_parent': new __chunk_1.Uniform2f(context, locations.u_tl_parent),
        'u_scale_parent': new __chunk_1.Uniform1f(context, locations.u_scale_parent),
        'u_buffer_scale': new __chunk_1.Uniform1f(context, locations.u_buffer_scale),
        'u_fade_t': new __chunk_1.Uniform1f(context, locations.u_fade_t),
        'u_opacity': new __chunk_1.Uniform1f(context, locations.u_opacity),
        'u_image0': new __chunk_1.Uniform1i(context, locations.u_image0),
        'u_image1': new __chunk_1.Uniform1i(context, locations.u_image1),
        'u_brightness_low': new __chunk_1.Uniform1f(context, locations.u_brightness_low),
        'u_brightness_high': new __chunk_1.Uniform1f(context, locations.u_brightness_high),
        'u_saturation_factor': new __chunk_1.Uniform1f(context, locations.u_saturation_factor),
        'u_contrast_factor': new __chunk_1.Uniform1f(context, locations.u_contrast_factor),
        'u_spin_weights': new __chunk_1.Uniform3f(context, locations.u_spin_weights)
    };
};
var rasterUniformValues = function (matrix, parentTL, parentScaleBy, fade, layer) {
    return {
        'u_matrix': matrix,
        'u_tl_parent': parentTL,
        'u_scale_parent': parentScaleBy,
        'u_buffer_scale': 1,
        'u_fade_t': fade.mix,
        'u_opacity': fade.opacity * layer.paint.get('raster-opacity'),
        'u_image0': 0,
        'u_image1': 1,
        'u_brightness_low': layer.paint.get('raster-brightness-min'),
        'u_brightness_high': layer.paint.get('raster-brightness-max'),
        'u_saturation_factor': saturationFactor(layer.paint.get('raster-saturation')),
        'u_contrast_factor': contrastFactor(layer.paint.get('raster-contrast')),
        'u_spin_weights': spinWeights(layer.paint.get('raster-hue-rotate'))
    };
};
function spinWeights(angle) {
    angle *= Math.PI / 180;
    var s = Math.sin(angle);
    var c = Math.cos(angle);
    return [
        (2 * c + 1) / 3,
        (-Math.sqrt(3) * s - c + 1) / 3,
        (Math.sqrt(3) * s - c + 1) / 3
    ];
}
function contrastFactor(contrast) {
    return contrast > 0 ? 1 / (1 - contrast) : 1 + contrast;
}
function saturationFactor(saturation) {
    return saturation > 0 ? 1 - 1 / (1.001 - saturation) : -saturation;
}

var symbolIconUniforms = function (context, locations) {
    return {
        'u_is_size_zoom_constant': new __chunk_1.Uniform1i(context, locations.u_is_size_zoom_constant),
        'u_is_size_feature_constant': new __chunk_1.Uniform1i(context, locations.u_is_size_feature_constant),
        'u_size_t': new __chunk_1.Uniform1f(context, locations.u_size_t),
        'u_size': new __chunk_1.Uniform1f(context, locations.u_size),
        'u_camera_to_center_distance': new __chunk_1.Uniform1f(context, locations.u_camera_to_center_distance),
        'u_pitch': new __chunk_1.Uniform1f(context, locations.u_pitch),
        'u_rotate_symbol': new __chunk_1.Uniform1i(context, locations.u_rotate_symbol),
        'u_aspect_ratio': new __chunk_1.Uniform1f(context, locations.u_aspect_ratio),
        'u_fade_change': new __chunk_1.Uniform1f(context, locations.u_fade_change),
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_label_plane_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_label_plane_matrix),
        'u_gl_coord_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_gl_coord_matrix),
        'u_is_text': new __chunk_1.Uniform1f(context, locations.u_is_text),
        'u_pitch_with_map': new __chunk_1.Uniform1i(context, locations.u_pitch_with_map),
        'u_texsize': new __chunk_1.Uniform2f(context, locations.u_texsize),
        'u_texture': new __chunk_1.Uniform1i(context, locations.u_texture)
    };
};
var symbolSDFUniforms = function (context, locations) {
    return {
        'u_is_size_zoom_constant': new __chunk_1.Uniform1i(context, locations.u_is_size_zoom_constant),
        'u_is_size_feature_constant': new __chunk_1.Uniform1i(context, locations.u_is_size_feature_constant),
        'u_size_t': new __chunk_1.Uniform1f(context, locations.u_size_t),
        'u_size': new __chunk_1.Uniform1f(context, locations.u_size),
        'u_camera_to_center_distance': new __chunk_1.Uniform1f(context, locations.u_camera_to_center_distance),
        'u_pitch': new __chunk_1.Uniform1f(context, locations.u_pitch),
        'u_rotate_symbol': new __chunk_1.Uniform1i(context, locations.u_rotate_symbol),
        'u_aspect_ratio': new __chunk_1.Uniform1f(context, locations.u_aspect_ratio),
        'u_fade_change': new __chunk_1.Uniform1f(context, locations.u_fade_change),
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_label_plane_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_label_plane_matrix),
        'u_gl_coord_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_gl_coord_matrix),
        'u_is_text': new __chunk_1.Uniform1f(context, locations.u_is_text),
        'u_pitch_with_map': new __chunk_1.Uniform1i(context, locations.u_pitch_with_map),
        'u_texsize': new __chunk_1.Uniform2f(context, locations.u_texsize),
        'u_texture': new __chunk_1.Uniform1i(context, locations.u_texture),
        'u_gamma_scale': new __chunk_1.Uniform1f(context, locations.u_gamma_scale),
        'u_is_halo': new __chunk_1.Uniform1f(context, locations.u_is_halo)
    };
};
var symbolIconUniformValues = function (functionType, size, rotateInShader, pitchWithMap, painter, matrix, labelPlaneMatrix, glCoordMatrix, isText, texSize) {
    var transform = painter.transform;
    return {
        'u_is_size_zoom_constant': +(functionType === 'constant' || functionType === 'source'),
        'u_is_size_feature_constant': +(functionType === 'constant' || functionType === 'camera'),
        'u_size_t': size ? size.uSizeT : 0,
        'u_size': size ? size.uSize : 0,
        'u_camera_to_center_distance': transform.cameraToCenterDistance,
        'u_pitch': transform.pitch / 360 * 2 * Math.PI,
        'u_rotate_symbol': +rotateInShader,
        'u_aspect_ratio': transform.width / transform.height,
        'u_fade_change': painter.options.fadeDuration ? painter.symbolFadeChange : 1,
        'u_matrix': matrix,
        'u_label_plane_matrix': labelPlaneMatrix,
        'u_gl_coord_matrix': glCoordMatrix,
        'u_is_text': +isText,
        'u_pitch_with_map': +pitchWithMap,
        'u_texsize': texSize,
        'u_texture': 0
    };
};
var symbolSDFUniformValues = function (functionType, size, rotateInShader, pitchWithMap, painter, matrix, labelPlaneMatrix, glCoordMatrix, isText, texSize, isHalo) {
    var transform = painter.transform;
    return __chunk_1.extend(symbolIconUniformValues(functionType, size, rotateInShader, pitchWithMap, painter, matrix, labelPlaneMatrix, glCoordMatrix, isText, texSize), {
        'u_gamma_scale': pitchWithMap ? Math.cos(transform._pitch) * transform.cameraToCenterDistance : 1,
        'u_is_halo': +isHalo
    });
};

var backgroundUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_opacity': new __chunk_1.Uniform1f(context, locations.u_opacity),
        'u_color': new __chunk_1.UniformColor(context, locations.u_color)
    };
};
var backgroundPatternUniforms = function (context, locations) {
    return {
        'u_matrix': new __chunk_1.UniformMatrix4f(context, locations.u_matrix),
        'u_opacity': new __chunk_1.Uniform1f(context, locations.u_opacity),
        'u_image': new __chunk_1.Uniform1i(context, locations.u_image),
        'u_pattern_tl_a': new __chunk_1.Uniform2f(context, locations.u_pattern_tl_a),
        'u_pattern_br_a': new __chunk_1.Uniform2f(context, locations.u_pattern_br_a),
        'u_pattern_tl_b': new __chunk_1.Uniform2f(context, locations.u_pattern_tl_b),
        'u_pattern_br_b': new __chunk_1.Uniform2f(context, locations.u_pattern_br_b),
        'u_texsize': new __chunk_1.Uniform2f(context, locations.u_texsize),
        'u_mix': new __chunk_1.Uniform1f(context, locations.u_mix),
        'u_pattern_size_a': new __chunk_1.Uniform2f(context, locations.u_pattern_size_a),
        'u_pattern_size_b': new __chunk_1.Uniform2f(context, locations.u_pattern_size_b),
        'u_scale_a': new __chunk_1.Uniform1f(context, locations.u_scale_a),
        'u_scale_b': new __chunk_1.Uniform1f(context, locations.u_scale_b),
        'u_pixel_coord_upper': new __chunk_1.Uniform2f(context, locations.u_pixel_coord_upper),
        'u_pixel_coord_lower': new __chunk_1.Uniform2f(context, locations.u_pixel_coord_lower),
        'u_tile_units_to_pixels': new __chunk_1.Uniform1f(context, locations.u_tile_units_to_pixels)
    };
};
var backgroundUniformValues = function (matrix, opacity, color) {
    return {
        'u_matrix': matrix,
        'u_opacity': opacity,
        'u_color': color
    };
};
var backgroundPatternUniformValues = function (matrix, opacity, painter, image, tile, crossfade) {
    return __chunk_1.extend(bgPatternUniformValues(image, crossfade, painter, tile), {
        'u_matrix': matrix,
        'u_opacity': opacity
    });
};

var programUniforms = {
    fillExtrusion: fillExtrusionUniforms,
    fillExtrusionPattern: fillExtrusionPatternUniforms,
    extrusionTexture: extrusionTextureUniforms,
    fill: fillUniforms,
    fillPattern: fillPatternUniforms,
    fillOutline: fillOutlineUniforms,
    fillOutlinePattern: fillOutlinePatternUniforms,
    circle: circleUniforms,
    collisionBox: collisionUniforms,
    collisionCircle: collisionUniforms,
    debug: debugUniforms,
    clippingMask: clippingMaskUniforms,
    heatmap: heatmapUniforms,
    heatmapTexture: heatmapTextureUniforms,
    hillshade: hillshadeUniforms,
    hillshadePrepare: hillshadePrepareUniforms,
    line: lineUniforms,
    lineGradient: lineGradientUniforms,
    linePattern: linePatternUniforms,
    lineSDF: lineSDFUniforms,
    raster: rasterUniforms,
    symbolIcon: symbolIconUniforms,
    symbolSDF: symbolSDFUniforms,
    background: backgroundUniforms,
    backgroundPattern: backgroundPatternUniforms
};

function updateTileMasks (renderableTiles, context) {
    var sortedRenderables = renderableTiles.sort(function (a, b) {
        return a.tileID.isLessThan(b.tileID) ? -1 : b.tileID.isLessThan(a.tileID) ? 1 : 0;
    });
    for (var i = 0; i < sortedRenderables.length; i++) {
        var mask = {};
        var tile = sortedRenderables[i];
        var childArray = sortedRenderables.slice(i + 1);
        computeTileMasks(tile.tileID.wrapped(), tile.tileID, childArray, new __chunk_1.OverscaledTileID(0, tile.tileID.wrap + 1, 0, 0, 0), mask);
        tile.setMask(mask, context);
    }
}function computeTileMasks(rootTile, ref, childArray, lowerBound, mask) {
    for (var i = 0; i < childArray.length; i++) {
        var childTile = childArray[i];
        if (lowerBound.isLessThan(childTile.tileID)) {
            break;
        }
        if (ref.key === childTile.tileID.key) {
            return;
        } else if (childTile.tileID.isChildOf(ref)) {
            var children = ref.children(Infinity);
            for (var j = 0; j < children.length; j++) {
                var child = children[j];
                computeTileMasks(rootTile, child, childArray.slice(i), lowerBound, mask);
            }
            return;
        }
    }
    var diffZ = ref.overscaledZ - rootTile.overscaledZ;
    var maskTileId = new __chunk_1.CanonicalTileID(diffZ, ref.canonical.x - (rootTile.canonical.x << diffZ), ref.canonical.y - (rootTile.canonical.y << diffZ));
    mask[maskTileId.key] = mask[maskTileId.key] || maskTileId;
}

function drawCollisionDebugGeometry(painter, sourceCache, layer, coords, drawCircles) {
    var context = painter.context;
    var gl = context.gl;
    var program = drawCircles ? painter.useProgram('collisionCircle') : painter.useProgram('collisionBox');
    for (var i = 0; i < coords.length; i++) {
        var coord = coords[i];
        var tile = sourceCache.getTile(coord);
        var bucket = tile.getBucket(layer);
        if (!bucket) {
            continue;
        }
        var buffers = drawCircles ? bucket.collisionCircle : bucket.collisionBox;
        if (!buffers) {
            continue;
        }
        program.draw(context, drawCircles ? gl.TRIANGLES : gl.LINES, DepthMode.disabled, StencilMode.disabled, painter.colorModeForRenderPass(), CullFaceMode.disabled, collisionUniformValues(coord.posMatrix, painter.transform, tile), layer.id, buffers.layoutVertexBuffer, buffers.indexBuffer, buffers.segments, null, painter.transform.zoom, null, null, buffers.collisionVertexBuffer);
    }
}
function drawCollisionDebug(painter, sourceCache, layer, coords) {
    drawCollisionDebugGeometry(painter, sourceCache, layer, coords, false);
    drawCollisionDebugGeometry(painter, sourceCache, layer, coords, true);
}

var identityMat4 = __chunk_1.identity(new Float32Array(16));
var symbolLayoutProperties$1 = __chunk_1.properties.layout;
function drawSymbols(painter, sourceCache, layer, coords) {
    if (painter.renderPass !== 'translucent') {
        return;
    }
    var stencilMode = StencilMode.disabled;
    var colorMode = painter.colorModeForRenderPass();
    if (layer.paint.get('icon-opacity').constantOr(1) !== 0) {
        drawLayerSymbols(painter, sourceCache, layer, coords, false, layer.paint.get('icon-translate'), layer.paint.get('icon-translate-anchor'), layer.layout.get('icon-rotation-alignment'), layer.layout.get('icon-pitch-alignment'), layer.layout.get('icon-keep-upright'), stencilMode, colorMode);
    }
    if (layer.paint.get('text-opacity').constantOr(1) !== 0) {
        drawLayerSymbols(painter, sourceCache, layer, coords, true, layer.paint.get('text-translate'), layer.paint.get('text-translate-anchor'), layer.layout.get('text-rotation-alignment'), layer.layout.get('text-pitch-alignment'), layer.layout.get('text-keep-upright'), stencilMode, colorMode);
    }
    if (sourceCache.map.showCollisionBoxes) {
        drawCollisionDebug(painter, sourceCache, layer, coords);
    }
}
function drawLayerSymbols(painter, sourceCache, layer, coords, isText, translate, translateAnchor, rotationAlignment, pitchAlignment, keepUpright, stencilMode, colorMode) {
    var context = painter.context;
    var gl = context.gl;
    var tr = painter.transform;
    var rotateWithMap = rotationAlignment === 'map';
    var pitchWithMap = pitchAlignment === 'map';
    var alongLine = rotateWithMap && layer.layout.get('symbol-placement') !== 'point';
    var rotateInShader = rotateWithMap && !pitchWithMap && !alongLine;
    var depthOn = pitchWithMap;
    var depthMode = depthOn ? painter.depthModeForSublayer(0, DepthMode.ReadOnly) : DepthMode.disabled;
    var program;
    var size;
    for (var i = 0, list = coords; i < list.length; i += 1) {
        var coord = list[i];
        var tile = sourceCache.getTile(coord);
        var bucket = tile.getBucket(layer);
        if (!bucket) {
            continue;
        }
        var buffers = isText ? bucket.text : bucket.icon;
        if (!buffers || !buffers.segments.get().length) {
            continue;
        }
        var programConfiguration = buffers.programConfigurations.get(layer.id);
        var isSDF = isText || bucket.sdfIcons;
        var sizeData = isText ? bucket.textSizeData : bucket.iconSizeData;
        if (!program) {
            program = painter.useProgram(isSDF ? 'symbolSDF' : 'symbolIcon', programConfiguration);
            size = __chunk_1.evaluateSizeForZoom(sizeData, tr.zoom, symbolLayoutProperties$1.properties[isText ? 'text-size' : 'icon-size']);
        }
        context.activeTexture.set(gl.TEXTURE0);
        var texSize = void 0;
        if (isText) {
            tile.glyphAtlasTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
            texSize = tile.glyphAtlasTexture.size;
        } else {
            var iconScaled = layer.layout.get('icon-size').constantOr(0) !== 1 || bucket.iconsNeedLinear;
            var iconTransformed = pitchWithMap || tr.pitch !== 0;
            tile.imageAtlasTexture.bind(isSDF || painter.options.rotating || painter.options.zooming || iconScaled || iconTransformed ? gl.LINEAR : gl.NEAREST, gl.CLAMP_TO_EDGE);
            texSize = tile.imageAtlasTexture.size;
        }
        var s = pixelsToTileUnits(tile, 1, painter.transform.zoom);
        var labelPlaneMatrix = getLabelPlaneMatrix(coord.posMatrix, pitchWithMap, rotateWithMap, painter.transform, s);
        var glCoordMatrix = getGlCoordMatrix(coord.posMatrix, pitchWithMap, rotateWithMap, painter.transform, s);
        if (alongLine) {
            updateLineLabels(bucket, coord.posMatrix, painter, isText, labelPlaneMatrix, glCoordMatrix, pitchWithMap, keepUpright);
        }
        var matrix = painter.translatePosMatrix(coord.posMatrix, tile, translate, translateAnchor), uLabelPlaneMatrix = alongLine ? identityMat4 : labelPlaneMatrix, uglCoordMatrix = painter.translatePosMatrix(glCoordMatrix, tile, translate, translateAnchor, true);
        var uniformValues = void 0;
        if (isSDF) {
            var hasHalo = layer.paint.get(isText ? 'text-halo-width' : 'icon-halo-width').constantOr(1) !== 0;
            uniformValues = symbolSDFUniformValues(sizeData.functionType, size, rotateInShader, pitchWithMap, painter, matrix, uLabelPlaneMatrix, uglCoordMatrix, isText, texSize, true);
            if (hasHalo) {
                drawSymbolElements(buffers, layer, painter, program, depthMode, stencilMode, colorMode, uniformValues);
            }
            uniformValues['u_is_halo'] = 0;
        } else {
            uniformValues = symbolIconUniformValues(sizeData.functionType, size, rotateInShader, pitchWithMap, painter, matrix, uLabelPlaneMatrix, uglCoordMatrix, isText, texSize);
        }
        drawSymbolElements(buffers, layer, painter, program, depthMode, stencilMode, colorMode, uniformValues);
    }
}
function drawSymbolElements(buffers, layer, painter, program, depthMode, stencilMode, colorMode, uniformValues) {
    var context = painter.context;
    var gl = context.gl;
    program.draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, uniformValues, layer.id, buffers.layoutVertexBuffer, buffers.indexBuffer, buffers.segments, layer.paint, painter.transform.zoom, buffers.programConfigurations.get(layer.id), buffers.dynamicLayoutVertexBuffer, buffers.opacityVertexBuffer);
}

function drawCircles(painter, sourceCache, layer, coords) {
    if (painter.renderPass !== 'translucent') {
        return;
    }
    var opacity = layer.paint.get('circle-opacity');
    var strokeWidth = layer.paint.get('circle-stroke-width');
    var strokeOpacity = layer.paint.get('circle-stroke-opacity');
    if (opacity.constantOr(1) === 0 && (strokeWidth.constantOr(1) === 0 || strokeOpacity.constantOr(1) === 0)) {
        return;
    }
    var context = painter.context;
    var gl = context.gl;
    var depthMode = painter.depthModeForSublayer(0, DepthMode.ReadOnly);
    var stencilMode = StencilMode.disabled;
    var colorMode = painter.colorModeForRenderPass();
    for (var i = 0; i < coords.length; i++) {
        var coord = coords[i];
        var tile = sourceCache.getTile(coord);
        var bucket = tile.getBucket(layer);
        if (!bucket) {
            continue;
        }
        var programConfiguration = bucket.programConfigurations.get(layer.id);
        var program = painter.useProgram('circle', programConfiguration);
        program.draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, circleUniformValues(painter, coord, tile, layer), layer.id, bucket.layoutVertexBuffer, bucket.indexBuffer, bucket.segments, layer.paint, painter.transform.zoom, programConfiguration);
    }
}

function drawHeatmap(painter, sourceCache, layer, coords) {
    if (layer.paint.get('heatmap-opacity') === 0) {
        return;
    }
    if (painter.renderPass === 'offscreen') {
        var context = painter.context;
        var gl = context.gl;
        var depthMode = painter.depthModeForSublayer(0, DepthMode.ReadOnly);
        var stencilMode = StencilMode.disabled;
        var colorMode = new ColorMode([
            gl.ONE,
            gl.ONE
        ], __chunk_1.Color.transparent, [
            true,
            true,
            true,
            true
        ]);
        bindFramebuffer(context, painter, layer);
        context.clear({ color: __chunk_1.Color.transparent });
        for (var i = 0; i < coords.length; i++) {
            var coord = coords[i];
            if (sourceCache.hasRenderableParent(coord)) {
                continue;
            }
            var tile = sourceCache.getTile(coord);
            var bucket = tile.getBucket(layer);
            if (!bucket) {
                continue;
            }
            var programConfiguration = bucket.programConfigurations.get(layer.id);
            var program = painter.useProgram('heatmap', programConfiguration);
            var ref = painter.transform;
            var zoom = ref.zoom;
            program.draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, heatmapUniformValues(coord.posMatrix, tile, zoom, layer.paint.get('heatmap-intensity')), layer.id, bucket.layoutVertexBuffer, bucket.indexBuffer, bucket.segments, layer.paint, painter.transform.zoom, programConfiguration);
        }
        context.viewport.set([
            0,
            0,
            painter.width,
            painter.height
        ]);
    } else if (painter.renderPass === 'translucent') {
        painter.context.setColorMode(painter.colorModeForRenderPass());
        renderTextureToMap(painter, layer);
    }
}
function bindFramebuffer(context, painter, layer) {
    var gl = context.gl;
    context.activeTexture.set(gl.TEXTURE1);
    context.viewport.set([
        0,
        0,
        painter.width / 4,
        painter.height / 4
    ]);
    var fbo = layer.heatmapFbo;
    if (!fbo) {
        var texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        fbo = layer.heatmapFbo = context.createFramebuffer(painter.width / 4, painter.height / 4);
        bindTextureToFramebuffer(context, painter, texture, fbo);
    } else {
        gl.bindTexture(gl.TEXTURE_2D, fbo.colorAttachment.get());
        context.bindFramebuffer.set(fbo.framebuffer);
    }
}
function bindTextureToFramebuffer(context, painter, texture, fbo) {
    var gl = context.gl;
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, painter.width / 4, painter.height / 4, 0, gl.RGBA, context.extTextureHalfFloat ? context.extTextureHalfFloat.HALF_FLOAT_OES : gl.UNSIGNED_BYTE, null);
    fbo.colorAttachment.set(texture);
    if (context.extTextureHalfFloat && gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {
        context.extTextureHalfFloat = null;
        fbo.colorAttachment.setDirty();
        bindTextureToFramebuffer(context, painter, texture, fbo);
    }
}
function renderTextureToMap(painter, layer) {
    var context = painter.context;
    var gl = context.gl;
    var fbo = layer.heatmapFbo;
    if (!fbo) {
        return;
    }
    context.activeTexture.set(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, fbo.colorAttachment.get());
    context.activeTexture.set(gl.TEXTURE1);
    var colorRampTexture = layer.colorRampTexture;
    if (!colorRampTexture) {
        colorRampTexture = layer.colorRampTexture = new __chunk_1.Texture(context, layer.colorRamp, gl.RGBA);
    }
    colorRampTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
    painter.useProgram('heatmapTexture').draw(context, gl.TRIANGLES, DepthMode.disabled, StencilMode.disabled, painter.colorModeForRenderPass(), CullFaceMode.disabled, heatmapTextureUniformValues(painter, layer, 0, 1), layer.id, painter.viewportBuffer, painter.quadTriangleIndexBuffer, painter.viewportSegments, layer.paint, painter.transform.zoom);
}

function drawLine(painter, sourceCache, layer, coords) {
    if (painter.renderPass !== 'translucent') {
        return;
    }
    var opacity = layer.paint.get('line-opacity');
    var width = layer.paint.get('line-width');
    if (opacity.constantOr(1) === 0 || width.constantOr(1) === 0) {
        return;
    }
    var depthMode = painter.depthModeForSublayer(0, DepthMode.ReadOnly);
    var colorMode = painter.colorModeForRenderPass();
    var dasharray = layer.paint.get('line-dasharray');
    var patternProperty = layer.paint.get('line-pattern');
    var image = patternProperty.constantOr(1);
    var gradient = layer.paint.get('line-gradient');
    var crossfade = layer.getCrossfadeParameters();
    var programId = dasharray ? 'lineSDF' : image ? 'linePattern' : gradient ? 'lineGradient' : 'line';
    var context = painter.context;
    var gl = context.gl;
    var firstTile = true;
    if (gradient) {
        context.activeTexture.set(gl.TEXTURE0);
        var gradientTexture = layer.gradientTexture;
        if (!layer.gradient) {
            return;
        }
        if (!gradientTexture) {
            gradientTexture = layer.gradientTexture = new __chunk_1.Texture(context, layer.gradient, gl.RGBA);
        }
        gradientTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
    }
    for (var i = 0, list = coords; i < list.length; i += 1) {
        var coord = list[i];
        var tile = sourceCache.getTile(coord);
        if (image && !tile.patternsLoaded()) {
            continue;
        }
        var bucket = tile.getBucket(layer);
        if (!bucket) {
            continue;
        }
        var programConfiguration = bucket.programConfigurations.get(layer.id);
        var prevProgram = painter.context.program.get();
        var program = painter.useProgram(programId, programConfiguration);
        var programChanged = firstTile || program.program !== prevProgram;
        var constantPattern = patternProperty.constantOr(null);
        if (constantPattern && tile.imageAtlas) {
            var posTo = tile.imageAtlas.patternPositions[constantPattern.to];
            var posFrom = tile.imageAtlas.patternPositions[constantPattern.from];
            if (posTo && posFrom) {
                programConfiguration.setConstantPatternPositions(posTo, posFrom);
            }
        }
        var uniformValues = dasharray ? lineSDFUniformValues(painter, tile, layer, dasharray, crossfade) : image ? linePatternUniformValues(painter, tile, layer, crossfade) : gradient ? lineGradientUniformValues(painter, tile, layer) : lineUniformValues(painter, tile, layer);
        if (dasharray && (programChanged || painter.lineAtlas.dirty)) {
            context.activeTexture.set(gl.TEXTURE0);
            painter.lineAtlas.bind(context);
        } else if (image) {
            context.activeTexture.set(gl.TEXTURE0);
            tile.imageAtlasTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
            programConfiguration.updatePatternPaintBuffers(crossfade);
        }
        program.draw(context, gl.TRIANGLES, depthMode, painter.stencilModeForClipping(coord), colorMode, CullFaceMode.disabled, uniformValues, layer.id, bucket.layoutVertexBuffer, bucket.indexBuffer, bucket.segments, layer.paint, painter.transform.zoom, programConfiguration);
        firstTile = false;
    }
}

function drawFill(painter, sourceCache, layer, coords) {
    var color = layer.paint.get('fill-color');
    var opacity = layer.paint.get('fill-opacity');
    if (opacity.constantOr(1) === 0) {
        return;
    }
    var colorMode = painter.colorModeForRenderPass();
    var pattern = layer.paint.get('fill-pattern');
    var pass = !pattern.constantOr(1) && color.constantOr(__chunk_1.Color.transparent).a === 1 && opacity.constantOr(0) === 1 ? 'opaque' : 'translucent';
    if (painter.renderPass === pass) {
        var depthMode = painter.depthModeForSublayer(1, painter.renderPass === 'opaque' ? DepthMode.ReadWrite : DepthMode.ReadOnly);
        drawFillTiles(painter, sourceCache, layer, coords, depthMode, colorMode, false);
    }
    if (painter.renderPass === 'translucent' && layer.paint.get('fill-antialias')) {
        var depthMode$1 = painter.depthModeForSublayer(layer.getPaintProperty('fill-outline-color') ? 2 : 0, DepthMode.ReadOnly);
        drawFillTiles(painter, sourceCache, layer, coords, depthMode$1, colorMode, true);
    }
}
function drawFillTiles(painter, sourceCache, layer, coords, depthMode, colorMode, isOutline) {
    var gl = painter.context.gl;
    var patternProperty = layer.paint.get('fill-pattern');
    var image = patternProperty && patternProperty.constantOr(1);
    var crossfade = layer.getCrossfadeParameters();
    var drawMode, programName, uniformValues, indexBuffer, segments;
    if (!isOutline) {
        programName = image ? 'fillPattern' : 'fill';
        drawMode = gl.TRIANGLES;
    } else {
        programName = image && !layer.getPaintProperty('fill-outline-color') ? 'fillOutlinePattern' : 'fillOutline';
        drawMode = gl.LINES;
    }
    for (var i = 0, list = coords; i < list.length; i += 1) {
        var coord = list[i];
        var tile = sourceCache.getTile(coord);
        if (image && !tile.patternsLoaded()) {
            continue;
        }
        var bucket = tile.getBucket(layer);
        if (!bucket) {
            continue;
        }
        var programConfiguration = bucket.programConfigurations.get(layer.id);
        var program = painter.useProgram(programName, programConfiguration);
        if (image) {
            painter.context.activeTexture.set(gl.TEXTURE0);
            tile.imageAtlasTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
            programConfiguration.updatePatternPaintBuffers(crossfade);
        }
        var constantPattern = patternProperty.constantOr(null);
        if (constantPattern && tile.imageAtlas) {
            var posTo = tile.imageAtlas.patternPositions[constantPattern.to];
            var posFrom = tile.imageAtlas.patternPositions[constantPattern.from];
            if (posTo && posFrom) {
                programConfiguration.setConstantPatternPositions(posTo, posFrom);
            }
        }
        var tileMatrix = painter.translatePosMatrix(coord.posMatrix, tile, layer.paint.get('fill-translate'), layer.paint.get('fill-translate-anchor'));
        if (!isOutline) {
            indexBuffer = bucket.indexBuffer;
            segments = bucket.segments;
            uniformValues = image ? fillPatternUniformValues(tileMatrix, painter, crossfade, tile) : fillUniformValues(tileMatrix);
        } else {
            indexBuffer = bucket.indexBuffer2;
            segments = bucket.segments2;
            var drawingBufferSize = [
                gl.drawingBufferWidth,
                gl.drawingBufferHeight
            ];
            uniformValues = programName === 'fillOutlinePattern' && image ? fillOutlinePatternUniformValues(tileMatrix, painter, crossfade, tile, drawingBufferSize) : fillOutlineUniformValues(tileMatrix, drawingBufferSize);
        }
        program.draw(painter.context, drawMode, depthMode, painter.stencilModeForClipping(coord), colorMode, CullFaceMode.disabled, uniformValues, layer.id, bucket.layoutVertexBuffer, indexBuffer, segments, layer.paint, painter.transform.zoom, programConfiguration);
    }
}

function prepareOffscreenFramebuffer(painter, layer) {
    var context = painter.context;
    var gl = context.gl;
    var renderTarget = layer.viewportFrame;
    if (painter.depthRboNeedsClear) {
        painter.setupOffscreenDepthRenderbuffer();
    }
    if (!renderTarget) {
        var texture = new __chunk_1.Texture(context, {
            width: painter.width,
            height: painter.height,
            data: null
        }, gl.RGBA);
        texture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
        renderTarget = layer.viewportFrame = context.createFramebuffer(painter.width, painter.height);
        renderTarget.colorAttachment.set(texture.texture);
    }
    context.bindFramebuffer.set(renderTarget.framebuffer);
    renderTarget.depthAttachment.set(painter.depthRbo);
    if (painter.depthRboNeedsClear) {
        context.clear({ depth: 1 });
        painter.depthRboNeedsClear = false;
    }
    context.clear({ color: __chunk_1.Color.transparent });
    context.setStencilMode(StencilMode.disabled);
    context.setDepthMode(new DepthMode(gl.LEQUAL, DepthMode.ReadWrite, [
        0,
        1
    ]));
    context.setColorMode(painter.colorModeForRenderPass());
}
function drawOffscreenTexture(painter, layer, opacity) {
    var renderedTexture = layer.viewportFrame;
    if (!renderedTexture) {
        return;
    }
    var context = painter.context;
    var gl = context.gl;
    context.activeTexture.set(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, renderedTexture.colorAttachment.get());
    painter.useProgram('extrusionTexture').draw(context, gl.TRIANGLES, DepthMode.disabled, StencilMode.disabled, painter.colorModeForRenderPass(), CullFaceMode.disabled, extrusionTextureUniformValues(painter, opacity, 0), layer.id, painter.viewportBuffer, painter.quadTriangleIndexBuffer, painter.viewportSegments, layer.paint, painter.transform.zoom);
}

function draw(painter, source, layer, coords) {
    if (layer.paint.get('fill-extrusion-opacity') === 0) {
        return;
    }
    if (painter.renderPass === 'offscreen') {
        prepareOffscreenFramebuffer(painter, layer);
        var depthMode = new DepthMode(painter.context.gl.LEQUAL, DepthMode.ReadWrite, [
                0,
                1
            ]), stencilMode = StencilMode.disabled, colorMode = painter.colorModeForRenderPass();
        drawExtrusionTiles(painter, source, layer, coords, depthMode, stencilMode, colorMode);
    } else if (painter.renderPass === 'translucent') {
        drawOffscreenTexture(painter, layer, layer.paint.get('fill-extrusion-opacity'));
    }
}
function drawExtrusionTiles(painter, source, layer, coords, depthMode, stencilMode, colorMode) {
    var context = painter.context;
    var gl = context.gl;
    var patternProperty = layer.paint.get('fill-extrusion-pattern');
    var image = patternProperty.constantOr(1);
    var crossfade = layer.getCrossfadeParameters();
    for (var i = 0, list = coords; i < list.length; i += 1) {
        var coord = list[i];
        var tile = source.getTile(coord);
        var bucket = tile.getBucket(layer);
        if (!bucket) {
            continue;
        }
        var programConfiguration = bucket.programConfigurations.get(layer.id);
        var program = painter.useProgram(image ? 'fillExtrusionPattern' : 'fillExtrusion', programConfiguration);
        if (image) {
            painter.context.activeTexture.set(gl.TEXTURE0);
            tile.imageAtlasTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
            programConfiguration.updatePatternPaintBuffers(crossfade);
        }
        var constantPattern = patternProperty.constantOr(null);
        if (constantPattern && tile.imageAtlas) {
            var posTo = tile.imageAtlas.patternPositions[constantPattern.to];
            var posFrom = tile.imageAtlas.patternPositions[constantPattern.from];
            if (posTo && posFrom) {
                programConfiguration.setConstantPatternPositions(posTo, posFrom);
            }
        }
        var matrix = painter.translatePosMatrix(coord.posMatrix, tile, layer.paint.get('fill-extrusion-translate'), layer.paint.get('fill-extrusion-translate-anchor'));
        var shouldUseVerticalGradient = layer.paint.get('fill-extrusion-vertical-gradient');
        var uniformValues = image ? fillExtrusionPatternUniformValues(matrix, painter, shouldUseVerticalGradient, coord, crossfade, tile) : fillExtrusionUniformValues(matrix, painter, shouldUseVerticalGradient);
        program.draw(context, context.gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.backCCW, uniformValues, layer.id, bucket.layoutVertexBuffer, bucket.indexBuffer, bucket.segments, layer.paint, painter.transform.zoom, programConfiguration);
    }
}

function drawHillshade(painter, sourceCache, layer, tileIDs) {
    if (painter.renderPass !== 'offscreen' && painter.renderPass !== 'translucent') {
        return;
    }
    var context = painter.context;
    var sourceMaxZoom = sourceCache.getSource().maxzoom;
    var depthMode = painter.depthModeForSublayer(0, DepthMode.ReadOnly);
    var stencilMode = StencilMode.disabled;
    var colorMode = painter.colorModeForRenderPass();
    for (var i = 0, list = tileIDs; i < list.length; i += 1) {
        var tileID = list[i];
        var tile = sourceCache.getTile(tileID);
        if (tile.needsHillshadePrepare && painter.renderPass === 'offscreen') {
            prepareHillshade(painter, tile, layer, sourceMaxZoom, depthMode, stencilMode, colorMode);
            continue;
        } else if (painter.renderPass === 'translucent') {
            renderHillshade(painter, tile, layer, depthMode, stencilMode, colorMode);
        }
    }
    context.viewport.set([
        0,
        0,
        painter.width,
        painter.height
    ]);
}
function renderHillshade(painter, tile, layer, depthMode, stencilMode, colorMode) {
    var context = painter.context;
    var gl = context.gl;
    var fbo = tile.fbo;
    if (!fbo) {
        return;
    }
    var program = painter.useProgram('hillshade');
    context.activeTexture.set(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, fbo.colorAttachment.get());
    var uniformValues = hillshadeUniformValues(painter, tile, layer);
    if (tile.maskedBoundsBuffer && tile.maskedIndexBuffer && tile.segments) {
        program.draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, uniformValues, layer.id, tile.maskedBoundsBuffer, tile.maskedIndexBuffer, tile.segments);
    } else {
        program.draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, uniformValues, layer.id, painter.rasterBoundsBuffer, painter.quadTriangleIndexBuffer, painter.rasterBoundsSegments);
    }
}
function prepareHillshade(painter, tile, layer, sourceMaxZoom, depthMode, stencilMode, colorMode) {
    var context = painter.context;
    var gl = context.gl;
    if (tile.dem && tile.dem.data) {
        var tileSize = tile.dem.dim;
        var pixelData = tile.dem.getPixels();
        context.activeTexture.set(gl.TEXTURE1);
        context.pixelStoreUnpackPremultiplyAlpha.set(false);
        tile.demTexture = tile.demTexture || painter.getTileTexture(tile.tileSize);
        if (tile.demTexture) {
            var demTexture = tile.demTexture;
            demTexture.update(pixelData, { premultiply: false });
            demTexture.bind(gl.NEAREST, gl.CLAMP_TO_EDGE);
        } else {
            tile.demTexture = new __chunk_1.Texture(context, pixelData, gl.RGBA, { premultiply: false });
            tile.demTexture.bind(gl.NEAREST, gl.CLAMP_TO_EDGE);
        }
        context.activeTexture.set(gl.TEXTURE0);
        var fbo = tile.fbo;
        if (!fbo) {
            var renderTexture = new __chunk_1.Texture(context, {
                width: tileSize,
                height: tileSize,
                data: null
            }, gl.RGBA);
            renderTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
            fbo = tile.fbo = context.createFramebuffer(tileSize, tileSize);
            fbo.colorAttachment.set(renderTexture.texture);
        }
        context.bindFramebuffer.set(fbo.framebuffer);
        context.viewport.set([
            0,
            0,
            tileSize,
            tileSize
        ]);
        painter.useProgram('hillshadePrepare').draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, hillshadeUniformPrepareValues(tile, sourceMaxZoom), layer.id, painter.rasterBoundsBuffer, painter.quadTriangleIndexBuffer, painter.rasterBoundsSegments);
        tile.needsHillshadePrepare = false;
    }
}

function drawRaster(painter, sourceCache, layer, coords) {
    if (painter.renderPass !== 'translucent') {
        return;
    }
    if (layer.paint.get('raster-opacity') === 0) {
        return;
    }
    var context = painter.context;
    var gl = context.gl;
    var source = sourceCache.getSource();
    var program = painter.useProgram('raster');
    var stencilMode = StencilMode.disabled;
    var colorMode = painter.colorModeForRenderPass();
    var minTileZ = coords.length && coords[0].overscaledZ;
    for (var i = 0, list = coords; i < list.length; i += 1) {
        var coord = list[i];
        var depthMode = painter.depthModeForSublayer(coord.overscaledZ - minTileZ, layer.paint.get('raster-opacity') === 1 ? DepthMode.ReadWrite : DepthMode.ReadOnly, gl.LESS);
        var tile = sourceCache.getTile(coord);
        var posMatrix = painter.transform.calculatePosMatrix(coord.toUnwrapped(), true);
        tile.registerFadeDuration(layer.paint.get('raster-fade-duration'));
        var parentTile = sourceCache.findLoadedParent(coord, 0), fade = getFadeValues(tile, parentTile, sourceCache, layer, painter.transform);
        var parentScaleBy = void 0, parentTL = void 0;
        var textureFilter = layer.paint.get('raster-resampling') === 'nearest' ? gl.NEAREST : gl.LINEAR;
        context.activeTexture.set(gl.TEXTURE0);
        tile.texture.bind(textureFilter, gl.CLAMP_TO_EDGE, gl.LINEAR_MIPMAP_NEAREST);
        context.activeTexture.set(gl.TEXTURE1);
        if (parentTile) {
            parentTile.texture.bind(textureFilter, gl.CLAMP_TO_EDGE, gl.LINEAR_MIPMAP_NEAREST);
            parentScaleBy = Math.pow(2, parentTile.tileID.overscaledZ - tile.tileID.overscaledZ);
            parentTL = [
                tile.tileID.canonical.x * parentScaleBy % 1,
                tile.tileID.canonical.y * parentScaleBy % 1
            ];
        } else {
            tile.texture.bind(textureFilter, gl.CLAMP_TO_EDGE, gl.LINEAR_MIPMAP_NEAREST);
        }
        var uniformValues = rasterUniformValues(posMatrix, parentTL || [
            0,
            0
        ], parentScaleBy || 1, fade, layer);
        if (source instanceof ImageSource) {
            program.draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, uniformValues, layer.id, source.boundsBuffer, painter.quadTriangleIndexBuffer, source.boundsSegments);
        } else if (tile.maskedBoundsBuffer && tile.maskedIndexBuffer && tile.segments) {
            program.draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, uniformValues, layer.id, tile.maskedBoundsBuffer, tile.maskedIndexBuffer, tile.segments, layer.paint, painter.transform.zoom);
        } else {
            program.draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, uniformValues, layer.id, painter.rasterBoundsBuffer, painter.quadTriangleIndexBuffer, painter.rasterBoundsSegments);
        }
    }
}
function getFadeValues(tile, parentTile, sourceCache, layer, transform) {
    var fadeDuration = layer.paint.get('raster-fade-duration');
    if (fadeDuration > 0) {
        var now = __chunk_1.browser.now();
        var sinceTile = (now - tile.timeAdded) / fadeDuration;
        var sinceParent = parentTile ? (now - parentTile.timeAdded) / fadeDuration : -1;
        var source = sourceCache.getSource();
        var idealZ = transform.coveringZoomLevel({
            tileSize: source.tileSize,
            roundZoom: source.roundZoom
        });
        var fadeIn = !parentTile || Math.abs(parentTile.tileID.overscaledZ - idealZ) > Math.abs(tile.tileID.overscaledZ - idealZ);
        var childOpacity = fadeIn && tile.refreshedUponExpiration ? 1 : __chunk_1.clamp(fadeIn ? sinceTile : 1 - sinceParent, 0, 1);
        if (tile.refreshedUponExpiration && sinceTile >= 1) {
            tile.refreshedUponExpiration = false;
        }
        if (parentTile) {
            return {
                opacity: 1,
                mix: 1 - childOpacity
            };
        } else {
            return {
                opacity: childOpacity,
                mix: 0
            };
        }
    } else {
        return {
            opacity: 1,
            mix: 0
        };
    }
}

function drawBackground(painter, sourceCache, layer) {
    var color = layer.paint.get('background-color');
    var opacity = layer.paint.get('background-opacity');
    if (opacity === 0) {
        return;
    }
    var context = painter.context;
    var gl = context.gl;
    var transform = painter.transform;
    var tileSize = transform.tileSize;
    var image = layer.paint.get('background-pattern');
    if (painter.isPatternMissing(image)) {
        return;
    }
    var pass = !image && color.a === 1 && opacity === 1 ? 'opaque' : 'translucent';
    if (painter.renderPass !== pass) {
        return;
    }
    var stencilMode = StencilMode.disabled;
    var depthMode = painter.depthModeForSublayer(0, pass === 'opaque' ? DepthMode.ReadWrite : DepthMode.ReadOnly);
    var colorMode = painter.colorModeForRenderPass();
    var program = painter.useProgram(image ? 'backgroundPattern' : 'background');
    var tileIDs = transform.coveringTiles({ tileSize: tileSize });
    if (image) {
        context.activeTexture.set(gl.TEXTURE0);
        painter.imageManager.bind(painter.context);
    }
    var crossfade = layer.getCrossfadeParameters();
    for (var i = 0, list = tileIDs; i < list.length; i += 1) {
        var tileID = list[i];
        var matrix = painter.transform.calculatePosMatrix(tileID.toUnwrapped());
        var uniformValues = image ? backgroundPatternUniformValues(matrix, opacity, painter, image, {
            tileID: tileID,
            tileSize: tileSize
        }, crossfade) : backgroundUniformValues(matrix, opacity, color);
        program.draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, uniformValues, layer.id, painter.tileExtentBuffer, painter.quadTriangleIndexBuffer, painter.tileExtentSegments);
    }
}

function drawDebug(painter, sourceCache, coords) {
    for (var i = 0; i < coords.length; i++) {
        drawDebugTile(painter, sourceCache, coords[i]);
    }
}
function drawDebugTile(painter, sourceCache, coord) {
    var context = painter.context;
    var gl = context.gl;
    var posMatrix = coord.posMatrix;
    var program = painter.useProgram('debug');
    var depthMode = DepthMode.disabled;
    var stencilMode = StencilMode.disabled;
    var colorMode = painter.colorModeForRenderPass();
    var id = '$debug';
    program.draw(context, gl.LINE_STRIP, depthMode, stencilMode, colorMode, CullFaceMode.disabled, debugUniformValues(posMatrix, __chunk_1.Color.red), id, painter.debugBuffer, painter.tileBorderIndexBuffer, painter.debugSegments);
    var vertices = createTextVertices(coord.toString(), 50, 200, 5);
    var debugTextArray = new __chunk_1.StructArrayLayout2i4();
    var debugTextIndices = new __chunk_1.StructArrayLayout2ui4();
    for (var v = 0; v < vertices.length; v += 2) {
        debugTextArray.emplaceBack(vertices[v], vertices[v + 1]);
        debugTextIndices.emplaceBack(v, v + 1);
    }
    var debugTextBuffer = context.createVertexBuffer(debugTextArray, posAttributes.members);
    var debugTextIndexBuffer = context.createIndexBuffer(debugTextIndices);
    var debugTextSegment = __chunk_1.SegmentVector.simpleSegment(0, 0, debugTextArray.length / 2, debugTextArray.length / 2);
    var tileSize = sourceCache.getTile(coord).tileSize;
    var onePixel = __chunk_1.EXTENT / (Math.pow(2, painter.transform.zoom - coord.overscaledZ) * tileSize);
    var translations = [
        [
            -1,
            -1
        ],
        [
            -1,
            1
        ],
        [
            1,
            -1
        ],
        [
            1,
            1
        ]
    ];
    for (var i = 0; i < translations.length; i++) {
        var translation = translations[i];
        program.draw(context, gl.LINES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, debugUniformValues(__chunk_1.translate([], posMatrix, [
            onePixel * translation[0],
            onePixel * translation[1],
            0
        ]), __chunk_1.Color.white), id, debugTextBuffer, debugTextIndexBuffer, debugTextSegment);
    }
    program.draw(context, gl.LINES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, debugUniformValues(posMatrix, __chunk_1.Color.black), id, debugTextBuffer, debugTextIndexBuffer, debugTextSegment);
}
var simplexFont = {
    ' ': [
        16,
        []
    ],
    '!': [
        10,
        [
            5,
            21,
            5,
            7,
            -1,
            -1,
            5,
            2,
            4,
            1,
            5,
            0,
            6,
            1,
            5,
            2
        ]
    ],
    '"': [
        16,
        [
            4,
            21,
            4,
            14,
            -1,
            -1,
            12,
            21,
            12,
            14
        ]
    ],
    '#': [
        21,
        [
            11,
            25,
            4,
            -7,
            -1,
            -1,
            17,
            25,
            10,
            -7,
            -1,
            -1,
            4,
            12,
            18,
            12,
            -1,
            -1,
            3,
            6,
            17,
            6
        ]
    ],
    '$': [
        20,
        [
            8,
            25,
            8,
            -4,
            -1,
            -1,
            12,
            25,
            12,
            -4,
            -1,
            -1,
            17,
            18,
            15,
            20,
            12,
            21,
            8,
            21,
            5,
            20,
            3,
            18,
            3,
            16,
            4,
            14,
            5,
            13,
            7,
            12,
            13,
            10,
            15,
            9,
            16,
            8,
            17,
            6,
            17,
            3,
            15,
            1,
            12,
            0,
            8,
            0,
            5,
            1,
            3,
            3
        ]
    ],
    '%': [
        24,
        [
            21,
            21,
            3,
            0,
            -1,
            -1,
            8,
            21,
            10,
            19,
            10,
            17,
            9,
            15,
            7,
            14,
            5,
            14,
            3,
            16,
            3,
            18,
            4,
            20,
            6,
            21,
            8,
            21,
            10,
            20,
            13,
            19,
            16,
            19,
            19,
            20,
            21,
            21,
            -1,
            -1,
            17,
            7,
            15,
            6,
            14,
            4,
            14,
            2,
            16,
            0,
            18,
            0,
            20,
            1,
            21,
            3,
            21,
            5,
            19,
            7,
            17,
            7
        ]
    ],
    '&': [
        26,
        [
            23,
            12,
            23,
            13,
            22,
            14,
            21,
            14,
            20,
            13,
            19,
            11,
            17,
            6,
            15,
            3,
            13,
            1,
            11,
            0,
            7,
            0,
            5,
            1,
            4,
            2,
            3,
            4,
            3,
            6,
            4,
            8,
            5,
            9,
            12,
            13,
            13,
            14,
            14,
            16,
            14,
            18,
            13,
            20,
            11,
            21,
            9,
            20,
            8,
            18,
            8,
            16,
            9,
            13,
            11,
            10,
            16,
            3,
            18,
            1,
            20,
            0,
            22,
            0,
            23,
            1,
            23,
            2
        ]
    ],
    '\'': [
        10,
        [
            5,
            19,
            4,
            20,
            5,
            21,
            6,
            20,
            6,
            18,
            5,
            16,
            4,
            15
        ]
    ],
    '(': [
        14,
        [
            11,
            25,
            9,
            23,
            7,
            20,
            5,
            16,
            4,
            11,
            4,
            7,
            5,
            2,
            7,
            -2,
            9,
            -5,
            11,
            -7
        ]
    ],
    ')': [
        14,
        [
            3,
            25,
            5,
            23,
            7,
            20,
            9,
            16,
            10,
            11,
            10,
            7,
            9,
            2,
            7,
            -2,
            5,
            -5,
            3,
            -7
        ]
    ],
    '*': [
        16,
        [
            8,
            21,
            8,
            9,
            -1,
            -1,
            3,
            18,
            13,
            12,
            -1,
            -1,
            13,
            18,
            3,
            12
        ]
    ],
    '+': [
        26,
        [
            13,
            18,
            13,
            0,
            -1,
            -1,
            4,
            9,
            22,
            9
        ]
    ],
    ',': [
        10,
        [
            6,
            1,
            5,
            0,
            4,
            1,
            5,
            2,
            6,
            1,
            6,
            -1,
            5,
            -3,
            4,
            -4
        ]
    ],
    '-': [
        26,
        [
            4,
            9,
            22,
            9
        ]
    ],
    '.': [
        10,
        [
            5,
            2,
            4,
            1,
            5,
            0,
            6,
            1,
            5,
            2
        ]
    ],
    '/': [
        22,
        [
            20,
            25,
            2,
            -7
        ]
    ],
    '0': [
        20,
        [
            9,
            21,
            6,
            20,
            4,
            17,
            3,
            12,
            3,
            9,
            4,
            4,
            6,
            1,
            9,
            0,
            11,
            0,
            14,
            1,
            16,
            4,
            17,
            9,
            17,
            12,
            16,
            17,
            14,
            20,
            11,
            21,
            9,
            21
        ]
    ],
    '1': [
        20,
        [
            6,
            17,
            8,
            18,
            11,
            21,
            11,
            0
        ]
    ],
    '2': [
        20,
        [
            4,
            16,
            4,
            17,
            5,
            19,
            6,
            20,
            8,
            21,
            12,
            21,
            14,
            20,
            15,
            19,
            16,
            17,
            16,
            15,
            15,
            13,
            13,
            10,
            3,
            0,
            17,
            0
        ]
    ],
    '3': [
        20,
        [
            5,
            21,
            16,
            21,
            10,
            13,
            13,
            13,
            15,
            12,
            16,
            11,
            17,
            8,
            17,
            6,
            16,
            3,
            14,
            1,
            11,
            0,
            8,
            0,
            5,
            1,
            4,
            2,
            3,
            4
        ]
    ],
    '4': [
        20,
        [
            13,
            21,
            3,
            7,
            18,
            7,
            -1,
            -1,
            13,
            21,
            13,
            0
        ]
    ],
    '5': [
        20,
        [
            15,
            21,
            5,
            21,
            4,
            12,
            5,
            13,
            8,
            14,
            11,
            14,
            14,
            13,
            16,
            11,
            17,
            8,
            17,
            6,
            16,
            3,
            14,
            1,
            11,
            0,
            8,
            0,
            5,
            1,
            4,
            2,
            3,
            4
        ]
    ],
    '6': [
        20,
        [
            16,
            18,
            15,
            20,
            12,
            21,
            10,
            21,
            7,
            20,
            5,
            17,
            4,
            12,
            4,
            7,
            5,
            3,
            7,
            1,
            10,
            0,
            11,
            0,
            14,
            1,
            16,
            3,
            17,
            6,
            17,
            7,
            16,
            10,
            14,
            12,
            11,
            13,
            10,
            13,
            7,
            12,
            5,
            10,
            4,
            7
        ]
    ],
    '7': [
        20,
        [
            17,
            21,
            7,
            0,
            -1,
            -1,
            3,
            21,
            17,
            21
        ]
    ],
    '8': [
        20,
        [
            8,
            21,
            5,
            20,
            4,
            18,
            4,
            16,
            5,
            14,
            7,
            13,
            11,
            12,
            14,
            11,
            16,
            9,
            17,
            7,
            17,
            4,
            16,
            2,
            15,
            1,
            12,
            0,
            8,
            0,
            5,
            1,
            4,
            2,
            3,
            4,
            3,
            7,
            4,
            9,
            6,
            11,
            9,
            12,
            13,
            13,
            15,
            14,
            16,
            16,
            16,
            18,
            15,
            20,
            12,
            21,
            8,
            21
        ]
    ],
    '9': [
        20,
        [
            16,
            14,
            15,
            11,
            13,
            9,
            10,
            8,
            9,
            8,
            6,
            9,
            4,
            11,
            3,
            14,
            3,
            15,
            4,
            18,
            6,
            20,
            9,
            21,
            10,
            21,
            13,
            20,
            15,
            18,
            16,
            14,
            16,
            9,
            15,
            4,
            13,
            1,
            10,
            0,
            8,
            0,
            5,
            1,
            4,
            3
        ]
    ],
    ':': [
        10,
        [
            5,
            14,
            4,
            13,
            5,
            12,
            6,
            13,
            5,
            14,
            -1,
            -1,
            5,
            2,
            4,
            1,
            5,
            0,
            6,
            1,
            5,
            2
        ]
    ],
    ';': [
        10,
        [
            5,
            14,
            4,
            13,
            5,
            12,
            6,
            13,
            5,
            14,
            -1,
            -1,
            6,
            1,
            5,
            0,
            4,
            1,
            5,
            2,
            6,
            1,
            6,
            -1,
            5,
            -3,
            4,
            -4
        ]
    ],
    '<': [
        24,
        [
            20,
            18,
            4,
            9,
            20,
            0
        ]
    ],
    '=': [
        26,
        [
            4,
            12,
            22,
            12,
            -1,
            -1,
            4,
            6,
            22,
            6
        ]
    ],
    '>': [
        24,
        [
            4,
            18,
            20,
            9,
            4,
            0
        ]
    ],
    '?': [
        18,
        [
            3,
            16,
            3,
            17,
            4,
            19,
            5,
            20,
            7,
            21,
            11,
            21,
            13,
            20,
            14,
            19,
            15,
            17,
            15,
            15,
            14,
            13,
            13,
            12,
            9,
            10,
            9,
            7,
            -1,
            -1,
            9,
            2,
            8,
            1,
            9,
            0,
            10,
            1,
            9,
            2
        ]
    ],
    '@': [
        27,
        [
            18,
            13,
            17,
            15,
            15,
            16,
            12,
            16,
            10,
            15,
            9,
            14,
            8,
            11,
            8,
            8,
            9,
            6,
            11,
            5,
            14,
            5,
            16,
            6,
            17,
            8,
            -1,
            -1,
            12,
            16,
            10,
            14,
            9,
            11,
            9,
            8,
            10,
            6,
            11,
            5,
            -1,
            -1,
            18,
            16,
            17,
            8,
            17,
            6,
            19,
            5,
            21,
            5,
            23,
            7,
            24,
            10,
            24,
            12,
            23,
            15,
            22,
            17,
            20,
            19,
            18,
            20,
            15,
            21,
            12,
            21,
            9,
            20,
            7,
            19,
            5,
            17,
            4,
            15,
            3,
            12,
            3,
            9,
            4,
            6,
            5,
            4,
            7,
            2,
            9,
            1,
            12,
            0,
            15,
            0,
            18,
            1,
            20,
            2,
            21,
            3,
            -1,
            -1,
            19,
            16,
            18,
            8,
            18,
            6,
            19,
            5
        ]
    ],
    'A': [
        18,
        [
            9,
            21,
            1,
            0,
            -1,
            -1,
            9,
            21,
            17,
            0,
            -1,
            -1,
            4,
            7,
            14,
            7
        ]
    ],
    'B': [
        21,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            4,
            21,
            13,
            21,
            16,
            20,
            17,
            19,
            18,
            17,
            18,
            15,
            17,
            13,
            16,
            12,
            13,
            11,
            -1,
            -1,
            4,
            11,
            13,
            11,
            16,
            10,
            17,
            9,
            18,
            7,
            18,
            4,
            17,
            2,
            16,
            1,
            13,
            0,
            4,
            0
        ]
    ],
    'C': [
        21,
        [
            18,
            16,
            17,
            18,
            15,
            20,
            13,
            21,
            9,
            21,
            7,
            20,
            5,
            18,
            4,
            16,
            3,
            13,
            3,
            8,
            4,
            5,
            5,
            3,
            7,
            1,
            9,
            0,
            13,
            0,
            15,
            1,
            17,
            3,
            18,
            5
        ]
    ],
    'D': [
        21,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            4,
            21,
            11,
            21,
            14,
            20,
            16,
            18,
            17,
            16,
            18,
            13,
            18,
            8,
            17,
            5,
            16,
            3,
            14,
            1,
            11,
            0,
            4,
            0
        ]
    ],
    'E': [
        19,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            4,
            21,
            17,
            21,
            -1,
            -1,
            4,
            11,
            12,
            11,
            -1,
            -1,
            4,
            0,
            17,
            0
        ]
    ],
    'F': [
        18,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            4,
            21,
            17,
            21,
            -1,
            -1,
            4,
            11,
            12,
            11
        ]
    ],
    'G': [
        21,
        [
            18,
            16,
            17,
            18,
            15,
            20,
            13,
            21,
            9,
            21,
            7,
            20,
            5,
            18,
            4,
            16,
            3,
            13,
            3,
            8,
            4,
            5,
            5,
            3,
            7,
            1,
            9,
            0,
            13,
            0,
            15,
            1,
            17,
            3,
            18,
            5,
            18,
            8,
            -1,
            -1,
            13,
            8,
            18,
            8
        ]
    ],
    'H': [
        22,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            18,
            21,
            18,
            0,
            -1,
            -1,
            4,
            11,
            18,
            11
        ]
    ],
    'I': [
        8,
        [
            4,
            21,
            4,
            0
        ]
    ],
    'J': [
        16,
        [
            12,
            21,
            12,
            5,
            11,
            2,
            10,
            1,
            8,
            0,
            6,
            0,
            4,
            1,
            3,
            2,
            2,
            5,
            2,
            7
        ]
    ],
    'K': [
        21,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            18,
            21,
            4,
            7,
            -1,
            -1,
            9,
            12,
            18,
            0
        ]
    ],
    'L': [
        17,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            4,
            0,
            16,
            0
        ]
    ],
    'M': [
        24,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            4,
            21,
            12,
            0,
            -1,
            -1,
            20,
            21,
            12,
            0,
            -1,
            -1,
            20,
            21,
            20,
            0
        ]
    ],
    'N': [
        22,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            4,
            21,
            18,
            0,
            -1,
            -1,
            18,
            21,
            18,
            0
        ]
    ],
    'O': [
        22,
        [
            9,
            21,
            7,
            20,
            5,
            18,
            4,
            16,
            3,
            13,
            3,
            8,
            4,
            5,
            5,
            3,
            7,
            1,
            9,
            0,
            13,
            0,
            15,
            1,
            17,
            3,
            18,
            5,
            19,
            8,
            19,
            13,
            18,
            16,
            17,
            18,
            15,
            20,
            13,
            21,
            9,
            21
        ]
    ],
    'P': [
        21,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            4,
            21,
            13,
            21,
            16,
            20,
            17,
            19,
            18,
            17,
            18,
            14,
            17,
            12,
            16,
            11,
            13,
            10,
            4,
            10
        ]
    ],
    'Q': [
        22,
        [
            9,
            21,
            7,
            20,
            5,
            18,
            4,
            16,
            3,
            13,
            3,
            8,
            4,
            5,
            5,
            3,
            7,
            1,
            9,
            0,
            13,
            0,
            15,
            1,
            17,
            3,
            18,
            5,
            19,
            8,
            19,
            13,
            18,
            16,
            17,
            18,
            15,
            20,
            13,
            21,
            9,
            21,
            -1,
            -1,
            12,
            4,
            18,
            -2
        ]
    ],
    'R': [
        21,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            4,
            21,
            13,
            21,
            16,
            20,
            17,
            19,
            18,
            17,
            18,
            15,
            17,
            13,
            16,
            12,
            13,
            11,
            4,
            11,
            -1,
            -1,
            11,
            11,
            18,
            0
        ]
    ],
    'S': [
        20,
        [
            17,
            18,
            15,
            20,
            12,
            21,
            8,
            21,
            5,
            20,
            3,
            18,
            3,
            16,
            4,
            14,
            5,
            13,
            7,
            12,
            13,
            10,
            15,
            9,
            16,
            8,
            17,
            6,
            17,
            3,
            15,
            1,
            12,
            0,
            8,
            0,
            5,
            1,
            3,
            3
        ]
    ],
    'T': [
        16,
        [
            8,
            21,
            8,
            0,
            -1,
            -1,
            1,
            21,
            15,
            21
        ]
    ],
    'U': [
        22,
        [
            4,
            21,
            4,
            6,
            5,
            3,
            7,
            1,
            10,
            0,
            12,
            0,
            15,
            1,
            17,
            3,
            18,
            6,
            18,
            21
        ]
    ],
    'V': [
        18,
        [
            1,
            21,
            9,
            0,
            -1,
            -1,
            17,
            21,
            9,
            0
        ]
    ],
    'W': [
        24,
        [
            2,
            21,
            7,
            0,
            -1,
            -1,
            12,
            21,
            7,
            0,
            -1,
            -1,
            12,
            21,
            17,
            0,
            -1,
            -1,
            22,
            21,
            17,
            0
        ]
    ],
    'X': [
        20,
        [
            3,
            21,
            17,
            0,
            -1,
            -1,
            17,
            21,
            3,
            0
        ]
    ],
    'Y': [
        18,
        [
            1,
            21,
            9,
            11,
            9,
            0,
            -1,
            -1,
            17,
            21,
            9,
            11
        ]
    ],
    'Z': [
        20,
        [
            17,
            21,
            3,
            0,
            -1,
            -1,
            3,
            21,
            17,
            21,
            -1,
            -1,
            3,
            0,
            17,
            0
        ]
    ],
    '[': [
        14,
        [
            4,
            25,
            4,
            -7,
            -1,
            -1,
            5,
            25,
            5,
            -7,
            -1,
            -1,
            4,
            25,
            11,
            25,
            -1,
            -1,
            4,
            -7,
            11,
            -7
        ]
    ],
    '\\': [
        14,
        [
            0,
            21,
            14,
            -3
        ]
    ],
    ']': [
        14,
        [
            9,
            25,
            9,
            -7,
            -1,
            -1,
            10,
            25,
            10,
            -7,
            -1,
            -1,
            3,
            25,
            10,
            25,
            -1,
            -1,
            3,
            -7,
            10,
            -7
        ]
    ],
    '^': [
        16,
        [
            6,
            15,
            8,
            18,
            10,
            15,
            -1,
            -1,
            3,
            12,
            8,
            17,
            13,
            12,
            -1,
            -1,
            8,
            17,
            8,
            0
        ]
    ],
    '_': [
        16,
        [
            0,
            -2,
            16,
            -2
        ]
    ],
    '`': [
        10,
        [
            6,
            21,
            5,
            20,
            4,
            18,
            4,
            16,
            5,
            15,
            6,
            16,
            5,
            17
        ]
    ],
    'a': [
        19,
        [
            15,
            14,
            15,
            0,
            -1,
            -1,
            15,
            11,
            13,
            13,
            11,
            14,
            8,
            14,
            6,
            13,
            4,
            11,
            3,
            8,
            3,
            6,
            4,
            3,
            6,
            1,
            8,
            0,
            11,
            0,
            13,
            1,
            15,
            3
        ]
    ],
    'b': [
        19,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            4,
            11,
            6,
            13,
            8,
            14,
            11,
            14,
            13,
            13,
            15,
            11,
            16,
            8,
            16,
            6,
            15,
            3,
            13,
            1,
            11,
            0,
            8,
            0,
            6,
            1,
            4,
            3
        ]
    ],
    'c': [
        18,
        [
            15,
            11,
            13,
            13,
            11,
            14,
            8,
            14,
            6,
            13,
            4,
            11,
            3,
            8,
            3,
            6,
            4,
            3,
            6,
            1,
            8,
            0,
            11,
            0,
            13,
            1,
            15,
            3
        ]
    ],
    'd': [
        19,
        [
            15,
            21,
            15,
            0,
            -1,
            -1,
            15,
            11,
            13,
            13,
            11,
            14,
            8,
            14,
            6,
            13,
            4,
            11,
            3,
            8,
            3,
            6,
            4,
            3,
            6,
            1,
            8,
            0,
            11,
            0,
            13,
            1,
            15,
            3
        ]
    ],
    'e': [
        18,
        [
            3,
            8,
            15,
            8,
            15,
            10,
            14,
            12,
            13,
            13,
            11,
            14,
            8,
            14,
            6,
            13,
            4,
            11,
            3,
            8,
            3,
            6,
            4,
            3,
            6,
            1,
            8,
            0,
            11,
            0,
            13,
            1,
            15,
            3
        ]
    ],
    'f': [
        12,
        [
            10,
            21,
            8,
            21,
            6,
            20,
            5,
            17,
            5,
            0,
            -1,
            -1,
            2,
            14,
            9,
            14
        ]
    ],
    'g': [
        19,
        [
            15,
            14,
            15,
            -2,
            14,
            -5,
            13,
            -6,
            11,
            -7,
            8,
            -7,
            6,
            -6,
            -1,
            -1,
            15,
            11,
            13,
            13,
            11,
            14,
            8,
            14,
            6,
            13,
            4,
            11,
            3,
            8,
            3,
            6,
            4,
            3,
            6,
            1,
            8,
            0,
            11,
            0,
            13,
            1,
            15,
            3
        ]
    ],
    'h': [
        19,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            4,
            10,
            7,
            13,
            9,
            14,
            12,
            14,
            14,
            13,
            15,
            10,
            15,
            0
        ]
    ],
    'i': [
        8,
        [
            3,
            21,
            4,
            20,
            5,
            21,
            4,
            22,
            3,
            21,
            -1,
            -1,
            4,
            14,
            4,
            0
        ]
    ],
    'j': [
        10,
        [
            5,
            21,
            6,
            20,
            7,
            21,
            6,
            22,
            5,
            21,
            -1,
            -1,
            6,
            14,
            6,
            -3,
            5,
            -6,
            3,
            -7,
            1,
            -7
        ]
    ],
    'k': [
        17,
        [
            4,
            21,
            4,
            0,
            -1,
            -1,
            14,
            14,
            4,
            4,
            -1,
            -1,
            8,
            8,
            15,
            0
        ]
    ],
    'l': [
        8,
        [
            4,
            21,
            4,
            0
        ]
    ],
    'm': [
        30,
        [
            4,
            14,
            4,
            0,
            -1,
            -1,
            4,
            10,
            7,
            13,
            9,
            14,
            12,
            14,
            14,
            13,
            15,
            10,
            15,
            0,
            -1,
            -1,
            15,
            10,
            18,
            13,
            20,
            14,
            23,
            14,
            25,
            13,
            26,
            10,
            26,
            0
        ]
    ],
    'n': [
        19,
        [
            4,
            14,
            4,
            0,
            -1,
            -1,
            4,
            10,
            7,
            13,
            9,
            14,
            12,
            14,
            14,
            13,
            15,
            10,
            15,
            0
        ]
    ],
    'o': [
        19,
        [
            8,
            14,
            6,
            13,
            4,
            11,
            3,
            8,
            3,
            6,
            4,
            3,
            6,
            1,
            8,
            0,
            11,
            0,
            13,
            1,
            15,
            3,
            16,
            6,
            16,
            8,
            15,
            11,
            13,
            13,
            11,
            14,
            8,
            14
        ]
    ],
    'p': [
        19,
        [
            4,
            14,
            4,
            -7,
            -1,
            -1,
            4,
            11,
            6,
            13,
            8,
            14,
            11,
            14,
            13,
            13,
            15,
            11,
            16,
            8,
            16,
            6,
            15,
            3,
            13,
            1,
            11,
            0,
            8,
            0,
            6,
            1,
            4,
            3
        ]
    ],
    'q': [
        19,
        [
            15,
            14,
            15,
            -7,
            -1,
            -1,
            15,
            11,
            13,
            13,
            11,
            14,
            8,
            14,
            6,
            13,
            4,
            11,
            3,
            8,
            3,
            6,
            4,
            3,
            6,
            1,
            8,
            0,
            11,
            0,
            13,
            1,
            15,
            3
        ]
    ],
    'r': [
        13,
        [
            4,
            14,
            4,
            0,
            -1,
            -1,
            4,
            8,
            5,
            11,
            7,
            13,
            9,
            14,
            12,
            14
        ]
    ],
    's': [
        17,
        [
            14,
            11,
            13,
            13,
            10,
            14,
            7,
            14,
            4,
            13,
            3,
            11,
            4,
            9,
            6,
            8,
            11,
            7,
            13,
            6,
            14,
            4,
            14,
            3,
            13,
            1,
            10,
            0,
            7,
            0,
            4,
            1,
            3,
            3
        ]
    ],
    't': [
        12,
        [
            5,
            21,
            5,
            4,
            6,
            1,
            8,
            0,
            10,
            0,
            -1,
            -1,
            2,
            14,
            9,
            14
        ]
    ],
    'u': [
        19,
        [
            4,
            14,
            4,
            4,
            5,
            1,
            7,
            0,
            10,
            0,
            12,
            1,
            15,
            4,
            -1,
            -1,
            15,
            14,
            15,
            0
        ]
    ],
    'v': [
        16,
        [
            2,
            14,
            8,
            0,
            -1,
            -1,
            14,
            14,
            8,
            0
        ]
    ],
    'w': [
        22,
        [
            3,
            14,
            7,
            0,
            -1,
            -1,
            11,
            14,
            7,
            0,
            -1,
            -1,
            11,
            14,
            15,
            0,
            -1,
            -1,
            19,
            14,
            15,
            0
        ]
    ],
    'x': [
        17,
        [
            3,
            14,
            14,
            0,
            -1,
            -1,
            14,
            14,
            3,
            0
        ]
    ],
    'y': [
        16,
        [
            2,
            14,
            8,
            0,
            -1,
            -1,
            14,
            14,
            8,
            0,
            6,
            -4,
            4,
            -6,
            2,
            -7,
            1,
            -7
        ]
    ],
    'z': [
        17,
        [
            14,
            14,
            3,
            0,
            -1,
            -1,
            3,
            14,
            14,
            14,
            -1,
            -1,
            3,
            0,
            14,
            0
        ]
    ],
    '{': [
        14,
        [
            9,
            25,
            7,
            24,
            6,
            23,
            5,
            21,
            5,
            19,
            6,
            17,
            7,
            16,
            8,
            14,
            8,
            12,
            6,
            10,
            -1,
            -1,
            7,
            24,
            6,
            22,
            6,
            20,
            7,
            18,
            8,
            17,
            9,
            15,
            9,
            13,
            8,
            11,
            4,
            9,
            8,
            7,
            9,
            5,
            9,
            3,
            8,
            1,
            7,
            0,
            6,
            -2,
            6,
            -4,
            7,
            -6,
            -1,
            -1,
            6,
            8,
            8,
            6,
            8,
            4,
            7,
            2,
            6,
            1,
            5,
            -1,
            5,
            -3,
            6,
            -5,
            7,
            -6,
            9,
            -7
        ]
    ],
    '|': [
        8,
        [
            4,
            25,
            4,
            -7
        ]
    ],
    '}': [
        14,
        [
            5,
            25,
            7,
            24,
            8,
            23,
            9,
            21,
            9,
            19,
            8,
            17,
            7,
            16,
            6,
            14,
            6,
            12,
            8,
            10,
            -1,
            -1,
            7,
            24,
            8,
            22,
            8,
            20,
            7,
            18,
            6,
            17,
            5,
            15,
            5,
            13,
            6,
            11,
            10,
            9,
            6,
            7,
            5,
            5,
            5,
            3,
            6,
            1,
            7,
            0,
            8,
            -2,
            8,
            -4,
            7,
            -6,
            -1,
            -1,
            8,
            8,
            6,
            6,
            6,
            4,
            7,
            2,
            8,
            1,
            9,
            -1,
            9,
            -3,
            8,
            -5,
            7,
            -6,
            5,
            -7
        ]
    ],
    '~': [
        24,
        [
            3,
            6,
            3,
            8,
            4,
            11,
            6,
            12,
            8,
            12,
            10,
            11,
            14,
            8,
            16,
            7,
            18,
            7,
            20,
            8,
            21,
            10,
            -1,
            -1,
            3,
            8,
            4,
            10,
            6,
            11,
            8,
            11,
            10,
            10,
            14,
            7,
            16,
            6,
            18,
            6,
            20,
            7,
            21,
            10,
            21,
            12
        ]
    ]
};
function createTextVertices(text, left, baseline, scale) {
    scale = scale || 1;
    var strokes = [];
    var i, len, j, len2, glyph, x, y, prev;
    for (i = 0, len = text.length; i < len; i++) {
        glyph = simplexFont[text[i]];
        if (!glyph) {
            continue;
        }
        prev = null;
        for (j = 0, len2 = glyph[1].length; j < len2; j += 2) {
            if (glyph[1][j] === -1 && glyph[1][j + 1] === -1) {
                prev = null;
            } else {
                x = left + glyph[1][j] * scale;
                y = baseline - glyph[1][j + 1] * scale;
                if (prev) {
                    strokes.push(prev.x, prev.y, x, y);
                }
                prev = {
                    x: x,
                    y: y
                };
            }
        }
        left += glyph[0] * scale;
    }
    return strokes;
}

function drawCustom(painter, sourceCache, layer) {
    var context = painter.context;
    var implementation = layer.implementation;
    if (painter.renderPass === 'offscreen') {
        var prerender = implementation.prerender;
        if (prerender) {
            painter.setCustomLayerDefaults();
            prerender.call(implementation, context.gl, painter.transform.customLayerMatrix());
            context.setDirty();
            painter.setBaseState();
        }
        if (implementation.renderingMode === '3d') {
            painter.setCustomLayerDefaults();
            prepareOffscreenFramebuffer(painter, layer);
            implementation.render(context.gl, painter.transform.customLayerMatrix());
            context.setDirty();
            painter.setBaseState();
        }
    } else if (painter.renderPass === 'translucent') {
        if (implementation.renderingMode === '3d') {
            drawOffscreenTexture(painter, layer, 1);
        } else {
            painter.setCustomLayerDefaults();
            context.setStencilMode(StencilMode.disabled);
            var depthMode = painter.depthModeForSublayer(0, DepthMode.ReadOnly);
            context.setDepthMode(depthMode);
            implementation.render(context.gl, painter.transform.customLayerMatrix());
            context.setDirty();
            painter.setBaseState();
            context.bindFramebuffer.set(null);
        }
    }
}

var draw$1 = {
    symbol: drawSymbols,
    circle: drawCircles,
    heatmap: drawHeatmap,
    line: drawLine,
    fill: drawFill,
    'fill-extrusion': draw,
    hillshade: drawHillshade,
    raster: drawRaster,
    background: drawBackground,
    debug: drawDebug,
    custom: drawCustom
};
var Painter = function Painter(gl, transform) {
    this.context = new Context(gl);
    this.transform = transform;
    this._tileTextures = {};
    this.setup();
    this.numSublayers = SourceCache.maxUnderzooming + SourceCache.maxOverzooming + 1;
    this.depthEpsilon = 1 / Math.pow(2, 16);
    this.depthRboNeedsClear = true;
    this.emptyProgramConfiguration = new __chunk_1.ProgramConfiguration();
    this.crossTileSymbolIndex = new CrossTileSymbolIndex();
};
Painter.prototype.resize = function resize(width, height) {
    var this$1 = this;
    var gl = this.context.gl;
    this.width = width * __chunk_1.browser.devicePixelRatio;
    this.height = height * __chunk_1.browser.devicePixelRatio;
    this.context.viewport.set([
        0,
        0,
        this.width,
        this.height
    ]);
    if (this.style) {
        for (var i = 0, list = this$1.style._order; i < list.length; i += 1) {
            var layerId = list[i];
            this$1.style._layers[layerId].resize();
        }
    }
    if (this.depthRbo) {
        gl.deleteRenderbuffer(this.depthRbo);
        this.depthRbo = null;
    }
};
Painter.prototype.setup = function setup() {
    var context = this.context;
    var tileExtentArray = new __chunk_1.StructArrayLayout2i4();
    tileExtentArray.emplaceBack(0, 0);
    tileExtentArray.emplaceBack(__chunk_1.EXTENT, 0);
    tileExtentArray.emplaceBack(0, __chunk_1.EXTENT);
    tileExtentArray.emplaceBack(__chunk_1.EXTENT, __chunk_1.EXTENT);
    this.tileExtentBuffer = context.createVertexBuffer(tileExtentArray, posAttributes.members);
    this.tileExtentSegments = __chunk_1.SegmentVector.simpleSegment(0, 0, 4, 2);
    var debugArray = new __chunk_1.StructArrayLayout2i4();
    debugArray.emplaceBack(0, 0);
    debugArray.emplaceBack(__chunk_1.EXTENT, 0);
    debugArray.emplaceBack(0, __chunk_1.EXTENT);
    debugArray.emplaceBack(__chunk_1.EXTENT, __chunk_1.EXTENT);
    this.debugBuffer = context.createVertexBuffer(debugArray, posAttributes.members);
    this.debugSegments = __chunk_1.SegmentVector.simpleSegment(0, 0, 4, 5);
    var rasterBoundsArray = new __chunk_1.StructArrayLayout4i8();
    rasterBoundsArray.emplaceBack(0, 0, 0, 0);
    rasterBoundsArray.emplaceBack(__chunk_1.EXTENT, 0, __chunk_1.EXTENT, 0);
    rasterBoundsArray.emplaceBack(0, __chunk_1.EXTENT, 0, __chunk_1.EXTENT);
    rasterBoundsArray.emplaceBack(__chunk_1.EXTENT, __chunk_1.EXTENT, __chunk_1.EXTENT, __chunk_1.EXTENT);
    this.rasterBoundsBuffer = context.createVertexBuffer(rasterBoundsArray, __chunk_1.rasterBoundsAttributes.members);
    this.rasterBoundsSegments = __chunk_1.SegmentVector.simpleSegment(0, 0, 4, 2);
    var viewportArray = new __chunk_1.StructArrayLayout2i4();
    viewportArray.emplaceBack(0, 0);
    viewportArray.emplaceBack(1, 0);
    viewportArray.emplaceBack(0, 1);
    viewportArray.emplaceBack(1, 1);
    this.viewportBuffer = context.createVertexBuffer(viewportArray, posAttributes.members);
    this.viewportSegments = __chunk_1.SegmentVector.simpleSegment(0, 0, 4, 2);
    var tileLineStripIndices = new __chunk_1.StructArrayLayout1ui2();
    tileLineStripIndices.emplaceBack(0);
    tileLineStripIndices.emplaceBack(1);
    tileLineStripIndices.emplaceBack(3);
    tileLineStripIndices.emplaceBack(2);
    tileLineStripIndices.emplaceBack(0);
    this.tileBorderIndexBuffer = context.createIndexBuffer(tileLineStripIndices);
    var quadTriangleIndices = new __chunk_1.StructArrayLayout3ui6();
    quadTriangleIndices.emplaceBack(0, 1, 2);
    quadTriangleIndices.emplaceBack(2, 1, 3);
    this.quadTriangleIndexBuffer = context.createIndexBuffer(quadTriangleIndices);
    var gl = this.context.gl;
    this.stencilClearMode = new StencilMode({
        func: gl.ALWAYS,
        mask: 0
    }, 0, 255, gl.ZERO, gl.ZERO, gl.ZERO);
};
Painter.prototype.clearStencil = function clearStencil() {
    var context = this.context;
    var gl = context.gl;
    var matrix = __chunk_1.create();
    __chunk_1.ortho(matrix, 0, this.width, this.height, 0, 0, 1);
    __chunk_1.scale(matrix, matrix, [
        gl.drawingBufferWidth,
        gl.drawingBufferHeight,
        0
    ]);
    this.useProgram('clippingMask').draw(context, gl.TRIANGLES, DepthMode.disabled, this.stencilClearMode, ColorMode.disabled, CullFaceMode.disabled, clippingMaskUniformValues(matrix), '$clipping', this.viewportBuffer, this.quadTriangleIndexBuffer, this.viewportSegments);
};
Painter.prototype._renderTileClippingMasks = function _renderTileClippingMasks(tileIDs) {
    var this$1 = this;
    var context = this.context;
    var gl = context.gl;
    context.setColorMode(ColorMode.disabled);
    context.setDepthMode(DepthMode.disabled);
    var program = this.useProgram('clippingMask');
    var idNext = 1;
    this._tileClippingMaskIDs = {};
    for (var i = 0, list = tileIDs; i < list.length; i += 1) {
        var tileID = list[i];
        var id = this$1._tileClippingMaskIDs[tileID.key] = idNext++;
        program.draw(context, gl.TRIANGLES, DepthMode.disabled, new StencilMode({
            func: gl.ALWAYS,
            mask: 0
        }, id, 255, gl.KEEP, gl.KEEP, gl.REPLACE), ColorMode.disabled, CullFaceMode.disabled, clippingMaskUniformValues(tileID.posMatrix), '$clipping', this$1.tileExtentBuffer, this$1.quadTriangleIndexBuffer, this$1.tileExtentSegments);
    }
};
Painter.prototype.stencilModeForClipping = function stencilModeForClipping(tileID) {
    var gl = this.context.gl;
    return new StencilMode({
        func: gl.EQUAL,
        mask: 255
    }, this._tileClippingMaskIDs[tileID.key], 0, gl.KEEP, gl.KEEP, gl.REPLACE);
};
Painter.prototype.colorModeForRenderPass = function colorModeForRenderPass() {
    var gl = this.context.gl;
    if (this._showOverdrawInspector) {
        var numOverdrawSteps = 8;
        var a = 1 / numOverdrawSteps;
        return new ColorMode([
            gl.CONSTANT_COLOR,
            gl.ONE
        ], new __chunk_1.Color(a, a, a, 0), [
            true,
            true,
            true,
            true
        ]);
    } else if (this.renderPass === 'opaque') {
        return ColorMode.unblended;
    } else {
        return ColorMode.alphaBlended;
    }
};
Painter.prototype.depthModeForSublayer = function depthModeForSublayer(n, mask, func) {
    var farDepth = 1 - ((1 + this.currentLayer) * this.numSublayers + n) * this.depthEpsilon;
    var nearDepth = farDepth - 1 + this.depthRange;
    return new DepthMode(func || this.context.gl.LEQUAL, mask, [
        nearDepth,
        farDepth
    ]);
};
Painter.prototype.render = function render(style, options) {
    var this$1 = this;
    this.style = style;
    this.options = options;
    this.lineAtlas = style.lineAtlas;
    this.imageManager = style.imageManager;
    this.glyphManager = style.glyphManager;
    this.symbolFadeChange = style.placement.symbolFadeChange(__chunk_1.browser.now());
    var layerIds = this.style._order;
    var sourceCaches = this.style.sourceCaches;
    for (var id in sourceCaches) {
        var sourceCache = sourceCaches[id];
        if (sourceCache.used) {
            sourceCache.prepare(this$1.context);
        }
    }
    var coordsAscending = {};
    var coordsDescending = {};
    var coordsDescendingSymbol = {};
    for (var id$1 in sourceCaches) {
        var sourceCache$1 = sourceCaches[id$1];
        coordsAscending[id$1] = sourceCache$1.getVisibleCoordinates();
        coordsDescending[id$1] = coordsAscending[id$1].slice().reverse();
        coordsDescendingSymbol[id$1] = sourceCache$1.getVisibleCoordinates(true).reverse();
    }
    for (var id$2 in sourceCaches) {
        var sourceCache$2 = sourceCaches[id$2];
        var source = sourceCache$2.getSource();
        if (source.type !== 'raster' && source.type !== 'raster-dem') {
            continue;
        }
        var visibleTiles = [];
        for (var i = 0, list = coordsAscending[id$2]; i < list.length; i += 1) {
            var coord = list[i];
            visibleTiles.push(sourceCache$2.getTile(coord));
        }
        updateTileMasks(visibleTiles, this$1.context);
    }
    this.renderPass = 'offscreen';
    this.depthRboNeedsClear = true;
    for (var i$1 = 0, list$1 = layerIds; i$1 < list$1.length; i$1 += 1) {
        var layerId = list$1[i$1];
        var layer = this$1.style._layers[layerId];
        if (!layer.hasOffscreenPass() || layer.isHidden(this$1.transform.zoom)) {
            continue;
        }
        var coords = coordsDescending[layer.source];
        if (layer.type !== 'custom' && !coords.length) {
            continue;
        }
        this$1.renderLayer(this$1, sourceCaches[layer.source], layer, coords);
    }
    this.context.bindFramebuffer.set(null);
    this.context.clear({
        color: options.showOverdrawInspector ? __chunk_1.Color.black : __chunk_1.Color.transparent,
        depth: 1
    });
    this._showOverdrawInspector = options.showOverdrawInspector;
    this.depthRange = (style._order.length + 2) * this.numSublayers * this.depthEpsilon;
    this.renderPass = 'opaque';
    var prevSourceId;
    for (this.currentLayer = layerIds.length - 1; this.currentLayer >= 0; this.currentLayer--) {
        var layer$1 = this$1.style._layers[layerIds[this$1.currentLayer]];
        var sourceCache$3 = sourceCaches[layer$1.source];
        var coords$1 = coordsAscending[layer$1.source];
        if (layer$1.source !== prevSourceId && sourceCache$3) {
            this$1.clearStencil();
            if (sourceCache$3.getSource().isTileClipped) {
                this$1._renderTileClippingMasks(coords$1);
            }
        }
        this$1.renderLayer(this$1, sourceCache$3, layer$1, coords$1);
        prevSourceId = layer$1.source;
    }
    this.renderPass = 'translucent';
    for (this.currentLayer = 0, prevSourceId = null; this.currentLayer < layerIds.length; this.currentLayer++) {
        var layer$2 = this$1.style._layers[layerIds[this$1.currentLayer]];
        var sourceCache$4 = sourceCaches[layer$2.source];
        var coords$2 = (layer$2.type === 'symbol' ? coordsDescendingSymbol : coordsDescending)[layer$2.source];
        if (layer$2.source !== prevSourceId && sourceCache$4) {
            this$1.clearStencil();
            if (sourceCache$4.getSource().isTileClipped) {
                this$1._renderTileClippingMasks(coordsAscending[layer$2.source]);
            }
        }
        this$1.renderLayer(this$1, sourceCache$4, layer$2, coords$2);
        prevSourceId = layer$2.source;
    }
    if (this.options.showTileBoundaries) {
        for (var id$3 in sourceCaches) {
            draw$1.debug(this$1, sourceCaches[id$3], coordsAscending[id$3]);
            break;
        }
    }
    this.setCustomLayerDefaults();
};
Painter.prototype.setupOffscreenDepthRenderbuffer = function setupOffscreenDepthRenderbuffer() {
    var context = this.context;
    if (!this.depthRbo) {
        this.depthRbo = context.createRenderbuffer(context.gl.DEPTH_COMPONENT16, this.width, this.height);
    }
};
Painter.prototype.renderLayer = function renderLayer(painter, sourceCache, layer, coords) {
    if (layer.isHidden(this.transform.zoom)) {
        return;
    }
    if (layer.type !== 'background' && layer.type !== 'custom' && !coords.length) {
        return;
    }
    this.id = layer.id;
    draw$1[layer.type](painter, sourceCache, layer, coords);
};
Painter.prototype.translatePosMatrix = function translatePosMatrix(matrix, tile, translate, translateAnchor, inViewportPixelUnitsUnits) {
    if (!translate[0] && !translate[1]) {
        return matrix;
    }
    var angle = inViewportPixelUnitsUnits ? translateAnchor === 'map' ? this.transform.angle : 0 : translateAnchor === 'viewport' ? -this.transform.angle : 0;
    if (angle) {
        var sinA = Math.sin(angle);
        var cosA = Math.cos(angle);
        translate = [
            translate[0] * cosA - translate[1] * sinA,
            translate[0] * sinA + translate[1] * cosA
        ];
    }
    var translation = [
        inViewportPixelUnitsUnits ? translate[0] : pixelsToTileUnits(tile, translate[0], this.transform.zoom),
        inViewportPixelUnitsUnits ? translate[1] : pixelsToTileUnits(tile, translate[1], this.transform.zoom),
        0
    ];
    var translatedMatrix = new Float32Array(16);
    __chunk_1.translate(translatedMatrix, matrix, translation);
    return translatedMatrix;
};
Painter.prototype.saveTileTexture = function saveTileTexture(texture) {
    var textures = this._tileTextures[texture.size[0]];
    if (!textures) {
        this._tileTextures[texture.size[0]] = [texture];
    } else {
        textures.push(texture);
    }
};
Painter.prototype.getTileTexture = function getTileTexture(size) {
    var textures = this._tileTextures[size];
    return textures && textures.length > 0 ? textures.pop() : null;
};
Painter.prototype.isPatternMissing = function isPatternMissing(image) {
    if (!image) {
        return false;
    }
    var imagePosA = this.imageManager.getPattern(image.from);
    var imagePosB = this.imageManager.getPattern(image.to);
    return !imagePosA || !imagePosB;
};
Painter.prototype.useProgram = function useProgram(name, programConfiguration) {
    if (programConfiguration === void 0)
        programConfiguration = this.emptyProgramConfiguration;
    this.cache = this.cache || {};
    var key = '' + name + (programConfiguration.cacheKey || '') + (this._showOverdrawInspector ? '/overdraw' : '');
    if (!this.cache[key]) {
        this.cache[key] = new Program$1(this.context, shaders[name], programConfiguration, programUniforms[name], this._showOverdrawInspector);
    }
    return this.cache[key];
};
Painter.prototype.setCustomLayerDefaults = function setCustomLayerDefaults() {
    this.context.unbindVAO();
    this.context.cullFace.setDefault();
    this.context.activeTexture.setDefault();
    this.context.pixelStoreUnpack.setDefault();
    this.context.pixelStoreUnpackPremultiplyAlpha.setDefault();
    this.context.pixelStoreUnpackFlipY.setDefault();
};
Painter.prototype.setBaseState = function setBaseState() {
    var gl = this.context.gl;
    this.context.cullFace.set(false);
    this.context.viewport.set([
        0,
        0,
        this.width,
        this.height
    ]);
    this.context.blendEquation.set(gl.FUNC_ADD);
};

function tileCover(z, bounds, actualZ, renderWorldCopies) {
    if (renderWorldCopies === undefined) {
        renderWorldCopies = true;
    }
    var tiles = 1 << z;
    var t = {};
    function scanLine(x0, x1, y) {
        var x, w, wx, coord;
        if (y >= 0 && y <= tiles) {
            for (x = x0; x < x1; x++) {
                w = Math.floor(x / tiles);
                wx = (x % tiles + tiles) % tiles;
                if (w === 0 || renderWorldCopies === true) {
                    coord = new __chunk_1.OverscaledTileID(actualZ, w, z, wx, y);
                    t[coord.key] = coord;
                }
            }
        }
    }
    scanTriangle(bounds[0], bounds[1], bounds[2], 0, tiles, scanLine);
    scanTriangle(bounds[2], bounds[3], bounds[0], 0, tiles, scanLine);
    return Object.keys(t).map(function (id) {
        return t[id];
    });
}
function edge(a, b) {
    if (a.row > b.row) {
        var t = a;
        a = b;
        b = t;
    }
    return {
        x0: a.column,
        y0: a.row,
        x1: b.column,
        y1: b.row,
        dx: b.column - a.column,
        dy: b.row - a.row
    };
}
function scanSpans(e0, e1, ymin, ymax, scanLine) {
    var y0 = Math.max(ymin, Math.floor(e1.y0));
    var y1 = Math.min(ymax, Math.ceil(e1.y1));
    if (e0.x0 === e1.x0 && e0.y0 === e1.y0 ? e0.x0 + e1.dy / e0.dy * e0.dx < e1.x1 : e0.x1 - e1.dy / e0.dy * e0.dx < e1.x0) {
        var t = e0;
        e0 = e1;
        e1 = t;
    }
    var m0 = e0.dx / e0.dy;
    var m1 = e1.dx / e1.dy;
    var d0 = e0.dx > 0;
    var d1 = e1.dx < 0;
    for (var y = y0; y < y1; y++) {
        var x0 = m0 * Math.max(0, Math.min(e0.dy, y + d0 - e0.y0)) + e0.x0;
        var x1 = m1 * Math.max(0, Math.min(e1.dy, y + d1 - e1.y0)) + e1.x0;
        scanLine(Math.floor(x1), Math.ceil(x0), y);
    }
}
function scanTriangle(a, b, c, ymin, ymax, scanLine) {
    var ab = edge(a, b), bc = edge(b, c), ca = edge(c, a);
    var t;
    if (ab.dy > bc.dy) {
        t = ab;
        ab = bc;
        bc = t;
    }
    if (ab.dy > ca.dy) {
        t = ab;
        ab = ca;
        ca = t;
    }
    if (bc.dy > ca.dy) {
        t = bc;
        bc = ca;
        ca = t;
    }
    if (ab.dy) {
        scanSpans(ca, ab, ymin, ymax, scanLine);
    }
    if (bc.dy) {
        scanSpans(ca, bc, ymin, ymax, scanLine);
    }
}

var Transform = function Transform(minZoom, maxZoom, renderWorldCopies) {
    this.tileSize = 512;
    this.maxValidLatitude = 85.051129;
    this._renderWorldCopies = renderWorldCopies === undefined ? true : renderWorldCopies;
    this._minZoom = minZoom || 0;
    this._maxZoom = maxZoom || 22;
    this.setMaxBounds();
    this.width = 0;
    this.height = 0;
    this._center = new LngLat(0, 0);
    this.zoom = 0;
    this.angle = 0;
    this._fov = 0.6435011087932844;
    this._pitch = 0;
    this._unmodified = true;
    this._posMatrixCache = {};
    this._alignedPosMatrixCache = {};
};
var prototypeAccessors = {
    minZoom: { configurable: true },
    maxZoom: { configurable: true },
    renderWorldCopies: { configurable: true },
    worldSize: { configurable: true },
    centerPoint: { configurable: true },
    size: { configurable: true },
    bearing: { configurable: true },
    pitch: { configurable: true },
    fov: { configurable: true },
    zoom: { configurable: true },
    center: { configurable: true },
    unmodified: { configurable: true },
    x: { configurable: true },
    y: { configurable: true },
    point: { configurable: true }
};
Transform.prototype.clone = function clone() {
    var clone = new Transform(this._minZoom, this._maxZoom, this._renderWorldCopies);
    clone.tileSize = this.tileSize;
    clone.latRange = this.latRange;
    clone.width = this.width;
    clone.height = this.height;
    clone._center = this._center;
    clone.zoom = this.zoom;
    clone.angle = this.angle;
    clone._fov = this._fov;
    clone._pitch = this._pitch;
    clone._unmodified = this._unmodified;
    clone._calcMatrices();
    return clone;
};
prototypeAccessors.minZoom.get = function () {
    return this._minZoom;
};
prototypeAccessors.minZoom.set = function (zoom) {
    if (this._minZoom === zoom) {
        return;
    }
    this._minZoom = zoom;
    this.zoom = Math.max(this.zoom, zoom);
};
prototypeAccessors.maxZoom.get = function () {
    return this._maxZoom;
};
prototypeAccessors.maxZoom.set = function (zoom) {
    if (this._maxZoom === zoom) {
        return;
    }
    this._maxZoom = zoom;
    this.zoom = Math.min(this.zoom, zoom);
};
prototypeAccessors.renderWorldCopies.get = function () {
    return this._renderWorldCopies;
};
prototypeAccessors.renderWorldCopies.set = function (renderWorldCopies) {
    if (renderWorldCopies === undefined) {
        renderWorldCopies = true;
    } else if (renderWorldCopies === null) {
        renderWorldCopies = false;
    }
    this._renderWorldCopies = renderWorldCopies;
};
prototypeAccessors.worldSize.get = function () {
    return this.tileSize * this.scale;
};
prototypeAccessors.centerPoint.get = function () {
    return this.size._div(2);
};
prototypeAccessors.size.get = function () {
    return new __chunk_1.Point(this.width, this.height);
};
prototypeAccessors.bearing.get = function () {
    return -this.angle / Math.PI * 180;
};
prototypeAccessors.bearing.set = function (bearing) {
    var b = -__chunk_1.wrap(bearing, -180, 180) * Math.PI / 180;
    if (this.angle === b) {
        return;
    }
    this._unmodified = false;
    this.angle = b;
    this._calcMatrices();
    this.rotationMatrix = __chunk_1.create$4();
    __chunk_1.rotate(this.rotationMatrix, this.rotationMatrix, this.angle);
};
prototypeAccessors.pitch.get = function () {
    return this._pitch / Math.PI * 180;
};
prototypeAccessors.pitch.set = function (pitch) {
    var p = __chunk_1.clamp(pitch, 0, 60) / 180 * Math.PI;
    if (this._pitch === p) {
        return;
    }
    this._unmodified = false;
    this._pitch = p;
    this._calcMatrices();
};
prototypeAccessors.fov.get = function () {
    return this._fov / Math.PI * 180;
};
prototypeAccessors.fov.set = function (fov) {
    fov = Math.max(0.01, Math.min(60, fov));
    if (this._fov === fov) {
        return;
    }
    this._unmodified = false;
    this._fov = fov / 180 * Math.PI;
    this._calcMatrices();
};
prototypeAccessors.zoom.get = function () {
    return this._zoom;
};
prototypeAccessors.zoom.set = function (zoom) {
    var z = Math.min(Math.max(zoom, this.minZoom), this.maxZoom);
    if (this._zoom === z) {
        return;
    }
    this._unmodified = false;
    this._zoom = z;
    this.scale = this.zoomScale(z);
    this.tileZoom = Math.floor(z);
    this.zoomFraction = z - this.tileZoom;
    this._constrain();
    this._calcMatrices();
};
prototypeAccessors.center.get = function () {
    return this._center;
};
prototypeAccessors.center.set = function (center) {
    if (center.lat === this._center.lat && center.lng === this._center.lng) {
        return;
    }
    this._unmodified = false;
    this._center = center;
    this._constrain();
    this._calcMatrices();
};
Transform.prototype.coveringZoomLevel = function coveringZoomLevel(options) {
    return (options.roundZoom ? Math.round : Math.floor)(this.zoom + this.scaleZoom(this.tileSize / options.tileSize));
};
Transform.prototype.getVisibleUnwrappedCoordinates = function getVisibleUnwrappedCoordinates(tileID) {
    var result = [new __chunk_1.UnwrappedTileID(0, tileID)];
    if (this._renderWorldCopies) {
        var utl = this.pointCoordinate(new __chunk_1.Point(0, 0), 0);
        var utr = this.pointCoordinate(new __chunk_1.Point(this.width, 0), 0);
        var ubl = this.pointCoordinate(new __chunk_1.Point(this.width, this.height), 0);
        var ubr = this.pointCoordinate(new __chunk_1.Point(0, this.height), 0);
        var w0 = Math.floor(Math.min(utl.column, utr.column, ubl.column, ubr.column));
        var w1 = Math.floor(Math.max(utl.column, utr.column, ubl.column, ubr.column));
        var extraWorldCopy = 1;
        for (var w = w0 - extraWorldCopy; w <= w1 + extraWorldCopy; w++) {
            if (w === 0) {
                continue;
            }
            result.push(new __chunk_1.UnwrappedTileID(w, tileID));
        }
    }
    return result;
};
Transform.prototype.coveringTiles = function coveringTiles(options) {
    var z = this.coveringZoomLevel(options);
    var actualZ = z;
    if (options.minzoom !== undefined && z < options.minzoom) {
        return [];
    }
    if (options.maxzoom !== undefined && z > options.maxzoom) {
        z = options.maxzoom;
    }
    var centerCoord = this.pointCoordinate(this.centerPoint, z);
    var centerPoint = new __chunk_1.Point(centerCoord.column - 0.5, centerCoord.row - 0.5);
    var cornerCoords = [
        this.pointCoordinate(new __chunk_1.Point(0, 0), z),
        this.pointCoordinate(new __chunk_1.Point(this.width, 0), z),
        this.pointCoordinate(new __chunk_1.Point(this.width, this.height), z),
        this.pointCoordinate(new __chunk_1.Point(0, this.height), z)
    ];
    return tileCover(z, cornerCoords, options.reparseOverscaled ? actualZ : z, this._renderWorldCopies).sort(function (a, b) {
        return centerPoint.dist(a.canonical) - centerPoint.dist(b.canonical);
    });
};
Transform.prototype.resize = function resize(width, height) {
    this.width = width;
    this.height = height;
    this.pixelsToGLUnits = [
        2 / width,
        -2 / height
    ];
    this._constrain();
    this._calcMatrices();
};
prototypeAccessors.unmodified.get = function () {
    return this._unmodified;
};
Transform.prototype.zoomScale = function zoomScale(zoom) {
    return Math.pow(2, zoom);
};
Transform.prototype.scaleZoom = function scaleZoom(scale) {
    return Math.log(scale) / Math.LN2;
};
Transform.prototype.project = function project(lnglat) {
    return new __chunk_1.Point(this.lngX(lnglat.lng), this.latY(lnglat.lat));
};
Transform.prototype.unproject = function unproject(point) {
    return new LngLat(this.xLng(point.x), this.yLat(point.y));
};
prototypeAccessors.x.get = function () {
    return this.lngX(this.center.lng);
};
prototypeAccessors.y.get = function () {
    return this.latY(this.center.lat);
};
prototypeAccessors.point.get = function () {
    return new __chunk_1.Point(this.x, this.y);
};
Transform.prototype.lngX = function lngX(lng) {
    return (180 + lng) * this.worldSize / 360;
};
Transform.prototype.latY = function latY(lat) {
    lat = __chunk_1.clamp(lat, -this.maxValidLatitude, this.maxValidLatitude);
    var y = 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360));
    return (180 - y) * this.worldSize / 360;
};
Transform.prototype.xLng = function xLng(x) {
    return x * 360 / this.worldSize - 180;
};
Transform.prototype.yLat = function yLat(y) {
    var y2 = 180 - y * 360 / this.worldSize;
    return 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90;
};
Transform.prototype.setLocationAtPoint = function setLocationAtPoint(lnglat, point) {
    var translate = this.pointCoordinate(point)._sub(this.pointCoordinate(this.centerPoint));
    this.center = this.coordinateLocation(this.locationCoordinate(lnglat)._sub(translate));
    if (this._renderWorldCopies) {
        this.center = this.center.wrap();
    }
};
Transform.prototype.locationPoint = function locationPoint(lnglat) {
    return this.coordinatePoint(this.locationCoordinate(lnglat));
};
Transform.prototype.pointLocation = function pointLocation(p) {
    return this.coordinateLocation(this.pointCoordinate(p));
};
Transform.prototype.locationCoordinate = function locationCoordinate(lnglat) {
    return new __chunk_1.Coordinate(this.lngX(lnglat.lng) / this.tileSize, this.latY(lnglat.lat) / this.tileSize, this.zoom).zoomTo(this.tileZoom);
};
Transform.prototype.coordinateLocation = function coordinateLocation(coord) {
    var zoomedCoord = coord.zoomTo(this.zoom);
    return new LngLat(this.xLng(zoomedCoord.column * this.tileSize), this.yLat(zoomedCoord.row * this.tileSize));
};
Transform.prototype.pointCoordinate = function pointCoordinate(p, zoom) {
    if (zoom === undefined) {
        zoom = this.tileZoom;
    }
    var targetZ = 0;
    var coord0 = [
        p.x,
        p.y,
        0,
        1
    ];
    var coord1 = [
        p.x,
        p.y,
        1,
        1
    ];
    __chunk_1.transformMat4(coord0, coord0, this.pixelMatrixInverse);
    __chunk_1.transformMat4(coord1, coord1, this.pixelMatrixInverse);
    var w0 = coord0[3];
    var w1 = coord1[3];
    var x0 = coord0[0] / w0;
    var x1 = coord1[0] / w1;
    var y0 = coord0[1] / w0;
    var y1 = coord1[1] / w1;
    var z0 = coord0[2] / w0;
    var z1 = coord1[2] / w1;
    var t = z0 === z1 ? 0 : (targetZ - z0) / (z1 - z0);
    return new __chunk_1.Coordinate(__chunk_1.number(x0, x1, t) / this.tileSize, __chunk_1.number(y0, y1, t) / this.tileSize, this.zoom)._zoomTo(zoom);
};
Transform.prototype.coordinatePoint = function coordinatePoint(coord) {
    var zoomedCoord = coord.zoomTo(this.zoom);
    var p = [
        zoomedCoord.column * this.tileSize,
        zoomedCoord.row * this.tileSize,
        0,
        1
    ];
    __chunk_1.transformMat4(p, p, this.pixelMatrix);
    return new __chunk_1.Point(p[0] / p[3], p[1] / p[3]);
};
Transform.prototype.getBounds = function getBounds() {
    return new LngLatBounds().extend(this.pointLocation(new __chunk_1.Point(0, 0))).extend(this.pointLocation(new __chunk_1.Point(this.width, 0))).extend(this.pointLocation(new __chunk_1.Point(this.width, this.height))).extend(this.pointLocation(new __chunk_1.Point(0, this.height)));
};
Transform.prototype.getMaxBounds = function getMaxBounds() {
    if (!this.latRange || this.latRange.length !== 2 || !this.lngRange || this.lngRange.length !== 2) {
        return null;
    }
    return new LngLatBounds([
        this.lngRange[0],
        this.latRange[0]
    ], [
        this.lngRange[1],
        this.latRange[1]
    ]);
};
Transform.prototype.setMaxBounds = function setMaxBounds(bounds) {
    if (bounds) {
        this.lngRange = [
            bounds.getWest(),
            bounds.getEast()
        ];
        this.latRange = [
            bounds.getSouth(),
            bounds.getNorth()
        ];
        this._constrain();
    } else {
        this.lngRange = null;
        this.latRange = [
            -this.maxValidLatitude,
            this.maxValidLatitude
        ];
    }
};
Transform.prototype.calculatePosMatrix = function calculatePosMatrix(unwrappedTileID, aligned) {
    if (aligned === void 0)
        aligned = false;
    var posMatrixKey = unwrappedTileID.key;
    var cache = aligned ? this._alignedPosMatrixCache : this._posMatrixCache;
    if (cache[posMatrixKey]) {
        return cache[posMatrixKey];
    }
    var canonical = unwrappedTileID.canonical;
    var scale = this.worldSize / this.zoomScale(canonical.z);
    var unwrappedX = canonical.x + Math.pow(2, canonical.z) * unwrappedTileID.wrap;
    var posMatrix = __chunk_1.identity(new Float64Array(16));
    __chunk_1.translate(posMatrix, posMatrix, [
        unwrappedX * scale,
        canonical.y * scale,
        0
    ]);
    __chunk_1.scale(posMatrix, posMatrix, [
        scale / __chunk_1.EXTENT,
        scale / __chunk_1.EXTENT,
        1
    ]);
    __chunk_1.multiply(posMatrix, aligned ? this.alignedProjMatrix : this.projMatrix, posMatrix);
    cache[posMatrixKey] = new Float32Array(posMatrix);
    return cache[posMatrixKey];
};
Transform.prototype.customLayerMatrix = function customLayerMatrix() {
    return this.mercatorMatrix.slice();
};
Transform.prototype._constrain = function _constrain() {
    if (!this.center || !this.width || !this.height || this._constraining) {
        return;
    }
    this._constraining = true;
    var minY = -90;
    var maxY = 90;
    var minX = -180;
    var maxX = 180;
    var sy, sx, x2, y2;
    var size = this.size, unmodified = this._unmodified;
    if (this.latRange) {
        var latRange = this.latRange;
        minY = this.latY(latRange[1]);
        maxY = this.latY(latRange[0]);
        sy = maxY - minY < size.y ? size.y / (maxY - minY) : 0;
    }
    if (this.lngRange) {
        var lngRange = this.lngRange;
        minX = this.lngX(lngRange[0]);
        maxX = this.lngX(lngRange[1]);
        sx = maxX - minX < size.x ? size.x / (maxX - minX) : 0;
    }
    var s = Math.max(sx || 0, sy || 0);
    if (s) {
        this.center = this.unproject(new __chunk_1.Point(sx ? (maxX + minX) / 2 : this.x, sy ? (maxY + minY) / 2 : this.y));
        this.zoom += this.scaleZoom(s);
        this._unmodified = unmodified;
        this._constraining = false;
        return;
    }
    if (this.latRange) {
        var y = this.y, h2 = size.y / 2;
        if (y - h2 < minY) {
            y2 = minY + h2;
        }
        if (y + h2 > maxY) {
            y2 = maxY - h2;
        }
    }
    if (this.lngRange) {
        var x = this.x, w2 = size.x / 2;
        if (x - w2 < minX) {
            x2 = minX + w2;
        }
        if (x + w2 > maxX) {
            x2 = maxX - w2;
        }
    }
    if (x2 !== undefined || y2 !== undefined) {
        this.center = this.unproject(new __chunk_1.Point(x2 !== undefined ? x2 : this.x, y2 !== undefined ? y2 : this.y));
    }
    this._unmodified = unmodified;
    this._constraining = false;
};
Transform.prototype._calcMatrices = function _calcMatrices() {
    if (!this.height) {
        return;
    }
    this.cameraToCenterDistance = 0.5 / Math.tan(this._fov / 2) * this.height;
    var halfFov = this._fov / 2;
    var groundAngle = Math.PI / 2 + this._pitch;
    var topHalfSurfaceDistance = Math.sin(halfFov) * this.cameraToCenterDistance / Math.sin(Math.PI - groundAngle - halfFov);
    var x = this.x, y = this.y;
    var furthestDistance = Math.cos(Math.PI / 2 - this._pitch) * topHalfSurfaceDistance + this.cameraToCenterDistance;
    var farZ = furthestDistance * 1.01;
    var m = new Float64Array(16);
    __chunk_1.perspective(m, this._fov, this.width / this.height, 1, farZ);
    __chunk_1.scale(m, m, [
        1,
        -1,
        1
    ]);
    __chunk_1.translate(m, m, [
        0,
        0,
        -this.cameraToCenterDistance
    ]);
    __chunk_1.rotateX(m, m, this._pitch);
    __chunk_1.rotateZ(m, m, this.angle);
    __chunk_1.translate(m, m, [
        -x,
        -y,
        0
    ]);
    this.mercatorMatrix = __chunk_1.scale([], m, [
        this.worldSize,
        this.worldSize,
        this.worldSize
    ]);
    var verticalScale = this.worldSize / (2 * Math.PI * 6378137 * Math.abs(Math.cos(this.center.lat * (Math.PI / 180))));
    __chunk_1.scale(m, m, [
        1,
        1,
        verticalScale,
        1
    ]);
    this.projMatrix = m;
    var xShift = this.width % 2 / 2, yShift = this.height % 2 / 2, angleCos = Math.cos(this.angle), angleSin = Math.sin(this.angle), dx = x - Math.round(x) + angleCos * xShift + angleSin * yShift, dy = y - Math.round(y) + angleCos * yShift + angleSin * xShift;
    var alignedM = new Float64Array(m);
    __chunk_1.translate(alignedM, alignedM, [
        dx > 0.5 ? dx - 1 : dx,
        dy > 0.5 ? dy - 1 : dy,
        0
    ]);
    this.alignedProjMatrix = alignedM;
    m = __chunk_1.create();
    __chunk_1.scale(m, m, [
        this.width / 2,
        -this.height / 2,
        1
    ]);
    __chunk_1.translate(m, m, [
        1,
        -1,
        0
    ]);
    this.pixelMatrix = __chunk_1.multiply(new Float64Array(16), m, this.projMatrix);
    m = __chunk_1.invert(new Float64Array(16), this.pixelMatrix);
    if (!m) {
        throw new Error('failed to invert matrix');
    }
    this.pixelMatrixInverse = m;
    this._posMatrixCache = {};
    this._alignedPosMatrixCache = {};
};
Transform.prototype.maxPitchScaleFactor = function maxPitchScaleFactor() {
    if (!this.pixelMatrixInverse) {
        return 1;
    }
    var coord = this.pointCoordinate(new __chunk_1.Point(0, 0)).zoomTo(this.zoom);
    var p = [
        coord.column * this.tileSize,
        coord.row * this.tileSize,
        0,
        1
    ];
    var topPoint = __chunk_1.transformMat4(p, p, this.pixelMatrix);
    return topPoint[3] / this.cameraToCenterDistance;
};
Object.defineProperties(Transform.prototype, prototypeAccessors);

function throttle(fn, time) {
    var pending = false;
    var timerId = 0;
    var later = function () {
        timerId = 0;
        if (pending) {
            fn();
            timerId = setTimeout(later, time);
            pending = false;
        }
    };
    return function () {
        pending = true;
        if (!timerId) {
            later();
        }
        return timerId;
    };
}

var Hash = function Hash() {
    __chunk_1.bindAll([
        '_onHashChange',
        '_updateHash'
    ], this);
    this._updateHash = throttle(this._updateHashUnthrottled.bind(this), 30 * 1000 / 100);
};
Hash.prototype.addTo = function addTo(map) {
    this._map = map;
    __chunk_1.window.addEventListener('hashchange', this._onHashChange, false);
    this._map.on('moveend', this._updateHash);
    return this;
};
Hash.prototype.remove = function remove() {
    __chunk_1.window.removeEventListener('hashchange', this._onHashChange, false);
    this._map.off('moveend', this._updateHash);
    clearTimeout(this._updateHash());
    delete this._map;
    return this;
};
Hash.prototype.getHashString = function getHashString(mapFeedback) {
    var center = this._map.getCenter(), zoom = Math.round(this._map.getZoom() * 100) / 100, precision = Math.ceil((zoom * Math.LN2 + Math.log(512 / 360 / 0.5)) / Math.LN10), m = Math.pow(10, precision), lng = Math.round(center.lng * m) / m, lat = Math.round(center.lat * m) / m, bearing = this._map.getBearing(), pitch = this._map.getPitch();
    var hash = '';
    if (mapFeedback) {
        hash += '#/' + lng + '/' + lat + '/' + zoom;
    } else {
        hash += '#' + zoom + '/' + lat + '/' + lng;
    }
    if (bearing || pitch) {
        hash += '/' + Math.round(bearing * 10) / 10;
    }
    if (pitch) {
        hash += '/' + Math.round(pitch);
    }
    return hash;
};
Hash.prototype._onHashChange = function _onHashChange() {
    var loc = __chunk_1.window.location.hash.replace('#', '').split('/');
    if (loc.length >= 3) {
        this._map.jumpTo({
            center: [
                +loc[2],
                +loc[1]
            ],
            zoom: +loc[0],
            bearing: +(loc[3] || 0),
            pitch: +(loc[4] || 0)
        });
        return true;
    }
    return false;
};
Hash.prototype._updateHashUnthrottled = function _updateHashUnthrottled() {
    var hash = this.getHashString();
    try {
        __chunk_1.window.history.replaceState(__chunk_1.window.history.state, '', hash);
    } catch (SecurityError) {
    }
};

var MapMouseEvent = function (Event) {
    function MapMouseEvent(type, map, originalEvent, data) {
        if (data === void 0)
            data = {};
        var point = DOM.mousePos(map.getCanvasContainer(), originalEvent);
        var lngLat = map.unproject(point);
        Event.call(this, type, __chunk_1.extend({
            point: point,
            lngLat: lngLat,
            originalEvent: originalEvent
        }, data));
        this._defaultPrevented = false;
        this.target = map;
    }
    if (Event)
        MapMouseEvent.__proto__ = Event;
    MapMouseEvent.prototype = Object.create(Event && Event.prototype);
    MapMouseEvent.prototype.constructor = MapMouseEvent;
    var prototypeAccessors = { defaultPrevented: { configurable: true } };
    MapMouseEvent.prototype.preventDefault = function preventDefault() {
        this._defaultPrevented = true;
    };
    prototypeAccessors.defaultPrevented.get = function () {
        return this._defaultPrevented;
    };
    Object.defineProperties(MapMouseEvent.prototype, prototypeAccessors);
    return MapMouseEvent;
}(__chunk_1.Event);
var MapTouchEvent = function (Event) {
    function MapTouchEvent(type, map, originalEvent) {
        var points = DOM.touchPos(map.getCanvasContainer(), originalEvent);
        var lngLats = points.map(function (t) {
            return map.unproject(t);
        });
        var point = points.reduce(function (prev, curr, i, arr) {
            return prev.add(curr.div(arr.length));
        }, new __chunk_1.Point(0, 0));
        var lngLat = map.unproject(point);
        Event.call(this, type, {
            points: points,
            point: point,
            lngLats: lngLats,
            lngLat: lngLat,
            originalEvent: originalEvent
        });
        this._defaultPrevented = false;
    }
    if (Event)
        MapTouchEvent.__proto__ = Event;
    MapTouchEvent.prototype = Object.create(Event && Event.prototype);
    MapTouchEvent.prototype.constructor = MapTouchEvent;
    var prototypeAccessors$1 = { defaultPrevented: { configurable: true } };
    MapTouchEvent.prototype.preventDefault = function preventDefault() {
        this._defaultPrevented = true;
    };
    prototypeAccessors$1.defaultPrevented.get = function () {
        return this._defaultPrevented;
    };
    Object.defineProperties(MapTouchEvent.prototype, prototypeAccessors$1);
    return MapTouchEvent;
}(__chunk_1.Event);
var MapWheelEvent = function (Event) {
    function MapWheelEvent(type, map, originalEvent) {
        Event.call(this, type, { originalEvent: originalEvent });
        this._defaultPrevented = false;
    }
    if (Event)
        MapWheelEvent.__proto__ = Event;
    MapWheelEvent.prototype = Object.create(Event && Event.prototype);
    MapWheelEvent.prototype.constructor = MapWheelEvent;
    var prototypeAccessors$2 = { defaultPrevented: { configurable: true } };
    MapWheelEvent.prototype.preventDefault = function preventDefault() {
        this._defaultPrevented = true;
    };
    prototypeAccessors$2.defaultPrevented.get = function () {
        return this._defaultPrevented;
    };
    Object.defineProperties(MapWheelEvent.prototype, prototypeAccessors$2);
    return MapWheelEvent;
}(__chunk_1.Event);

var wheelZoomDelta = 4.000244140625;
var defaultZoomRate = 1 / 100;
var wheelZoomRate = 1 / 450;
var maxScalePerFrame = 2;
var ScrollZoomHandler = function ScrollZoomHandler(map) {
    this._map = map;
    this._el = map.getCanvasContainer();
    this._delta = 0;
    __chunk_1.bindAll([
        '_onWheel',
        '_onTimeout',
        '_onScrollFrame',
        '_onScrollFinished'
    ], this);
};
ScrollZoomHandler.prototype.isEnabled = function isEnabled() {
    return !!this._enabled;
};
ScrollZoomHandler.prototype.isActive = function isActive() {
    return !!this._active;
};
ScrollZoomHandler.prototype.enable = function enable(options) {
    if (this.isEnabled()) {
        return;
    }
    this._enabled = true;
    this._aroundCenter = options && options.around === 'center';
};
ScrollZoomHandler.prototype.disable = function disable() {
    if (!this.isEnabled()) {
        return;
    }
    this._enabled = false;
};
ScrollZoomHandler.prototype.onWheel = function onWheel(e) {
    if (!this.isEnabled()) {
        return;
    }
    var value = e.deltaMode === __chunk_1.window.WheelEvent.DOM_DELTA_LINE ? e.deltaY * 40 : e.deltaY;
    var now = __chunk_1.browser.now(), timeDelta = now - (this._lastWheelEventTime || 0);
    this._lastWheelEventTime = now;
    if (value !== 0 && value % wheelZoomDelta === 0) {
        this._type = 'wheel';
    } else if (value !== 0 && Math.abs(value) < 4) {
        this._type = 'trackpad';
    } else if (timeDelta > 400) {
        this._type = null;
        this._lastValue = value;
        this._timeout = setTimeout(this._onTimeout, 40, e);
    } else if (!this._type) {
        this._type = Math.abs(timeDelta * value) < 200 ? 'trackpad' : 'wheel';
        if (this._timeout) {
            clearTimeout(this._timeout);
            this._timeout = null;
            value += this._lastValue;
        }
    }
    if (e.shiftKey && value) {
        value = value / 4;
    }
    if (this._type) {
        this._lastWheelEvent = e;
        this._delta -= value;
        if (!this.isActive()) {
            this._start(e);
        }
    }
    e.preventDefault();
};
ScrollZoomHandler.prototype._onTimeout = function _onTimeout(initialEvent) {
    this._type = 'wheel';
    this._delta -= this._lastValue;
    if (!this.isActive()) {
        this._start(initialEvent);
    }
};
ScrollZoomHandler.prototype._start = function _start(e) {
    if (!this._delta) {
        return;
    }
    if (this._frameId) {
        this._map._cancelRenderFrame(this._frameId);
        this._frameId = null;
    }
    this._active = true;
    this._map.fire(new __chunk_1.Event('movestart', { originalEvent: e }));
    this._map.fire(new __chunk_1.Event('zoomstart', { originalEvent: e }));
    if (this._finishTimeout) {
        clearTimeout(this._finishTimeout);
    }
    var pos = DOM.mousePos(this._el, e);
    this._around = LngLat.convert(this._aroundCenter ? this._map.getCenter() : this._map.unproject(pos));
    this._aroundPoint = this._map.transform.locationPoint(this._around);
    if (!this._frameId) {
        this._frameId = this._map._requestRenderFrame(this._onScrollFrame);
    }
};
ScrollZoomHandler.prototype._onScrollFrame = function _onScrollFrame() {
    var this$1 = this;
    this._frameId = null;
    if (!this.isActive()) {
        return;
    }
    var tr = this._map.transform;
    if (this._delta !== 0) {
        var zoomRate = this._type === 'wheel' && Math.abs(this._delta) > wheelZoomDelta ? wheelZoomRate : defaultZoomRate;
        var scale = maxScalePerFrame / (1 + Math.exp(-Math.abs(this._delta * zoomRate)));
        if (this._delta < 0 && scale !== 0) {
            scale = 1 / scale;
        }
        var fromScale = typeof this._targetZoom === 'number' ? tr.zoomScale(this._targetZoom) : tr.scale;
        this._targetZoom = Math.min(tr.maxZoom, Math.max(tr.minZoom, tr.scaleZoom(fromScale * scale)));
        if (this._type === 'wheel') {
            this._startZoom = tr.zoom;
            this._easing = this._smoothOutEasing(200);
        }
        this._delta = 0;
    }
    var targetZoom = typeof this._targetZoom === 'number' ? this._targetZoom : tr.zoom;
    var startZoom = this._startZoom;
    var easing = this._easing;
    var finished = false;
    if (this._type === 'wheel' && startZoom && easing) {
        var t = Math.min((__chunk_1.browser.now() - this._lastWheelEventTime) / 200, 1);
        var k = easing(t);
        tr.zoom = __chunk_1.number(startZoom, targetZoom, k);
        if (t < 1) {
            if (!this._frameId) {
                this._frameId = this._map._requestRenderFrame(this._onScrollFrame);
            }
        } else {
            finished = true;
        }
    } else {
        tr.zoom = targetZoom;
        finished = true;
    }
    tr.setLocationAtPoint(this._around, this._aroundPoint);
    this._map.fire(new __chunk_1.Event('move', { originalEvent: this._lastWheelEvent }));
    this._map.fire(new __chunk_1.Event('zoom', { originalEvent: this._lastWheelEvent }));
    if (finished) {
        this._active = false;
        this._finishTimeout = setTimeout(function () {
            this$1._map.fire(new __chunk_1.Event('zoomend', { originalEvent: this$1._lastWheelEvent }));
            this$1._map.fire(new __chunk_1.Event('moveend', { originalEvent: this$1._lastWheelEvent }));
            delete this$1._targetZoom;
        }, 200);
    }
};
ScrollZoomHandler.prototype._smoothOutEasing = function _smoothOutEasing(duration) {
    var easing = __chunk_1.ease;
    if (this._prevEase) {
        var ease = this._prevEase, t = (__chunk_1.browser.now() - ease.start) / ease.duration, speed = ease.easing(t + 0.01) - ease.easing(t), x = 0.27 / Math.sqrt(speed * speed + 0.0001) * 0.01, y = Math.sqrt(0.27 * 0.27 - x * x);
        easing = __chunk_1.bezier(x, y, 0.25, 1);
    }
    this._prevEase = {
        start: __chunk_1.browser.now(),
        duration: duration,
        easing: easing
    };
    return easing;
};

var BoxZoomHandler = function BoxZoomHandler(map, options) {
    this._map = map;
    this._el = map.getCanvasContainer();
    this._container = map.getContainer();
    this._clickTolerance = options.clickTolerance || 1;
    __chunk_1.bindAll([
        '_onMouseMove',
        '_onMouseUp',
        '_onKeyDown'
    ], this);
};
BoxZoomHandler.prototype.isEnabled = function isEnabled() {
    return !!this._enabled;
};
BoxZoomHandler.prototype.isActive = function isActive() {
    return !!this._active;
};
BoxZoomHandler.prototype.enable = function enable() {
    if (this.isEnabled()) {
        return;
    }
    this._enabled = true;
};
BoxZoomHandler.prototype.disable = function disable() {
    if (!this.isEnabled()) {
        return;
    }
    this._enabled = false;
};
BoxZoomHandler.prototype.onMouseDown = function onMouseDown(e) {
    if (!this.isEnabled()) {
        return;
    }
    if (!(e.shiftKey && e.button === 0)) {
        return;
    }
    __chunk_1.window.document.addEventListener('mousemove', this._onMouseMove, false);
    __chunk_1.window.document.addEventListener('keydown', this._onKeyDown, false);
    __chunk_1.window.document.addEventListener('mouseup', this._onMouseUp, false);
    DOM.disableDrag();
    this._startPos = this._lastPos = DOM.mousePos(this._el, e);
    this._active = true;
};
BoxZoomHandler.prototype._onMouseMove = function _onMouseMove(e) {
    var pos = DOM.mousePos(this._el, e);
    if (this._lastPos.equals(pos) || !this._box && pos.dist(this._startPos) < this._clickTolerance) {
        return;
    }
    var p0 = this._startPos;
    this._lastPos = pos;
    if (!this._box) {
        this._box = DOM.create('div', 'mapboxgl-boxzoom', this._container);
        this._container.classList.add('mapboxgl-crosshair');
        this._fireEvent('boxzoomstart', e);
    }
    var minX = Math.min(p0.x, pos.x), maxX = Math.max(p0.x, pos.x), minY = Math.min(p0.y, pos.y), maxY = Math.max(p0.y, pos.y);
    DOM.setTransform(this._box, 'translate(' + minX + 'px,' + minY + 'px)');
    this._box.style.width = maxX - minX + 'px';
    this._box.style.height = maxY - minY + 'px';
};
BoxZoomHandler.prototype._onMouseUp = function _onMouseUp(e) {
    if (e.button !== 0) {
        return;
    }
    var p0 = this._startPos, p1 = DOM.mousePos(this._el, e);
    this._finish();
    DOM.suppressClick();
    if (p0.x === p1.x && p0.y === p1.y) {
        this._fireEvent('boxzoomcancel', e);
    } else {
        this._map.fitScreenCoordinates(p0, p1, this._map.getBearing(), { linear: true }).fire(new __chunk_1.Event('boxzoomend', { originalEvent: e }));
    }
};
BoxZoomHandler.prototype._onKeyDown = function _onKeyDown(e) {
    if (e.keyCode === 27) {
        this._finish();
        this._fireEvent('boxzoomcancel', e);
    }
};
BoxZoomHandler.prototype._finish = function _finish() {
    this._active = false;
    __chunk_1.window.document.removeEventListener('mousemove', this._onMouseMove, false);
    __chunk_1.window.document.removeEventListener('keydown', this._onKeyDown, false);
    __chunk_1.window.document.removeEventListener('mouseup', this._onMouseUp, false);
    this._container.classList.remove('mapboxgl-crosshair');
    if (this._box) {
        DOM.remove(this._box);
        this._box = null;
    }
    DOM.enableDrag();
    delete this._startPos;
    delete this._lastPos;
};
BoxZoomHandler.prototype._fireEvent = function _fireEvent(type, e) {
    return this._map.fire(new __chunk_1.Event(type, { originalEvent: e }));
};

var inertiaLinearity = 0.25, inertiaEasing = __chunk_1.bezier(0, 0, inertiaLinearity, 1), inertiaMaxSpeed = 180, inertiaDeceleration = 720;
var DragRotateHandler = function DragRotateHandler(map, options) {
    this._map = map;
    this._el = options.element || map.getCanvasContainer();
    this._state = 'disabled';
    this._button = options.button || 'right';
    this._bearingSnap = options.bearingSnap || 0;
    this._pitchWithRotate = options.pitchWithRotate !== false;
    __chunk_1.bindAll([
        'onMouseDown',
        '_onMouseMove',
        '_onMouseUp',
        '_onBlur',
        '_onDragFrame'
    ], this);
};
DragRotateHandler.prototype.isEnabled = function isEnabled() {
    return this._state !== 'disabled';
};
DragRotateHandler.prototype.isActive = function isActive() {
    return this._state === 'active';
};
DragRotateHandler.prototype.enable = function enable() {
    if (this.isEnabled()) {
        return;
    }
    this._state = 'enabled';
};
DragRotateHandler.prototype.disable = function disable() {
    if (!this.isEnabled()) {
        return;
    }
    switch (this._state) {
    case 'active':
        this._state = 'disabled';
        this._unbind();
        this._deactivate();
        this._fireEvent('rotateend');
        if (this._pitchWithRotate) {
            this._fireEvent('pitchend');
        }
        this._fireEvent('moveend');
        break;
    case 'pending':
        this._state = 'disabled';
        this._unbind();
        break;
    default:
        this._state = 'disabled';
        break;
    }
};
DragRotateHandler.prototype.onMouseDown = function onMouseDown(e) {
    if (this._state !== 'enabled') {
        return;
    }
    if (this._button === 'right') {
        this._eventButton = DOM.mouseButton(e);
        if (this._eventButton !== (e.ctrlKey ? 0 : 2)) {
            return;
        }
    } else {
        if (e.ctrlKey || DOM.mouseButton(e) !== 0) {
            return;
        }
        this._eventButton = 0;
    }
    DOM.disableDrag();
    __chunk_1.window.document.addEventListener('mousemove', this._onMouseMove, { capture: true });
    __chunk_1.window.document.addEventListener('mouseup', this._onMouseUp);
    __chunk_1.window.addEventListener('blur', this._onBlur);
    this._state = 'pending';
    this._inertia = [[
            __chunk_1.browser.now(),
            this._map.getBearing()
        ]];
    this._startPos = this._lastPos = DOM.mousePos(this._el, e);
    this._center = this._map.transform.centerPoint;
    e.preventDefault();
};
DragRotateHandler.prototype._onMouseMove = function _onMouseMove(e) {
    var pos = DOM.mousePos(this._el, e);
    if (this._lastPos.equals(pos)) {
        return;
    }
    this._lastMoveEvent = e;
    this._lastPos = pos;
    if (this._state === 'pending') {
        this._state = 'active';
        this._fireEvent('rotatestart', e);
        this._fireEvent('movestart', e);
        if (this._pitchWithRotate) {
            this._fireEvent('pitchstart', e);
        }
    }
    if (!this._frameId) {
        this._frameId = this._map._requestRenderFrame(this._onDragFrame);
    }
};
DragRotateHandler.prototype._onDragFrame = function _onDragFrame() {
    this._frameId = null;
    var e = this._lastMoveEvent;
    if (!e) {
        return;
    }
    var tr = this._map.transform;
    var p1 = this._startPos, p2 = this._lastPos, bearingDiff = (p1.x - p2.x) * 0.8, pitchDiff = (p1.y - p2.y) * -0.5, bearing = tr.bearing - bearingDiff, pitch = tr.pitch - pitchDiff, inertia = this._inertia, last = inertia[inertia.length - 1];
    this._drainInertiaBuffer();
    inertia.push([
        __chunk_1.browser.now(),
        this._map._normalizeBearing(bearing, last[1])
    ]);
    tr.bearing = bearing;
    if (this._pitchWithRotate) {
        this._fireEvent('pitch', e);
        tr.pitch = pitch;
    }
    this._fireEvent('rotate', e);
    this._fireEvent('move', e);
    delete this._lastMoveEvent;
    this._startPos = this._lastPos;
};
DragRotateHandler.prototype._onMouseUp = function _onMouseUp(e) {
    if (DOM.mouseButton(e) !== this._eventButton) {
        return;
    }
    switch (this._state) {
    case 'active':
        this._state = 'enabled';
        DOM.suppressClick();
        this._unbind();
        this._deactivate();
        this._inertialRotate(e);
        break;
    case 'pending':
        this._state = 'enabled';
        this._unbind();
        break;
    default:
        break;
    }
};
DragRotateHandler.prototype._onBlur = function _onBlur(e) {
    switch (this._state) {
    case 'active':
        this._state = 'enabled';
        this._unbind();
        this._deactivate();
        this._fireEvent('rotateend', e);
        if (this._pitchWithRotate) {
            this._fireEvent('pitchend', e);
        }
        this._fireEvent('moveend', e);
        break;
    case 'pending':
        this._state = 'enabled';
        this._unbind();
        break;
    default:
        break;
    }
};
DragRotateHandler.prototype._unbind = function _unbind() {
    __chunk_1.window.document.removeEventListener('mousemove', this._onMouseMove, { capture: true });
    __chunk_1.window.document.removeEventListener('mouseup', this._onMouseUp);
    __chunk_1.window.removeEventListener('blur', this._onBlur);
    DOM.enableDrag();
};
DragRotateHandler.prototype._deactivate = function _deactivate() {
    if (this._frameId) {
        this._map._cancelRenderFrame(this._frameId);
        this._frameId = null;
    }
    delete this._lastMoveEvent;
    delete this._startPos;
    delete this._lastPos;
};
DragRotateHandler.prototype._inertialRotate = function _inertialRotate(e) {
    var this$1 = this;
    this._fireEvent('rotateend', e);
    this._drainInertiaBuffer();
    var map = this._map, mapBearing = map.getBearing(), inertia = this._inertia;
    var finish = function () {
        if (Math.abs(mapBearing) < this$1._bearingSnap) {
            map.resetNorth({ noMoveStart: true }, { originalEvent: e });
        } else {
            this$1._fireEvent('moveend', e);
        }
        if (this$1._pitchWithRotate) {
            this$1._fireEvent('pitchend', e);
        }
    };
    if (inertia.length < 2) {
        finish();
        return;
    }
    var first = inertia[0], last = inertia[inertia.length - 1], previous = inertia[inertia.length - 2];
    var bearing = map._normalizeBearing(mapBearing, previous[1]);
    var flingDiff = last[1] - first[1], sign = flingDiff < 0 ? -1 : 1, flingDuration = (last[0] - first[0]) / 1000;
    if (flingDiff === 0 || flingDuration === 0) {
        finish();
        return;
    }
    var speed = Math.abs(flingDiff * (inertiaLinearity / flingDuration));
    if (speed > inertiaMaxSpeed) {
        speed = inertiaMaxSpeed;
    }
    var duration = speed / (inertiaDeceleration * inertiaLinearity), offset = sign * speed * (duration / 2);
    bearing += offset;
    if (Math.abs(map._normalizeBearing(bearing, 0)) < this._bearingSnap) {
        bearing = map._normalizeBearing(0, bearing);
    }
    map.rotateTo(bearing, {
        duration: duration * 1000,
        easing: inertiaEasing,
        noMoveStart: true
    }, { originalEvent: e });
};
DragRotateHandler.prototype._fireEvent = function _fireEvent(type, e) {
    return this._map.fire(new __chunk_1.Event(type, e ? { originalEvent: e } : {}));
};
DragRotateHandler.prototype._drainInertiaBuffer = function _drainInertiaBuffer() {
    var inertia = this._inertia, now = __chunk_1.browser.now(), cutoff = 160;
    while (inertia.length > 0 && now - inertia[0][0] > cutoff) {
        inertia.shift();
    }
};

var inertiaLinearity$1 = 0.3, inertiaEasing$1 = __chunk_1.bezier(0, 0, inertiaLinearity$1, 1), inertiaMaxSpeed$1 = 1400, inertiaDeceleration$1 = 2500;
var DragPanHandler = function DragPanHandler(map, options) {
    this._map = map;
    this._el = map.getCanvasContainer();
    this._state = 'disabled';
    this._clickTolerance = options.clickTolerance || 1;
    __chunk_1.bindAll([
        '_onMove',
        '_onMouseUp',
        '_onTouchEnd',
        '_onBlur',
        '_onDragFrame'
    ], this);
};
DragPanHandler.prototype.isEnabled = function isEnabled() {
    return this._state !== 'disabled';
};
DragPanHandler.prototype.isActive = function isActive() {
    return this._state === 'active';
};
DragPanHandler.prototype.enable = function enable() {
    if (this.isEnabled()) {
        return;
    }
    this._el.classList.add('mapboxgl-touch-drag-pan');
    this._state = 'enabled';
};
DragPanHandler.prototype.disable = function disable() {
    if (!this.isEnabled()) {
        return;
    }
    this._el.classList.remove('mapboxgl-touch-drag-pan');
    switch (this._state) {
    case 'active':
        this._state = 'disabled';
        this._unbind();
        this._deactivate();
        this._fireEvent('dragend');
        this._fireEvent('moveend');
        break;
    case 'pending':
        this._state = 'disabled';
        this._unbind();
        break;
    default:
        this._state = 'disabled';
        break;
    }
};
DragPanHandler.prototype.onMouseDown = function onMouseDown(e) {
    if (this._state !== 'enabled') {
        return;
    }
    if (e.ctrlKey || DOM.mouseButton(e) !== 0) {
        return;
    }
    DOM.addEventListener(__chunk_1.window.document, 'mousemove', this._onMove, { capture: true });
    DOM.addEventListener(__chunk_1.window.document, 'mouseup', this._onMouseUp);
    this._start(e);
};
DragPanHandler.prototype.onTouchStart = function onTouchStart(e) {
    if (this._state !== 'enabled') {
        return;
    }
    if (e.touches.length > 1) {
        return;
    }
    DOM.addEventListener(__chunk_1.window.document, 'touchmove', this._onMove, {
        capture: true,
        passive: false
    });
    DOM.addEventListener(__chunk_1.window.document, 'touchend', this._onTouchEnd);
    this._start(e);
};
DragPanHandler.prototype._start = function _start(e) {
    __chunk_1.window.addEventListener('blur', this._onBlur);
    this._state = 'pending';
    this._startPos = this._mouseDownPos = this._lastPos = DOM.mousePos(this._el, e);
    this._inertia = [[
            __chunk_1.browser.now(),
            this._startPos
        ]];
};
DragPanHandler.prototype._onMove = function _onMove(e) {
    e.preventDefault();
    var pos = DOM.mousePos(this._el, e);
    if (this._lastPos.equals(pos) || this._state === 'pending' && pos.dist(this._mouseDownPos) < this._clickTolerance) {
        return;
    }
    this._lastMoveEvent = e;
    this._lastPos = pos;
    this._drainInertiaBuffer();
    this._inertia.push([
        __chunk_1.browser.now(),
        this._lastPos
    ]);
    if (this._state === 'pending') {
        this._state = 'active';
        this._fireEvent('dragstart', e);
        this._fireEvent('movestart', e);
    }
    if (!this._frameId) {
        this._frameId = this._map._requestRenderFrame(this._onDragFrame);
    }
};
DragPanHandler.prototype._onDragFrame = function _onDragFrame() {
    this._frameId = null;
    var e = this._lastMoveEvent;
    if (!e) {
        return;
    }
    var tr = this._map.transform;
    tr.setLocationAtPoint(tr.pointLocation(this._startPos), this._lastPos);
    this._fireEvent('drag', e);
    this._fireEvent('move', e);
    this._startPos = this._lastPos;
    delete this._lastMoveEvent;
};
DragPanHandler.prototype._onMouseUp = function _onMouseUp(e) {
    if (DOM.mouseButton(e) !== 0) {
        return;
    }
    switch (this._state) {
    case 'active':
        this._state = 'enabled';
        DOM.suppressClick();
        this._unbind();
        this._deactivate();
        this._inertialPan(e);
        break;
    case 'pending':
        this._state = 'enabled';
        this._unbind();
        break;
    default:
        break;
    }
};
DragPanHandler.prototype._onTouchEnd = function _onTouchEnd(e) {
    switch (this._state) {
    case 'active':
        this._state = 'enabled';
        this._unbind();
        this._deactivate();
        this._inertialPan(e);
        break;
    case 'pending':
        this._state = 'enabled';
        this._unbind();
        break;
    default:
        break;
    }
};
DragPanHandler.prototype._onBlur = function _onBlur(e) {
    switch (this._state) {
    case 'active':
        this._state = 'enabled';
        this._unbind();
        this._deactivate();
        this._fireEvent('dragend', e);
        this._fireEvent('moveend', e);
        break;
    case 'pending':
        this._state = 'enabled';
        this._unbind();
        break;
    default:
        break;
    }
};
DragPanHandler.prototype._unbind = function _unbind() {
    DOM.removeEventListener(__chunk_1.window.document, 'touchmove', this._onMove, {
        capture: true,
        passive: false
    });
    DOM.removeEventListener(__chunk_1.window.document, 'touchend', this._onTouchEnd);
    DOM.removeEventListener(__chunk_1.window.document, 'mousemove', this._onMove, { capture: true });
    DOM.removeEventListener(__chunk_1.window.document, 'mouseup', this._onMouseUp);
    DOM.removeEventListener(__chunk_1.window, 'blur', this._onBlur);
};
DragPanHandler.prototype._deactivate = function _deactivate() {
    if (this._frameId) {
        this._map._cancelRenderFrame(this._frameId);
        this._frameId = null;
    }
    delete this._lastMoveEvent;
    delete this._startPos;
    delete this._mouseDownPos;
    delete this._lastPos;
};
DragPanHandler.prototype._inertialPan = function _inertialPan(e) {
    this._fireEvent('dragend', e);
    this._drainInertiaBuffer();
    var inertia = this._inertia;
    if (inertia.length < 2) {
        this._fireEvent('moveend', e);
        return;
    }
    var last = inertia[inertia.length - 1], first = inertia[0], flingOffset = last[1].sub(first[1]), flingDuration = (last[0] - first[0]) / 1000;
    if (flingDuration === 0 || last[1].equals(first[1])) {
        this._fireEvent('moveend', e);
        return;
    }
    var velocity = flingOffset.mult(inertiaLinearity$1 / flingDuration);
    var speed = velocity.mag();
    if (speed > inertiaMaxSpeed$1) {
        speed = inertiaMaxSpeed$1;
        velocity._unit()._mult(speed);
    }
    var duration = speed / (inertiaDeceleration$1 * inertiaLinearity$1), offset = velocity.mult(-duration / 2);
    this._map.panBy(offset, {
        duration: duration * 1000,
        easing: inertiaEasing$1,
        noMoveStart: true
    }, { originalEvent: e });
};
DragPanHandler.prototype._fireEvent = function _fireEvent(type, e) {
    return this._map.fire(new __chunk_1.Event(type, e ? { originalEvent: e } : {}));
};
DragPanHandler.prototype._drainInertiaBuffer = function _drainInertiaBuffer() {
    var inertia = this._inertia, now = __chunk_1.browser.now(), cutoff = 160;
    while (inertia.length > 0 && now - inertia[0][0] > cutoff) {
        inertia.shift();
    }
};

var panStep = 100, bearingStep = 15, pitchStep = 10;
var KeyboardHandler = function KeyboardHandler(map) {
    this._map = map;
    this._el = map.getCanvasContainer();
    __chunk_1.bindAll(['_onKeyDown'], this);
};
KeyboardHandler.prototype.isEnabled = function isEnabled() {
    return !!this._enabled;
};
KeyboardHandler.prototype.enable = function enable() {
    if (this.isEnabled()) {
        return;
    }
    this._el.addEventListener('keydown', this._onKeyDown, false);
    this._enabled = true;
};
KeyboardHandler.prototype.disable = function disable() {
    if (!this.isEnabled()) {
        return;
    }
    this._el.removeEventListener('keydown', this._onKeyDown);
    this._enabled = false;
};
KeyboardHandler.prototype._onKeyDown = function _onKeyDown(e) {
    if (e.altKey || e.ctrlKey || e.metaKey) {
        return;
    }
    var zoomDir = 0;
    var bearingDir = 0;
    var pitchDir = 0;
    var xDir = 0;
    var yDir = 0;
    switch (e.keyCode) {
    case 61:
    case 107:
    case 171:
    case 187:
        zoomDir = 1;
        break;
    case 189:
    case 109:
    case 173:
        zoomDir = -1;
        break;
    case 37:
        if (e.shiftKey) {
            bearingDir = -1;
        } else {
            e.preventDefault();
            xDir = -1;
        }
        break;
    case 39:
        if (e.shiftKey) {
            bearingDir = 1;
        } else {
            e.preventDefault();
            xDir = 1;
        }
        break;
    case 38:
        if (e.shiftKey) {
            pitchDir = 1;
        } else {
            e.preventDefault();
            yDir = -1;
        }
        break;
    case 40:
        if (e.shiftKey) {
            pitchDir = -1;
        } else {
            yDir = 1;
            e.preventDefault();
        }
        break;
    default:
        return;
    }
    var map = this._map;
    var zoom = map.getZoom();
    var easeOptions = {
        duration: 300,
        delayEndEvents: 500,
        easing: easeOut,
        zoom: zoomDir ? Math.round(zoom) + zoomDir * (e.shiftKey ? 2 : 1) : zoom,
        bearing: map.getBearing() + bearingDir * bearingStep,
        pitch: map.getPitch() + pitchDir * pitchStep,
        offset: [
            -xDir * panStep,
            -yDir * panStep
        ],
        center: map.getCenter()
    };
    map.easeTo(easeOptions, { originalEvent: e });
};
function easeOut(t) {
    return t * (2 - t);
}

var DoubleClickZoomHandler = function DoubleClickZoomHandler(map) {
    this._map = map;
    __chunk_1.bindAll([
        '_onDblClick',
        '_onZoomEnd'
    ], this);
};
DoubleClickZoomHandler.prototype.isEnabled = function isEnabled() {
    return !!this._enabled;
};
DoubleClickZoomHandler.prototype.isActive = function isActive() {
    return !!this._active;
};
DoubleClickZoomHandler.prototype.enable = function enable() {
    if (this.isEnabled()) {
        return;
    }
    this._enabled = true;
};
DoubleClickZoomHandler.prototype.disable = function disable() {
    if (!this.isEnabled()) {
        return;
    }
    this._enabled = false;
};
DoubleClickZoomHandler.prototype.onTouchStart = function onTouchStart(e) {
    var this$1 = this;
    if (!this.isEnabled()) {
        return;
    }
    if (e.points.length > 1) {
        return;
    }
    if (!this._tapped) {
        this._tapped = setTimeout(function () {
            this$1._tapped = null;
        }, 300);
    } else {
        clearTimeout(this._tapped);
        this._tapped = null;
        this._zoom(e);
    }
};
DoubleClickZoomHandler.prototype.onDblClick = function onDblClick(e) {
    if (!this.isEnabled()) {
        return;
    }
    e.originalEvent.preventDefault();
    this._zoom(e);
};
DoubleClickZoomHandler.prototype._zoom = function _zoom(e) {
    this._active = true;
    this._map.on('zoomend', this._onZoomEnd);
    this._map.zoomTo(this._map.getZoom() + (e.originalEvent.shiftKey ? -1 : 1), { around: e.lngLat }, e);
};
DoubleClickZoomHandler.prototype._onZoomEnd = function _onZoomEnd() {
    this._active = false;
    this._map.off('zoomend', this._onZoomEnd);
};

var inertiaLinearity$2 = 0.15, inertiaEasing$2 = __chunk_1.bezier(0, 0, inertiaLinearity$2, 1), inertiaDeceleration$2 = 12, inertiaMaxSpeed$2 = 2.5, significantScaleThreshold = 0.15, significantRotateThreshold = 10;
var TouchZoomRotateHandler = function TouchZoomRotateHandler(map) {
    this._map = map;
    this._el = map.getCanvasContainer();
    __chunk_1.bindAll([
        '_onMove',
        '_onEnd',
        '_onTouchFrame'
    ], this);
};
TouchZoomRotateHandler.prototype.isEnabled = function isEnabled() {
    return !!this._enabled;
};
TouchZoomRotateHandler.prototype.enable = function enable(options) {
    if (this.isEnabled()) {
        return;
    }
    this._el.classList.add('mapboxgl-touch-zoom-rotate');
    this._enabled = true;
    this._aroundCenter = !!options && options.around === 'center';
};
TouchZoomRotateHandler.prototype.disable = function disable() {
    if (!this.isEnabled()) {
        return;
    }
    this._el.classList.remove('mapboxgl-touch-zoom-rotate');
    this._enabled = false;
};
TouchZoomRotateHandler.prototype.disableRotation = function disableRotation() {
    this._rotationDisabled = true;
};
TouchZoomRotateHandler.prototype.enableRotation = function enableRotation() {
    this._rotationDisabled = false;
};
TouchZoomRotateHandler.prototype.onStart = function onStart(e) {
    if (!this.isEnabled()) {
        return;
    }
    if (e.touches.length !== 2) {
        return;
    }
    var p0 = DOM.mousePos(this._el, e.touches[0]), p1 = DOM.mousePos(this._el, e.touches[1]), center = p0.add(p1).div(2);
    this._startVec = p0.sub(p1);
    this._startAround = this._map.transform.pointLocation(center);
    this._gestureIntent = undefined;
    this._inertia = [];
    DOM.addEventListener(__chunk_1.window.document, 'touchmove', this._onMove, { passive: false });
    DOM.addEventListener(__chunk_1.window.document, 'touchend', this._onEnd);
};
TouchZoomRotateHandler.prototype._getTouchEventData = function _getTouchEventData(e) {
    var p0 = DOM.mousePos(this._el, e.touches[0]), p1 = DOM.mousePos(this._el, e.touches[1]);
    var vec = p0.sub(p1);
    return {
        vec: vec,
        center: p0.add(p1).div(2),
        scale: vec.mag() / this._startVec.mag(),
        bearing: this._rotationDisabled ? 0 : vec.angleWith(this._startVec) * 180 / Math.PI
    };
};
TouchZoomRotateHandler.prototype._onMove = function _onMove(e) {
    if (e.touches.length !== 2) {
        return;
    }
    var ref = this._getTouchEventData(e);
    var vec = ref.vec;
    var scale = ref.scale;
    var bearing = ref.bearing;
    if (!this._gestureIntent) {
        var scalingSignificantly = Math.abs(1 - scale) > significantScaleThreshold, rotatingSignificantly = Math.abs(bearing) > significantRotateThreshold;
        if (rotatingSignificantly) {
            this._gestureIntent = 'rotate';
        } else if (scalingSignificantly) {
            this._gestureIntent = 'zoom';
        }
        if (this._gestureIntent) {
            this._map.fire(new __chunk_1.Event(this._gestureIntent + 'start', { originalEvent: e }));
            this._map.fire(new __chunk_1.Event('movestart', { originalEvent: e }));
            this._startVec = vec;
        }
    }
    this._lastTouchEvent = e;
    if (!this._frameId) {
        this._frameId = this._map._requestRenderFrame(this._onTouchFrame);
    }
    e.preventDefault();
};
TouchZoomRotateHandler.prototype._onTouchFrame = function _onTouchFrame() {
    this._frameId = null;
    var gestureIntent = this._gestureIntent;
    if (!gestureIntent) {
        return;
    }
    var tr = this._map.transform;
    if (!this._startScale) {
        this._startScale = tr.scale;
        this._startBearing = tr.bearing;
    }
    var ref = this._getTouchEventData(this._lastTouchEvent);
    var center = ref.center;
    var bearing = ref.bearing;
    var scale = ref.scale;
    var around = tr.pointLocation(center);
    var aroundPoint = tr.locationPoint(around);
    if (gestureIntent === 'rotate') {
        tr.bearing = this._startBearing + bearing;
    }
    tr.zoom = tr.scaleZoom(this._startScale * scale);
    tr.setLocationAtPoint(this._startAround, aroundPoint);
    this._map.fire(new __chunk_1.Event(gestureIntent, { originalEvent: this._lastTouchEvent }));
    this._map.fire(new __chunk_1.Event('move', { originalEvent: this._lastTouchEvent }));
    this._drainInertiaBuffer();
    this._inertia.push([
        __chunk_1.browser.now(),
        scale,
        center
    ]);
};
TouchZoomRotateHandler.prototype._onEnd = function _onEnd(e) {
    DOM.removeEventListener(__chunk_1.window.document, 'touchmove', this._onMove, { passive: false });
    DOM.removeEventListener(__chunk_1.window.document, 'touchend', this._onEnd);
    var gestureIntent = this._gestureIntent;
    var startScale = this._startScale;
    if (this._frameId) {
        this._map._cancelRenderFrame(this._frameId);
        this._frameId = null;
    }
    delete this._gestureIntent;
    delete this._startScale;
    delete this._startBearing;
    delete this._lastTouchEvent;
    if (!gestureIntent) {
        return;
    }
    this._map.fire(new __chunk_1.Event(gestureIntent + 'end', { originalEvent: e }));
    this._drainInertiaBuffer();
    var inertia = this._inertia, map = this._map;
    if (inertia.length < 2) {
        map.snapToNorth({}, { originalEvent: e });
        return;
    }
    var last = inertia[inertia.length - 1], first = inertia[0], lastScale = map.transform.scaleZoom(startScale * last[1]), firstScale = map.transform.scaleZoom(startScale * first[1]), scaleOffset = lastScale - firstScale, scaleDuration = (last[0] - first[0]) / 1000, p = last[2];
    if (scaleDuration === 0 || lastScale === firstScale) {
        map.snapToNorth({}, { originalEvent: e });
        return;
    }
    var speed = scaleOffset * inertiaLinearity$2 / scaleDuration;
    if (Math.abs(speed) > inertiaMaxSpeed$2) {
        if (speed > 0) {
            speed = inertiaMaxSpeed$2;
        } else {
            speed = -inertiaMaxSpeed$2;
        }
    }
    var duration = Math.abs(speed / (inertiaDeceleration$2 * inertiaLinearity$2)) * 1000;
    var targetScale = lastScale + speed * duration / 2000;
    if (targetScale < 0) {
        targetScale = 0;
    }
    map.easeTo({
        zoom: targetScale,
        duration: duration,
        easing: inertiaEasing$2,
        around: this._aroundCenter ? map.getCenter() : map.unproject(p),
        noMoveStart: true
    }, { originalEvent: e });
};
TouchZoomRotateHandler.prototype._drainInertiaBuffer = function _drainInertiaBuffer() {
    var inertia = this._inertia, now = __chunk_1.browser.now(), cutoff = 160;
    while (inertia.length > 2 && now - inertia[0][0] > cutoff) {
        inertia.shift();
    }
};

var handlers = {
    scrollZoom: ScrollZoomHandler,
    boxZoom: BoxZoomHandler,
    dragRotate: DragRotateHandler,
    dragPan: DragPanHandler,
    keyboard: KeyboardHandler,
    doubleClickZoom: DoubleClickZoomHandler,
    touchZoomRotate: TouchZoomRotateHandler
};
function bindHandlers(map, options) {
    var el = map.getCanvasContainer();
    var contextMenuEvent = null;
    var mouseDown = false;
    var startPos = null;
    for (var name in handlers) {
        map[name] = new handlers[name](map, options);
        if (options.interactive && options[name]) {
            map[name].enable(options[name]);
        }
    }
    DOM.addEventListener(el, 'mouseout', onMouseOut);
    DOM.addEventListener(el, 'mousedown', onMouseDown);
    DOM.addEventListener(el, 'mouseup', onMouseUp);
    DOM.addEventListener(el, 'mousemove', onMouseMove);
    DOM.addEventListener(el, 'mouseover', onMouseOver);
    DOM.addEventListener(el, 'touchstart', onTouchStart, { passive: false });
    DOM.addEventListener(el, 'touchmove', onTouchMove, { passive: false });
    DOM.addEventListener(el, 'touchend', onTouchEnd);
    DOM.addEventListener(el, 'touchcancel', onTouchCancel);
    DOM.addEventListener(el, 'click', onClick);
    DOM.addEventListener(el, 'dblclick', onDblClick);
    DOM.addEventListener(el, 'contextmenu', onContextMenu);
    DOM.addEventListener(el, 'wheel', onWheel, { passive: false });
    function onMouseDown(e) {
        mouseDown = true;
        startPos = DOM.mousePos(el, e);
        var mapEvent = new MapMouseEvent('mousedown', map, e);
        map.fire(mapEvent);
        if (mapEvent.defaultPrevented) {
            return;
        }
        if (options.interactive && !map.doubleClickZoom.isActive()) {
            map.stop();
        }
        map.boxZoom.onMouseDown(e);
        if (!map.boxZoom.isActive() && !map.dragPan.isActive()) {
            map.dragRotate.onMouseDown(e);
        }
        if (!map.boxZoom.isActive() && !map.dragRotate.isActive()) {
            map.dragPan.onMouseDown(e);
        }
    }
    function onMouseUp(e) {
        var rotating = map.dragRotate.isActive();
        if (contextMenuEvent && !rotating) {
            map.fire(new MapMouseEvent('contextmenu', map, contextMenuEvent));
        }
        contextMenuEvent = null;
        mouseDown = false;
        map.fire(new MapMouseEvent('mouseup', map, e));
    }
    function onMouseMove(e) {
        if (map.dragPan.isActive()) {
            return;
        }
        if (map.dragRotate.isActive()) {
            return;
        }
        var target = e.target;
        while (target && target !== el) {
            target = target.parentNode;
        }
        if (target !== el) {
            return;
        }
        map.fire(new MapMouseEvent('mousemove', map, e));
    }
    function onMouseOver(e) {
        var target = e.target;
        while (target && target !== el) {
            target = target.parentNode;
        }
        if (target !== el) {
            return;
        }
        map.fire(new MapMouseEvent('mouseover', map, e));
    }
    function onMouseOut(e) {
        map.fire(new MapMouseEvent('mouseout', map, e));
    }
    function onTouchStart(e) {
        var mapEvent = new MapTouchEvent('touchstart', map, e);
        map.fire(mapEvent);
        if (mapEvent.defaultPrevented) {
            return;
        }
        if (options.interactive) {
            map.stop();
        }
        if (!map.boxZoom.isActive() && !map.dragRotate.isActive()) {
            map.dragPan.onTouchStart(e);
        }
        map.touchZoomRotate.onStart(e);
        map.doubleClickZoom.onTouchStart(mapEvent);
    }
    function onTouchMove(e) {
        map.fire(new MapTouchEvent('touchmove', map, e));
    }
    function onTouchEnd(e) {
        map.fire(new MapTouchEvent('touchend', map, e));
    }
    function onTouchCancel(e) {
        map.fire(new MapTouchEvent('touchcancel', map, e));
    }
    function onClick(e) {
        var pos = DOM.mousePos(el, e);
        if (pos.equals(startPos) || pos.dist(startPos) < options.clickTolerance) {
            map.fire(new MapMouseEvent('click', map, e));
        }
    }
    function onDblClick(e) {
        var mapEvent = new MapMouseEvent('dblclick', map, e);
        map.fire(mapEvent);
        if (mapEvent.defaultPrevented) {
            return;
        }
        map.doubleClickZoom.onDblClick(mapEvent);
    }
    function onContextMenu(e) {
        var rotating = map.dragRotate.isActive();
        if (!mouseDown && !rotating) {
            map.fire(new MapMouseEvent('contextmenu', map, e));
        } else if (mouseDown) {
            contextMenuEvent = e;
        }
        if (map.dragRotate.isEnabled() || map.listens('contextmenu')) {
            e.preventDefault();
        }
    }
    function onWheel(e) {
        if (options.interactive) {
            map.stop();
        }
        var mapEvent = new MapWheelEvent('wheel', map, e);
        map.fire(mapEvent);
        if (mapEvent.defaultPrevented) {
            return;
        }
        map.scrollZoom.onWheel(e);
    }
}

var Camera = function (Evented) {
    function Camera(transform, options) {
        Evented.call(this);
        this._moving = false;
        this._zooming = false;
        this.transform = transform;
        this._bearingSnap = options.bearingSnap;
        __chunk_1.bindAll(['_renderFrameCallback'], this);
    }
    if (Evented)
        Camera.__proto__ = Evented;
    Camera.prototype = Object.create(Evented && Evented.prototype);
    Camera.prototype.constructor = Camera;
    Camera.prototype.getCenter = function getCenter() {
        return this.transform.center;
    };
    Camera.prototype.setCenter = function setCenter(center, eventData) {
        return this.jumpTo({ center: center }, eventData);
    };
    Camera.prototype.panBy = function panBy(offset, options, eventData) {
        offset = __chunk_1.Point.convert(offset).mult(-1);
        return this.panTo(this.transform.center, __chunk_1.extend({ offset: offset }, options), eventData);
    };
    Camera.prototype.panTo = function panTo(lnglat, options, eventData) {
        return this.easeTo(__chunk_1.extend({ center: lnglat }, options), eventData);
    };
    Camera.prototype.getZoom = function getZoom() {
        return this.transform.zoom;
    };
    Camera.prototype.setZoom = function setZoom(zoom, eventData) {
        this.jumpTo({ zoom: zoom }, eventData);
        return this;
    };
    Camera.prototype.zoomTo = function zoomTo(zoom, options, eventData) {
        return this.easeTo(__chunk_1.extend({ zoom: zoom }, options), eventData);
    };
    Camera.prototype.zoomIn = function zoomIn(options, eventData) {
        this.zoomTo(this.getZoom() + 1, options, eventData);
        return this;
    };
    Camera.prototype.zoomOut = function zoomOut(options, eventData) {
        this.zoomTo(this.getZoom() - 1, options, eventData);
        return this;
    };
    Camera.prototype.getBearing = function getBearing() {
        return this.transform.bearing;
    };
    Camera.prototype.setBearing = function setBearing(bearing, eventData) {
        this.jumpTo({ bearing: bearing }, eventData);
        return this;
    };
    Camera.prototype.rotateTo = function rotateTo(bearing, options, eventData) {
        return this.easeTo(__chunk_1.extend({ bearing: bearing }, options), eventData);
    };
    Camera.prototype.resetNorth = function resetNorth(options, eventData) {
        this.rotateTo(0, __chunk_1.extend({ duration: 1000 }, options), eventData);
        return this;
    };
    Camera.prototype.snapToNorth = function snapToNorth(options, eventData) {
        if (Math.abs(this.getBearing()) < this._bearingSnap) {
            return this.resetNorth(options, eventData);
        }
        return this;
    };
    Camera.prototype.getPitch = function getPitch() {
        return this.transform.pitch;
    };
    Camera.prototype.setPitch = function setPitch(pitch, eventData) {
        this.jumpTo({ pitch: pitch }, eventData);
        return this;
    };
    Camera.prototype.cameraForBounds = function cameraForBounds(bounds, options) {
        bounds = LngLatBounds.convert(bounds);
        return this._cameraForBoxAndBearing(bounds.getNorthWest(), bounds.getSouthEast(), 0, options);
    };
    Camera.prototype._cameraForBoxAndBearing = function _cameraForBoxAndBearing(p0, p1, bearing, options) {
        options = __chunk_1.extend({
            padding: {
                top: 0,
                bottom: 0,
                right: 0,
                left: 0
            },
            offset: [
                0,
                0
            ],
            maxZoom: this.transform.maxZoom
        }, options);
        if (typeof options.padding === 'number') {
            var p = options.padding;
            options.padding = {
                top: p,
                bottom: p,
                right: p,
                left: p
            };
        }
        if (!__chunk_1.deepEqual(Object.keys(options.padding).sort(function (a, b) {
                if (a < b) {
                    return -1;
                }
                if (a > b) {
                    return 1;
                }
                return 0;
            }), [
                'bottom',
                'left',
                'right',
                'top'
            ])) {
            __chunk_1.warnOnce('options.padding must be a positive number, or an Object with keys \'bottom\', \'left\', \'right\', \'top\'');
            return;
        }
        var paddingOffset = [
                (options.padding.left - options.padding.right) / 2,
                (options.padding.top - options.padding.bottom) / 2
            ], lateralPadding = Math.min(options.padding.right, options.padding.left), verticalPadding = Math.min(options.padding.top, options.padding.bottom);
        options.offset = [
            options.offset[0] + paddingOffset[0],
            options.offset[1] + paddingOffset[1]
        ];
        var tr = this.transform;
        var p0world = tr.project(LngLat.convert(p0));
        var p1world = tr.project(LngLat.convert(p1));
        var p0rotated = p0world.rotate(-bearing * Math.PI / 180);
        var p1rotated = p1world.rotate(-bearing * Math.PI / 180);
        var upperRight = new __chunk_1.Point(Math.max(p0rotated.x, p1rotated.x), Math.max(p0rotated.y, p1rotated.y));
        var lowerLeft = new __chunk_1.Point(Math.min(p0rotated.x, p1rotated.x), Math.min(p0rotated.y, p1rotated.y));
        var offset = __chunk_1.Point.convert(options.offset), size = upperRight.sub(lowerLeft), scaleX = (tr.width - lateralPadding * 2 - Math.abs(offset.x) * 2) / size.x, scaleY = (tr.height - verticalPadding * 2 - Math.abs(offset.y) * 2) / size.y;
        if (scaleY < 0 || scaleX < 0) {
            __chunk_1.warnOnce('Map cannot fit within canvas with the given bounds, padding, and/or offset.');
            return;
        }
        options.center = tr.unproject(p0world.add(p1world).div(2));
        options.zoom = Math.min(tr.scaleZoom(tr.scale * Math.min(scaleX, scaleY)), options.maxZoom);
        options.bearing = bearing;
        return options;
    };
    Camera.prototype.fitBounds = function fitBounds(bounds, options, eventData) {
        return this._fitInternal(this.cameraForBounds(bounds, options), options, eventData);
    };
    Camera.prototype.fitScreenCoordinates = function fitScreenCoordinates(p0, p1, bearing, options, eventData) {
        return this._fitInternal(this._cameraForBoxAndBearing(this.transform.pointLocation(__chunk_1.Point.convert(p0)), this.transform.pointLocation(__chunk_1.Point.convert(p1)), bearing, options), options, eventData);
    };
    Camera.prototype._fitInternal = function _fitInternal(calculatedOptions, options, eventData) {
        if (!calculatedOptions) {
            return this;
        }
        options = __chunk_1.extend(calculatedOptions, options);
        return options.linear ? this.easeTo(options, eventData) : this.flyTo(options, eventData);
    };
    Camera.prototype.jumpTo = function jumpTo(options, eventData) {
        this.stop();
        var tr = this.transform;
        var zoomChanged = false, bearingChanged = false, pitchChanged = false;
        if ('zoom' in options && tr.zoom !== +options.zoom) {
            zoomChanged = true;
            tr.zoom = +options.zoom;
        }
        if (options.center !== undefined) {
            tr.center = LngLat.convert(options.center);
        }
        if ('bearing' in options && tr.bearing !== +options.bearing) {
            bearingChanged = true;
            tr.bearing = +options.bearing;
        }
        if ('pitch' in options && tr.pitch !== +options.pitch) {
            pitchChanged = true;
            tr.pitch = +options.pitch;
        }
        this.fire(new __chunk_1.Event('movestart', eventData)).fire(new __chunk_1.Event('move', eventData));
        if (zoomChanged) {
            this.fire(new __chunk_1.Event('zoomstart', eventData)).fire(new __chunk_1.Event('zoom', eventData)).fire(new __chunk_1.Event('zoomend', eventData));
        }
        if (bearingChanged) {
            this.fire(new __chunk_1.Event('rotatestart', eventData)).fire(new __chunk_1.Event('rotate', eventData)).fire(new __chunk_1.Event('rotateend', eventData));
        }
        if (pitchChanged) {
            this.fire(new __chunk_1.Event('pitchstart', eventData)).fire(new __chunk_1.Event('pitch', eventData)).fire(new __chunk_1.Event('pitchend', eventData));
        }
        return this.fire(new __chunk_1.Event('moveend', eventData));
    };
    Camera.prototype.easeTo = function easeTo(options, eventData) {
        var this$1 = this;
        this.stop();
        options = __chunk_1.extend({
            offset: [
                0,
                0
            ],
            duration: 500,
            easing: __chunk_1.ease
        }, options);
        if (options.animate === false) {
            options.duration = 0;
        }
        var tr = this.transform, startZoom = this.getZoom(), startBearing = this.getBearing(), startPitch = this.getPitch(), zoom = 'zoom' in options ? +options.zoom : startZoom, bearing = 'bearing' in options ? this._normalizeBearing(options.bearing, startBearing) : startBearing, pitch = 'pitch' in options ? +options.pitch : startPitch;
        var pointAtOffset = tr.centerPoint.add(__chunk_1.Point.convert(options.offset));
        var locationAtOffset = tr.pointLocation(pointAtOffset);
        var center = LngLat.convert(options.center || locationAtOffset);
        this._normalizeCenter(center);
        var from = tr.project(locationAtOffset);
        var delta = tr.project(center).sub(from);
        var finalScale = tr.zoomScale(zoom - startZoom);
        var around, aroundPoint;
        if (options.around) {
            around = LngLat.convert(options.around);
            aroundPoint = tr.locationPoint(around);
        }
        this._zooming = zoom !== startZoom;
        this._rotating = startBearing !== bearing;
        this._pitching = pitch !== startPitch;
        this._prepareEase(eventData, options.noMoveStart);
        clearTimeout(this._easeEndTimeoutID);
        this._ease(function (k) {
            if (this$1._zooming) {
                tr.zoom = __chunk_1.number(startZoom, zoom, k);
            }
            if (this$1._rotating) {
                tr.bearing = __chunk_1.number(startBearing, bearing, k);
            }
            if (this$1._pitching) {
                tr.pitch = __chunk_1.number(startPitch, pitch, k);
            }
            if (around) {
                tr.setLocationAtPoint(around, aroundPoint);
            } else {
                var scale = tr.zoomScale(tr.zoom - startZoom);
                var base = zoom > startZoom ? Math.min(2, finalScale) : Math.max(0.5, finalScale);
                var speedup = Math.pow(base, 1 - k);
                var newCenter = tr.unproject(from.add(delta.mult(k * speedup)).mult(scale));
                tr.setLocationAtPoint(tr.renderWorldCopies ? newCenter.wrap() : newCenter, pointAtOffset);
            }
            this$1._fireMoveEvents(eventData);
        }, function () {
            if (options.delayEndEvents) {
                this$1._easeEndTimeoutID = setTimeout(function () {
                    return this$1._afterEase(eventData);
                }, options.delayEndEvents);
            } else {
                this$1._afterEase(eventData);
            }
        }, options);
        return this;
    };
    Camera.prototype._prepareEase = function _prepareEase(eventData, noMoveStart) {
        this._moving = true;
        if (!noMoveStart) {
            this.fire(new __chunk_1.Event('movestart', eventData));
        }
        if (this._zooming) {
            this.fire(new __chunk_1.Event('zoomstart', eventData));
        }
        if (this._rotating) {
            this.fire(new __chunk_1.Event('rotatestart', eventData));
        }
        if (this._pitching) {
            this.fire(new __chunk_1.Event('pitchstart', eventData));
        }
    };
    Camera.prototype._fireMoveEvents = function _fireMoveEvents(eventData) {
        this.fire(new __chunk_1.Event('move', eventData));
        if (this._zooming) {
            this.fire(new __chunk_1.Event('zoom', eventData));
        }
        if (this._rotating) {
            this.fire(new __chunk_1.Event('rotate', eventData));
        }
        if (this._pitching) {
            this.fire(new __chunk_1.Event('pitch', eventData));
        }
    };
    Camera.prototype._afterEase = function _afterEase(eventData) {
        var wasZooming = this._zooming;
        var wasRotating = this._rotating;
        var wasPitching = this._pitching;
        this._moving = false;
        this._zooming = false;
        this._rotating = false;
        this._pitching = false;
        if (wasZooming) {
            this.fire(new __chunk_1.Event('zoomend', eventData));
        }
        if (wasRotating) {
            this.fire(new __chunk_1.Event('rotateend', eventData));
        }
        if (wasPitching) {
            this.fire(new __chunk_1.Event('pitchend', eventData));
        }
        this.fire(new __chunk_1.Event('moveend', eventData));
    };
    Camera.prototype.flyTo = function flyTo(options, eventData) {
        var this$1 = this;
        this.stop();
        options = __chunk_1.extend({
            offset: [
                0,
                0
            ],
            speed: 1.2,
            curve: 1.42,
            easing: __chunk_1.ease
        }, options);
        var tr = this.transform, startZoom = this.getZoom(), startBearing = this.getBearing(), startPitch = this.getPitch();
        var zoom = 'zoom' in options ? __chunk_1.clamp(+options.zoom, tr.minZoom, tr.maxZoom) : startZoom;
        var bearing = 'bearing' in options ? this._normalizeBearing(options.bearing, startBearing) : startBearing;
        var pitch = 'pitch' in options ? +options.pitch : startPitch;
        var scale = tr.zoomScale(zoom - startZoom);
        var pointAtOffset = tr.centerPoint.add(__chunk_1.Point.convert(options.offset));
        var locationAtOffset = tr.pointLocation(pointAtOffset);
        var center = LngLat.convert(options.center || locationAtOffset);
        this._normalizeCenter(center);
        var from = tr.project(locationAtOffset);
        var delta = tr.project(center).sub(from);
        var rho = options.curve;
        var w0 = Math.max(tr.width, tr.height), w1 = w0 / scale, u1 = delta.mag();
        if ('minZoom' in options) {
            var minZoom = __chunk_1.clamp(Math.min(options.minZoom, startZoom, zoom), tr.minZoom, tr.maxZoom);
            var wMax = w0 / tr.zoomScale(minZoom - startZoom);
            rho = Math.sqrt(wMax / u1 * 2);
        }
        var rho2 = rho * rho;
        function r(i) {
            var b = (w1 * w1 - w0 * w0 + (i ? -1 : 1) * rho2 * rho2 * u1 * u1) / (2 * (i ? w1 : w0) * rho2 * u1);
            return Math.log(Math.sqrt(b * b + 1) - b);
        }
        function sinh(n) {
            return (Math.exp(n) - Math.exp(-n)) / 2;
        }
        function cosh(n) {
            return (Math.exp(n) + Math.exp(-n)) / 2;
        }
        function tanh(n) {
            return sinh(n) / cosh(n);
        }
        var r0 = r(0);
        var w = function (s) {
            return cosh(r0) / cosh(r0 + rho * s);
        };
        var u = function (s) {
            return w0 * ((cosh(r0) * tanh(r0 + rho * s) - sinh(r0)) / rho2) / u1;
        };
        var S = (r(1) - r0) / rho;
        if (Math.abs(u1) < 0.000001 || !isFinite(S)) {
            if (Math.abs(w0 - w1) < 0.000001) {
                return this.easeTo(options, eventData);
            }
            var k = w1 < w0 ? -1 : 1;
            S = Math.abs(Math.log(w1 / w0)) / rho;
            u = function () {
                return 0;
            };
            w = function (s) {
                return Math.exp(k * rho * s);
            };
        }
        if ('duration' in options) {
            options.duration = +options.duration;
        } else {
            var V = 'screenSpeed' in options ? +options.screenSpeed / rho : +options.speed;
            options.duration = 1000 * S / V;
        }
        if (options.maxDuration && options.duration > options.maxDuration) {
            options.duration = 0;
        }
        this._zooming = true;
        this._rotating = startBearing !== bearing;
        this._pitching = pitch !== startPitch;
        this._prepareEase(eventData, false);
        this._ease(function (k) {
            var s = k * S;
            var scale = 1 / w(s);
            tr.zoom = k === 1 ? zoom : startZoom + tr.scaleZoom(scale);
            if (this$1._rotating) {
                tr.bearing = __chunk_1.number(startBearing, bearing, k);
            }
            if (this$1._pitching) {
                tr.pitch = __chunk_1.number(startPitch, pitch, k);
            }
            var newCenter = k === 1 ? center : tr.unproject(from.add(delta.mult(u(s))).mult(scale));
            tr.setLocationAtPoint(tr.renderWorldCopies ? newCenter.wrap() : newCenter, pointAtOffset);
            this$1._fireMoveEvents(eventData);
        }, function () {
            return this$1._afterEase(eventData);
        }, options);
        return this;
    };
    Camera.prototype.isEasing = function isEasing() {
        return !!this._easeFrameId;
    };
    Camera.prototype.stop = function stop() {
        if (this._easeFrameId) {
            this._cancelRenderFrame(this._easeFrameId);
            delete this._easeFrameId;
            delete this._onEaseFrame;
        }
        if (this._onEaseEnd) {
            var onEaseEnd = this._onEaseEnd;
            delete this._onEaseEnd;
            onEaseEnd.call(this);
        }
        return this;
    };
    Camera.prototype._ease = function _ease(frame, finish, options) {
        if (options.animate === false || options.duration === 0) {
            frame(1);
            finish();
        } else {
            this._easeStart = __chunk_1.browser.now();
            this._easeOptions = options;
            this._onEaseFrame = frame;
            this._onEaseEnd = finish;
            this._easeFrameId = this._requestRenderFrame(this._renderFrameCallback);
        }
    };
    Camera.prototype._renderFrameCallback = function _renderFrameCallback() {
        var t = Math.min((__chunk_1.browser.now() - this._easeStart) / this._easeOptions.duration, 1);
        this._onEaseFrame(this._easeOptions.easing(t));
        if (t < 1) {
            this._easeFrameId = this._requestRenderFrame(this._renderFrameCallback);
        } else {
            this.stop();
        }
    };
    Camera.prototype._normalizeBearing = function _normalizeBearing(bearing, currentBearing) {
        bearing = __chunk_1.wrap(bearing, -180, 180);
        var diff = Math.abs(bearing - currentBearing);
        if (Math.abs(bearing - 360 - currentBearing) < diff) {
            bearing -= 360;
        }
        if (Math.abs(bearing + 360 - currentBearing) < diff) {
            bearing += 360;
        }
        return bearing;
    };
    Camera.prototype._normalizeCenter = function _normalizeCenter(center) {
        var tr = this.transform;
        if (!tr.renderWorldCopies || tr.lngRange) {
            return;
        }
        var delta = center.lng - tr.center.lng;
        center.lng += delta > 180 ? -360 : delta < -180 ? 360 : 0;
    };
    return Camera;
}(__chunk_1.Evented);

var AttributionControl = function AttributionControl(options) {
    if (options === void 0)
        options = {};
    this.options = options;
    __chunk_1.bindAll([
        '_updateEditLink',
        '_updateData',
        '_updateCompact'
    ], this);
};
AttributionControl.prototype.getDefaultPosition = function getDefaultPosition() {
    return 'bottom-right';
};
AttributionControl.prototype.onAdd = function onAdd(map) {
    var compact = this.options && this.options.compact;
    this._map = map;
    this._container = DOM.create('div', 'mapboxgl-ctrl mapboxgl-ctrl-attrib');
    if (compact) {
        this._container.classList.add('mapboxgl-compact');
    }
    this._updateAttributions();
    this._updateEditLink();
    this._map.on('styledata', this._updateData);
    this._map.on('sourcedata', this._updateData);
    this._map.on('moveend', this._updateEditLink);
    if (compact === undefined) {
        this._map.on('resize', this._updateCompact);
        this._updateCompact();
    }
    return this._container;
};
AttributionControl.prototype.onRemove = function onRemove() {
    DOM.remove(this._container);
    this._map.off('styledata', this._updateData);
    this._map.off('sourcedata', this._updateData);
    this._map.off('moveend', this._updateEditLink);
    this._map.off('resize', this._updateCompact);
    this._map = undefined;
};
AttributionControl.prototype._updateEditLink = function _updateEditLink() {
    var editLink = this._editLink;
    if (!editLink) {
        editLink = this._editLink = this._container.querySelector('.mapbox-improve-map');
    }
    var params = [
        {
            key: 'owner',
            value: this.styleOwner
        },
        {
            key: 'id',
            value: this.styleId
        },
        {
            key: 'access_token',
            value: __chunk_1.config.ACCESS_TOKEN
        }
    ];
    if (editLink) {
        var paramString = params.reduce(function (acc, next, i) {
            if (next.value) {
                acc += next.key + '=' + next.value + (i < params.length - 1 ? '&' : '');
            }
            return acc;
        }, '?');
        editLink.href = 'https://www.mapbox.com/feedback/' + paramString + (this._map._hash ? this._map._hash.getHashString(true) : '');
    }
};
AttributionControl.prototype._updateData = function _updateData(e) {
    if (e && (e.sourceDataType === 'metadata' || e.dataType === 'style')) {
        this._updateAttributions();
        this._updateEditLink();
    }
};
AttributionControl.prototype._updateAttributions = function _updateAttributions() {
    if (!this._map.style) {
        return;
    }
    var attributions = [];
    if (this.options.customAttribution) {
        if (Array.isArray(this.options.customAttribution)) {
            attributions = attributions.concat(this.options.customAttribution);
        } else if (typeof this.options.customAttribution === 'string') {
            attributions.push(this.options.customAttribution);
        }
    }
    if (this._map.style.stylesheet) {
        var stylesheet = this._map.style.stylesheet;
        this.styleOwner = stylesheet.owner;
        this.styleId = stylesheet.id;
    }
    var sourceCaches = this._map.style.sourceCaches;
    for (var id in sourceCaches) {
        var sourceCache = sourceCaches[id];
        if (sourceCache.used) {
            var source = sourceCache.getSource();
            if (source.attribution && attributions.indexOf(source.attribution) < 0) {
                attributions.push(source.attribution);
            }
        }
    }
    attributions.sort(function (a, b) {
        return a.length - b.length;
    });
    attributions = attributions.filter(function (attrib, i) {
        for (var j = i + 1; j < attributions.length; j++) {
            if (attributions[j].indexOf(attrib) >= 0) {
                return false;
            }
        }
        return true;
    });
    if (attributions.length) {
        this._container.innerHTML = attributions.join(' | ');
        this._container.classList.remove('mapboxgl-attrib-empty');
    } else {
        this._container.classList.add('mapboxgl-attrib-empty');
    }
    this._editLink = null;
};
AttributionControl.prototype._updateCompact = function _updateCompact() {
    if (this._map.getCanvasContainer().offsetWidth <= 640) {
        this._container.classList.add('mapboxgl-compact');
    } else {
        this._container.classList.remove('mapboxgl-compact');
    }
};

var LogoControl = function LogoControl() {
    __chunk_1.bindAll(['_updateLogo'], this);
    __chunk_1.bindAll(['_updateCompact'], this);
};
LogoControl.prototype.onAdd = function onAdd(map) {
    this._map = map;
    this._container = DOM.create('div', 'mapboxgl-ctrl');
    var anchor = DOM.create('a', 'mapboxgl-ctrl-logo');
    anchor.target = '_blank';
    anchor.href = 'https://www.mapbox.com/';
    anchor.setAttribute('aria-label', 'Mapbox logo');
    anchor.setAttribute('rel', 'noopener');
    this._container.appendChild(anchor);
    this._container.style.display = 'none';
    this._map.on('sourcedata', this._updateLogo);
    this._updateLogo();
    this._map.on('resize', this._updateCompact);
    this._updateCompact();
    return this._container;
};
LogoControl.prototype.onRemove = function onRemove() {
    DOM.remove(this._container);
    this._map.off('sourcedata', this._updateLogo);
    this._map.off('resize', this._updateCompact);
};
LogoControl.prototype.getDefaultPosition = function getDefaultPosition() {
    return 'bottom-left';
};
LogoControl.prototype._updateLogo = function _updateLogo(e) {
    if (!e || e.sourceDataType === 'metadata') {
        this._container.style.display = this._logoRequired() ? 'block' : 'none';
    }
};
LogoControl.prototype._logoRequired = function _logoRequired() {
    if (!this._map.style) {
        return;
    }
    var sourceCaches = this._map.style.sourceCaches;
    for (var id in sourceCaches) {
        var source = sourceCaches[id].getSource();
        if (source.mapbox_logo) {
            return true;
        }
    }
    return false;
};
LogoControl.prototype._updateCompact = function _updateCompact() {
    var containerChildren = this._container.children;
    if (containerChildren.length) {
        var anchor = containerChildren[0];
        if (this._map.getCanvasContainer().offsetWidth < 250) {
            anchor.classList.add('mapboxgl-compact');
        } else {
            anchor.classList.remove('mapboxgl-compact');
        }
    }
};

var TaskQueue = function TaskQueue() {
    this._queue = [];
    this._id = 0;
    this._cleared = false;
    this._currentlyRunning = false;
};
TaskQueue.prototype.add = function add(callback) {
    var id = ++this._id;
    var queue = this._queue;
    queue.push({
        callback: callback,
        id: id,
        cancelled: false
    });
    return id;
};
TaskQueue.prototype.remove = function remove(id) {
    var running = this._currentlyRunning;
    var queue = running ? this._queue.concat(running) : this._queue;
    for (var i = 0, list = queue; i < list.length; i += 1) {
        var task = list[i];
        if (task.id === id) {
            task.cancelled = true;
            return;
        }
    }
};
TaskQueue.prototype.run = function run() {
    var this$1 = this;
    var queue = this._currentlyRunning = this._queue;
    this._queue = [];
    for (var i = 0, list = queue; i < list.length; i += 1) {
        var task = list[i];
        if (task.cancelled) {
            continue;
        }
        task.callback();
        if (this$1._cleared) {
            break;
        }
    }
    this._cleared = false;
    this._currentlyRunning = false;
};
TaskQueue.prototype.clear = function clear() {
    if (this._currentlyRunning) {
        this._cleared = true;
    }
    this._queue = [];
};

var HTMLImageElement = __chunk_1.window.HTMLImageElement;
var HTMLElement = __chunk_1.window.HTMLElement;
var defaultMinZoom = 0;
var defaultMaxZoom = 22;
var defaultOptions = {
    center: [
        0,
        0
    ],
    zoom: 0,
    bearing: 0,
    pitch: 0,
    minZoom: defaultMinZoom,
    maxZoom: defaultMaxZoom,
    interactive: true,
    scrollZoom: true,
    boxZoom: true,
    dragRotate: true,
    dragPan: true,
    keyboard: true,
    doubleClickZoom: true,
    touchZoomRotate: true,
    bearingSnap: 7,
    clickTolerance: 3,
    hash: false,
    attributionControl: true,
    failIfMajorPerformanceCaveat: false,
    preserveDrawingBuffer: false,
    trackResize: true,
    renderWorldCopies: true,
    refreshExpiredTiles: true,
    maxTileCacheSize: null,
    transformRequest: null,
    fadeDuration: 300,
    crossSourceCollisions: true
};
var Map = function (Camera$$1) {
    function Map(options) {
        var this$1 = this;
        options = __chunk_1.extend({}, defaultOptions, options);
        if (options.minZoom != null && options.maxZoom != null && options.minZoom > options.maxZoom) {
            throw new Error('maxZoom must be greater than minZoom');
        }
        var transform = new Transform(options.minZoom, options.maxZoom, options.renderWorldCopies);
        Camera$$1.call(this, transform, options);
        this._interactive = options.interactive;
        this._maxTileCacheSize = options.maxTileCacheSize;
        this._failIfMajorPerformanceCaveat = options.failIfMajorPerformanceCaveat;
        this._preserveDrawingBuffer = options.preserveDrawingBuffer;
        this._trackResize = options.trackResize;
        this._bearingSnap = options.bearingSnap;
        this._refreshExpiredTiles = options.refreshExpiredTiles;
        this._fadeDuration = options.fadeDuration;
        this._crossSourceCollisions = options.crossSourceCollisions;
        this._crossFadingFactor = 1;
        this._collectResourceTiming = options.collectResourceTiming;
        this._renderTaskQueue = new TaskQueue();
        this._controls = [];
        var transformRequestFn = options.transformRequest;
        this._transformRequest = transformRequestFn ? function (url, type) {
            return transformRequestFn(url, type) || { url: url };
        } : function (url) {
            return { url: url };
        };
        if (typeof options.container === 'string') {
            this._container = __chunk_1.window.document.getElementById(options.container);
            if (!this._container) {
                throw new Error('Container \'' + options.container + '\' not found.');
            }
        } else if (options.container instanceof HTMLElement) {
            this._container = options.container;
        } else {
            throw new Error('Invalid type: \'container\' must be a String or HTMLElement.');
        }
        if (options.maxBounds) {
            this.setMaxBounds(options.maxBounds);
        }
        __chunk_1.bindAll([
            '_onWindowOnline',
            '_onWindowResize',
            '_contextLost',
            '_contextRestored'
        ], this);
        this._setupContainer();
        this._setupPainter();
        if (this.painter === undefined) {
            throw new Error('Failed to initialize WebGL.');
        }
        this.on('move', function () {
            return this$1._update(false);
        });
        this.on('zoom', function () {
            return this$1._update(true);
        });
        if (typeof __chunk_1.window !== 'undefined') {
            __chunk_1.window.addEventListener('online', this._onWindowOnline, false);
            __chunk_1.window.addEventListener('resize', this._onWindowResize, false);
        }
        bindHandlers(this, options);
        this._hash = options.hash && new Hash().addTo(this);
        if (!this._hash || !this._hash._onHashChange()) {
            if (options.bounds) {
                this.resize();
                this.fitBounds(options.bounds, { duration: 0 });
            } else {
                this.jumpTo({
                    center: options.center,
                    zoom: options.zoom,
                    bearing: options.bearing,
                    pitch: options.pitch
                });
            }
        }
        this.resize();
        if (options.style) {
            this.setStyle(options.style, { localIdeographFontFamily: options.localIdeographFontFamily });
        }
        if (options.attributionControl) {
            this.addControl(new AttributionControl({ customAttribution: options.customAttribution }));
        }
        this.addControl(new LogoControl(), options.logoPosition);
        this.on('style.load', function () {
            if (this$1.transform.unmodified) {
                this$1.jumpTo(this$1.style.stylesheet);
            }
        });
        this.on('data', function (event) {
            this$1._update(event.dataType === 'style');
            this$1.fire(new __chunk_1.Event(event.dataType + 'data', event));
        });
        this.on('dataloading', function (event) {
            this$1.fire(new __chunk_1.Event(event.dataType + 'dataloading', event));
        });
    }
    if (Camera$$1)
        Map.__proto__ = Camera$$1;
    Map.prototype = Object.create(Camera$$1 && Camera$$1.prototype);
    Map.prototype.constructor = Map;
    var prototypeAccessors = {
        showTileBoundaries: { configurable: true },
        showCollisionBoxes: { configurable: true },
        showOverdrawInspector: { configurable: true },
        repaint: { configurable: true },
        vertices: { configurable: true }
    };
    Map.prototype.addControl = function addControl(control, position) {
        if (position === undefined && control.getDefaultPosition) {
            position = control.getDefaultPosition();
        }
        if (position === undefined) {
            position = 'top-right';
        }
        if (!control || !control.onAdd) {
            return this.fire(new __chunk_1.ErrorEvent(new Error('Invalid argument to map.addControl(). Argument must be a control with onAdd and onRemove methods.')));
        }
        var controlElement = control.onAdd(this);
        this._controls.push(control);
        var positionContainer = this._controlPositions[position];
        if (position.indexOf('bottom') !== -1) {
            positionContainer.insertBefore(controlElement, positionContainer.firstChild);
        } else {
            positionContainer.appendChild(controlElement);
        }
        return this;
    };
    Map.prototype.removeControl = function removeControl(control) {
        if (!control || !control.onRemove) {
            return this.fire(new __chunk_1.ErrorEvent(new Error('Invalid argument to map.removeControl(). Argument must be a control with onAdd and onRemove methods.')));
        }
        var ci = this._controls.indexOf(control);
        if (ci > -1) {
            this._controls.splice(ci, 1);
        }
        control.onRemove(this);
        return this;
    };
    Map.prototype.resize = function resize(eventData) {
        var dimensions = this._containerDimensions();
        var width = dimensions[0];
        var height = dimensions[1];
        this._resizeCanvas(width, height);
        this.transform.resize(width, height);
        this.painter.resize(width, height);
        this.fire(new __chunk_1.Event('movestart', eventData)).fire(new __chunk_1.Event('move', eventData)).fire(new __chunk_1.Event('resize', eventData)).fire(new __chunk_1.Event('moveend', eventData));
        return this;
    };
    Map.prototype.getBounds = function getBounds() {
        return this.transform.getBounds();
    };
    Map.prototype.getMaxBounds = function getMaxBounds() {
        return this.transform.getMaxBounds();
    };
    Map.prototype.setMaxBounds = function setMaxBounds(bounds) {
        this.transform.setMaxBounds(LngLatBounds.convert(bounds));
        return this._update();
    };
    Map.prototype.setMinZoom = function setMinZoom(minZoom) {
        minZoom = minZoom === null || minZoom === undefined ? defaultMinZoom : minZoom;
        if (minZoom >= defaultMinZoom && minZoom <= this.transform.maxZoom) {
            this.transform.minZoom = minZoom;
            this._update();
            if (this.getZoom() < minZoom) {
                this.setZoom(minZoom);
            }
            return this;
        } else {
            throw new Error('minZoom must be between ' + defaultMinZoom + ' and the current maxZoom, inclusive');
        }
    };
    Map.prototype.getMinZoom = function getMinZoom() {
        return this.transform.minZoom;
    };
    Map.prototype.setMaxZoom = function setMaxZoom(maxZoom) {
        maxZoom = maxZoom === null || maxZoom === undefined ? defaultMaxZoom : maxZoom;
        if (maxZoom >= this.transform.minZoom) {
            this.transform.maxZoom = maxZoom;
            this._update();
            if (this.getZoom() > maxZoom) {
                this.setZoom(maxZoom);
            }
            return this;
        } else {
            throw new Error('maxZoom must be greater than the current minZoom');
        }
    };
    Map.prototype.getRenderWorldCopies = function getRenderWorldCopies() {
        return this.transform.renderWorldCopies;
    };
    Map.prototype.setRenderWorldCopies = function setRenderWorldCopies(renderWorldCopies) {
        this.transform.renderWorldCopies = renderWorldCopies;
        return this._update();
    };
    Map.prototype.getMaxZoom = function getMaxZoom() {
        return this.transform.maxZoom;
    };
    Map.prototype.project = function project(lnglat) {
        return this.transform.locationPoint(LngLat.convert(lnglat));
    };
    Map.prototype.unproject = function unproject(point) {
        return this.transform.pointLocation(__chunk_1.Point.convert(point));
    };
    Map.prototype.isMoving = function isMoving() {
        return this._moving || this.dragPan.isActive() || this.dragRotate.isActive() || this.scrollZoom.isActive();
    };
    Map.prototype.isZooming = function isZooming() {
        return this._zooming || this.scrollZoom.isActive();
    };
    Map.prototype.isRotating = function isRotating() {
        return this._rotating || this.dragRotate.isActive();
    };
    Map.prototype.on = function on(type, layer, listener) {
        var this$1 = this;
        var obj;
        if (listener === undefined) {
            return Camera$$1.prototype.on.call(this, type, layer);
        }
        var delegatedListener = function () {
            if (type === 'mouseenter' || type === 'mouseover') {
                var mousein = false;
                var mousemove = function (e) {
                    var features = this$1.getLayer(layer) ? this$1.queryRenderedFeatures(e.point, { layers: [layer] }) : [];
                    if (!features.length) {
                        mousein = false;
                    } else if (!mousein) {
                        mousein = true;
                        listener.call(this$1, new MapMouseEvent(type, this$1, e.originalEvent, { features: features }));
                    }
                };
                var mouseout = function () {
                    mousein = false;
                };
                return {
                    layer: layer,
                    listener: listener,
                    delegates: {
                        mousemove: mousemove,
                        mouseout: mouseout
                    }
                };
            } else if (type === 'mouseleave' || type === 'mouseout') {
                var mousein$1 = false;
                var mousemove$1 = function (e) {
                    var features = this$1.getLayer(layer) ? this$1.queryRenderedFeatures(e.point, { layers: [layer] }) : [];
                    if (features.length) {
                        mousein$1 = true;
                    } else if (mousein$1) {
                        mousein$1 = false;
                        listener.call(this$1, new MapMouseEvent(type, this$1, e.originalEvent));
                    }
                };
                var mouseout$1 = function (e) {
                    if (mousein$1) {
                        mousein$1 = false;
                        listener.call(this$1, new MapMouseEvent(type, this$1, e.originalEvent));
                    }
                };
                return {
                    layer: layer,
                    listener: listener,
                    delegates: {
                        mousemove: mousemove$1,
                        mouseout: mouseout$1
                    }
                };
            } else {
                var delegate = function (e) {
                    var features = this$1.getLayer(layer) ? this$1.queryRenderedFeatures(e.point, { layers: [layer] }) : [];
                    if (features.length) {
                        e.features = features;
                        listener.call(this$1, e);
                        delete e.features;
                    }
                };
                return {
                    layer: layer,
                    listener: listener,
                    delegates: (obj = {}, obj[type] = delegate, obj)
                };
            }
        }();
        this._delegatedListeners = this._delegatedListeners || {};
        this._delegatedListeners[type] = this._delegatedListeners[type] || [];
        this._delegatedListeners[type].push(delegatedListener);
        for (var event in delegatedListener.delegates) {
            this$1.on(event, delegatedListener.delegates[event]);
        }
        return this;
    };
    Map.prototype.off = function off(type, layer, listener) {
        var this$1 = this;
        if (listener === undefined) {
            return Camera$$1.prototype.off.call(this, type, layer);
        }
        if (this._delegatedListeners && this._delegatedListeners[type]) {
            var listeners = this._delegatedListeners[type];
            for (var i = 0; i < listeners.length; i++) {
                var delegatedListener = listeners[i];
                if (delegatedListener.layer === layer && delegatedListener.listener === listener) {
                    for (var event in delegatedListener.delegates) {
                        this$1.off(event, delegatedListener.delegates[event]);
                    }
                    listeners.splice(i, 1);
                    return this$1;
                }
            }
        }
        return this;
    };
    Map.prototype.queryRenderedFeatures = function queryRenderedFeatures(geometry, options) {
        if (!this.style) {
            return [];
        }
        if (options === undefined && geometry !== undefined && !(geometry instanceof __chunk_1.Point) && !Array.isArray(geometry)) {
            options = geometry;
            geometry = undefined;
        }
        options = options || {};
        geometry = geometry || [
            [
                0,
                0
            ],
            [
                this.transform.width,
                this.transform.height
            ]
        ];
        var queryGeometry;
        if (geometry instanceof __chunk_1.Point || typeof geometry[0] === 'number') {
            queryGeometry = [__chunk_1.Point.convert(geometry)];
        } else {
            var tl = __chunk_1.Point.convert(geometry[0]);
            var br = __chunk_1.Point.convert(geometry[1]);
            queryGeometry = [
                tl,
                new __chunk_1.Point(br.x, tl.y),
                br,
                new __chunk_1.Point(tl.x, br.y),
                tl
            ];
        }
        return this.style.queryRenderedFeatures(queryGeometry, options, this.transform);
    };
    Map.prototype.querySourceFeatures = function querySourceFeatures(sourceID, parameters) {
        return this.style.querySourceFeatures(sourceID, parameters);
    };
    Map.prototype.setStyle = function setStyle(style, options) {
        var shouldTryDiff = (!options || options.diff !== false && !options.localIdeographFontFamily) && this.style;
        if (shouldTryDiff && style && typeof style === 'object') {
            try {
                if (this.style.setState(style)) {
                    this._update(true);
                }
                return this;
            } catch (e) {
                __chunk_1.warnOnce('Unable to perform style diff: ' + (e.message || e.error || e) + '.  Rebuilding the style from scratch.');
            }
        }
        if (this.style) {
            this.style.setEventedParent(null);
            this.style._remove();
        }
        if (!style) {
            delete this.style;
            return this;
        } else {
            this.style = new Style(this, options || {});
        }
        this.style.setEventedParent(this, { style: this.style });
        if (typeof style === 'string') {
            this.style.loadURL(style);
        } else {
            this.style.loadJSON(style);
        }
        return this;
    };
    Map.prototype.getStyle = function getStyle() {
        if (this.style) {
            return this.style.serialize();
        }
    };
    Map.prototype.isStyleLoaded = function isStyleLoaded() {
        if (!this.style) {
            return __chunk_1.warnOnce('There is no style added to the map.');
        }
        return this.style.loaded();
    };
    Map.prototype.addSource = function addSource(id, source) {
        this.style.addSource(id, source);
        return this._update(true);
    };
    Map.prototype.isSourceLoaded = function isSourceLoaded(id) {
        var source = this.style && this.style.sourceCaches[id];
        if (source === undefined) {
            this.fire(new __chunk_1.ErrorEvent(new Error('There is no source with ID \'' + id + '\'')));
            return;
        }
        return source.loaded();
    };
    Map.prototype.areTilesLoaded = function areTilesLoaded() {
        var sources = this.style && this.style.sourceCaches;
        for (var id in sources) {
            var source = sources[id];
            var tiles = source._tiles;
            for (var t in tiles) {
                var tile = tiles[t];
                if (!(tile.state === 'loaded' || tile.state === 'errored')) {
                    return false;
                }
            }
        }
        return true;
    };
    Map.prototype.addSourceType = function addSourceType(name, SourceType, callback) {
        return this.style.addSourceType(name, SourceType, callback);
    };
    Map.prototype.removeSource = function removeSource(id) {
        this.style.removeSource(id);
        return this._update(true);
    };
    Map.prototype.getSource = function getSource(id) {
        return this.style.getSource(id);
    };
    Map.prototype.addImage = function addImage(id, image, ref) {
        if (ref === void 0)
            ref = {};
        var pixelRatio = ref.pixelRatio;
        if (pixelRatio === void 0)
            pixelRatio = 1;
        var sdf = ref.sdf;
        if (sdf === void 0)
            sdf = false;
        if (image instanceof HTMLImageElement) {
            var ref$1 = __chunk_1.browser.getImageData(image);
            var width = ref$1.width;
            var height = ref$1.height;
            var data = ref$1.data;
            this.style.addImage(id, {
                data: new __chunk_1.RGBAImage({
                    width: width,
                    height: height
                }, data),
                pixelRatio: pixelRatio,
                sdf: sdf
            });
        } else if (image.width === undefined || image.height === undefined) {
            return this.fire(new __chunk_1.ErrorEvent(new Error('Invalid arguments to map.addImage(). The second argument must be an `HTMLImageElement`, `ImageData`, ' + 'or object with `width`, `height`, and `data` properties with the same format as `ImageData`')));
        } else {
            var width$1 = image.width;
            var height$1 = image.height;
            var data$1 = image.data;
            this.style.addImage(id, {
                data: new __chunk_1.RGBAImage({
                    width: width$1,
                    height: height$1
                }, new Uint8Array(data$1)),
                pixelRatio: pixelRatio,
                sdf: sdf
            });
        }
    };
    Map.prototype.hasImage = function hasImage(id) {
        if (!id) {
            this.fire(new __chunk_1.ErrorEvent(new Error('Missing required image id')));
            return false;
        }
        return !!this.style.getImage(id);
    };
    Map.prototype.removeImage = function removeImage(id) {
        this.style.removeImage(id);
    };
    Map.prototype.loadImage = function loadImage(url, callback) {
        __chunk_1.getImage(this._transformRequest(url, __chunk_1.ResourceType.Image), callback);
    };
    Map.prototype.listImages = function listImages() {
        return this.style.listImages();
    };
    Map.prototype.addLayer = function addLayer(layer, before) {
        this.style.addLayer(layer, before);
        return this._update(true);
    };
    Map.prototype.moveLayer = function moveLayer(id, beforeId) {
        this.style.moveLayer(id, beforeId);
        return this._update(true);
    };
    Map.prototype.removeLayer = function removeLayer(id) {
        this.style.removeLayer(id);
        return this._update(true);
    };
    Map.prototype.getLayer = function getLayer(id) {
        return this.style.getLayer(id);
    };
    Map.prototype.setFilter = function setFilter(layer, filter) {
        this.style.setFilter(layer, filter);
        return this._update(true);
    };
    Map.prototype.setLayerZoomRange = function setLayerZoomRange(layerId, minzoom, maxzoom) {
        this.style.setLayerZoomRange(layerId, minzoom, maxzoom);
        return this._update(true);
    };
    Map.prototype.getFilter = function getFilter(layer) {
        return this.style.getFilter(layer);
    };
    Map.prototype.setPaintProperty = function setPaintProperty(layer, name, value) {
        this.style.setPaintProperty(layer, name, value);
        return this._update(true);
    };
    Map.prototype.getPaintProperty = function getPaintProperty(layer, name) {
        return this.style.getPaintProperty(layer, name);
    };
    Map.prototype.setLayoutProperty = function setLayoutProperty(layer, name, value) {
        this.style.setLayoutProperty(layer, name, value);
        return this._update(true);
    };
    Map.prototype.getLayoutProperty = function getLayoutProperty(layer, name) {
        return this.style.getLayoutProperty(layer, name);
    };
    Map.prototype.setLight = function setLight(light) {
        this.style.setLight(light);
        return this._update(true);
    };
    Map.prototype.getLight = function getLight() {
        return this.style.getLight();
    };
    Map.prototype.setFeatureState = function setFeatureState(feature, state) {
        this.style.setFeatureState(feature, state);
        return this._update();
    };
    Map.prototype.getFeatureState = function getFeatureState(feature) {
        return this.style.getFeatureState(feature);
    };
    Map.prototype.getContainer = function getContainer() {
        return this._container;
    };
    Map.prototype.getCanvasContainer = function getCanvasContainer() {
        return this._canvasContainer;
    };
    Map.prototype.getCanvas = function getCanvas() {
        return this._canvas;
    };
    Map.prototype._containerDimensions = function _containerDimensions() {
        var width = 0;
        var height = 0;
        if (this._container) {
            width = this._container.clientWidth || 400;
            height = this._container.clientHeight || 300;
        }
        return [
            width,
            height
        ];
    };
    Map.prototype._detectMissingCSS = function _detectMissingCSS() {
        var computedColor = __chunk_1.window.getComputedStyle(this._missingCSSCanary).getPropertyValue('background-color');
        if (computedColor !== 'rgb(250, 128, 114)') {
            __chunk_1.warnOnce('This page appears to be missing CSS declarations for ' + 'Mapbox GL JS, which may cause the map to display incorrectly. ' + 'Please ensure your page includes mapbox-gl.css, as described ' + 'in https://www.mapbox.com/mapbox-gl-js/api/.');
        }
    };
    Map.prototype._setupContainer = function _setupContainer() {
        var container = this._container;
        container.classList.add('mapboxgl-map');
        var missingCSSCanary = this._missingCSSCanary = DOM.create('div', 'mapboxgl-canary', container);
        missingCSSCanary.style.visibility = 'hidden';
        this._detectMissingCSS();
        var canvasContainer = this._canvasContainer = DOM.create('div', 'mapboxgl-canvas-container', container);
        if (this._interactive) {
            canvasContainer.classList.add('mapboxgl-interactive');
        }
        this._canvas = DOM.create('canvas', 'mapboxgl-canvas', canvasContainer);
        this._canvas.style.position = 'absolute';
        this._canvas.addEventListener('webglcontextlost', this._contextLost, false);
        this._canvas.addEventListener('webglcontextrestored', this._contextRestored, false);
        this._canvas.setAttribute('tabindex', '0');
        this._canvas.setAttribute('aria-label', 'Map');
        var dimensions = this._containerDimensions();
        this._resizeCanvas(dimensions[0], dimensions[1]);
        var controlContainer = this._controlContainer = DOM.create('div', 'mapboxgl-control-container', container);
        var positions = this._controlPositions = {};
        [
            'top-left',
            'top-right',
            'bottom-left',
            'bottom-right'
        ].forEach(function (positionName) {
            positions[positionName] = DOM.create('div', 'mapboxgl-ctrl-' + positionName, controlContainer);
        });
    };
    Map.prototype._resizeCanvas = function _resizeCanvas(width, height) {
        var pixelRatio = __chunk_1.window.devicePixelRatio || 1;
        this._canvas.width = pixelRatio * width;
        this._canvas.height = pixelRatio * height;
        this._canvas.style.width = width + 'px';
        this._canvas.style.height = height + 'px';
    };
    Map.prototype._setupPainter = function _setupPainter() {
        var attributes = __chunk_1.extend({
            failIfMajorPerformanceCaveat: this._failIfMajorPerformanceCaveat,
            preserveDrawingBuffer: this._preserveDrawingBuffer
        }, mapboxGlSupported.webGLContextAttributes);
        var gl = this._canvas.getContext('webgl', attributes) || this._canvas.getContext('experimental-webgl', attributes);
        if (!gl) {
            this.fire(new __chunk_1.ErrorEvent(new Error('Failed to initialize WebGL')));
            return;
        }
        this.painter = new Painter(gl, this.transform);
    };
    Map.prototype._contextLost = function _contextLost(event) {
        event.preventDefault();
        if (this._frame) {
            this._frame.cancel();
            this._frame = null;
        }
        this.fire(new __chunk_1.Event('webglcontextlost', { originalEvent: event }));
    };
    Map.prototype._contextRestored = function _contextRestored(event) {
        this._setupPainter();
        this.resize();
        this._update();
        this.fire(new __chunk_1.Event('webglcontextrestored', { originalEvent: event }));
    };
    Map.prototype.loaded = function loaded() {
        return !this._styleDirty && !this._sourcesDirty && !!this.style && this.style.loaded();
    };
    Map.prototype._update = function _update(updateStyle) {
        if (!this.style) {
            return this;
        }
        this._styleDirty = this._styleDirty || updateStyle;
        this._sourcesDirty = true;
        this.triggerRepaint();
        return this;
    };
    Map.prototype._requestRenderFrame = function _requestRenderFrame(callback) {
        this._update();
        return this._renderTaskQueue.add(callback);
    };
    Map.prototype._cancelRenderFrame = function _cancelRenderFrame(id) {
        this._renderTaskQueue.remove(id);
    };
    Map.prototype._render = function _render() {
        this.painter.context.setDirty();
        this.painter.setBaseState();
        this._renderTaskQueue.run();
        var crossFading = false;
        if (this.style && this._styleDirty) {
            this._styleDirty = false;
            var zoom = this.transform.zoom;
            var now = __chunk_1.browser.now();
            this.style.zoomHistory.update(zoom, now);
            var parameters = new __chunk_1.EvaluationParameters(zoom, {
                now: now,
                fadeDuration: this._fadeDuration,
                zoomHistory: this.style.zoomHistory,
                transition: this.style.getTransition()
            });
            var factor = parameters.crossFadingFactor();
            if (factor !== 1 || factor !== this._crossFadingFactor) {
                crossFading = true;
                this._crossFadingFactor = factor;
            }
            this.style.update(parameters);
        }
        if (this.style && this._sourcesDirty) {
            this._sourcesDirty = false;
            this.style._updateSources(this.transform);
        }
        this._placementDirty = this.style && this.style._updatePlacement(this.painter.transform, this.showCollisionBoxes, this._fadeDuration, this._crossSourceCollisions);
        this.painter.render(this.style, {
            showTileBoundaries: this.showTileBoundaries,
            showOverdrawInspector: this._showOverdrawInspector,
            rotating: this.isRotating(),
            zooming: this.isZooming(),
            fadeDuration: this._fadeDuration
        });
        this.fire(new __chunk_1.Event('render'));
        if (this.loaded() && !this._loaded) {
            this._loaded = true;
            this.fire(new __chunk_1.Event('load'));
        }
        if (this.style && (this.style.hasTransitions() || crossFading)) {
            this._styleDirty = true;
        }
        if (this.style && !this._placementDirty) {
            this.style._releaseSymbolFadeTiles();
        }
        if (this._sourcesDirty || this._repaint || this._styleDirty || this._placementDirty) {
            this.triggerRepaint();
        }
        return this;
    };
    Map.prototype.remove = function remove() {
        var this$1 = this;
        if (this._hash) {
            this._hash.remove();
        }
        if (this._frame) {
            this._frame.cancel();
            this._frame = null;
        }
        this._renderTaskQueue.clear();
        this.setStyle(null);
        if (typeof __chunk_1.window !== 'undefined') {
            __chunk_1.window.removeEventListener('resize', this._onWindowResize, false);
            __chunk_1.window.removeEventListener('online', this._onWindowOnline, false);
        }
        for (var i = 0, list = this$1._controls; i < list.length; i += 1) {
            var control = list[i];
            control.onRemove(this$1);
        }
        this._controls = [];
        var extension = this.painter.context.gl.getExtension('WEBGL_lose_context');
        if (extension) {
            extension.loseContext();
        }
        removeNode(this._canvasContainer);
        removeNode(this._controlContainer);
        removeNode(this._missingCSSCanary);
        this._container.classList.remove('mapboxgl-map');
        this.fire(new __chunk_1.Event('remove'));
    };
    Map.prototype.triggerRepaint = function triggerRepaint() {
        var this$1 = this;
        if (this.style && !this._frame) {
            this._frame = __chunk_1.browser.frame(function () {
                this$1._frame = null;
                this$1._render();
            });
        }
    };
    Map.prototype._onWindowOnline = function _onWindowOnline() {
        this._update();
    };
    Map.prototype._onWindowResize = function _onWindowResize() {
        if (this._trackResize) {
            this.resize()._update();
        }
    };
    prototypeAccessors.showTileBoundaries.get = function () {
        return !!this._showTileBoundaries;
    };
    prototypeAccessors.showTileBoundaries.set = function (value) {
        if (this._showTileBoundaries === value) {
            return;
        }
        this._showTileBoundaries = value;
        this._update();
    };
    prototypeAccessors.showCollisionBoxes.get = function () {
        return !!this._showCollisionBoxes;
    };
    prototypeAccessors.showCollisionBoxes.set = function (value) {
        if (this._showCollisionBoxes === value) {
            return;
        }
        this._showCollisionBoxes = value;
        if (value) {
            this.style._generateCollisionBoxes();
        } else {
            this._update();
        }
    };
    prototypeAccessors.showOverdrawInspector.get = function () {
        return !!this._showOverdrawInspector;
    };
    prototypeAccessors.showOverdrawInspector.set = function (value) {
        if (this._showOverdrawInspector === value) {
            return;
        }
        this._showOverdrawInspector = value;
        this._update();
    };
    prototypeAccessors.repaint.get = function () {
        return !!this._repaint;
    };
    prototypeAccessors.repaint.set = function (value) {
        this._repaint = value;
        this._update();
    };
    prototypeAccessors.vertices.get = function () {
        return !!this._vertices;
    };
    prototypeAccessors.vertices.set = function (value) {
        this._vertices = value;
        this._update();
    };
    Object.defineProperties(Map.prototype, prototypeAccessors);
    return Map;
}(Camera);
function removeNode(node) {
    if (node.parentNode) {
        node.parentNode.removeChild(node);
    }
}

var defaultOptions$1 = {
    showCompass: true,
    showZoom: true
};
var NavigationControl = function NavigationControl(options) {
    var this$1 = this;
    this.options = __chunk_1.extend({}, defaultOptions$1, options);
    this._container = DOM.create('div', 'mapboxgl-ctrl mapboxgl-ctrl-group');
    this._container.addEventListener('contextmenu', function (e) {
        return e.preventDefault();
    });
    if (this.options.showZoom) {
        this._zoomInButton = this._createButton('mapboxgl-ctrl-icon mapboxgl-ctrl-zoom-in', 'Zoom in', function () {
            return this$1._map.zoomIn();
        });
        this._zoomOutButton = this._createButton('mapboxgl-ctrl-icon mapboxgl-ctrl-zoom-out', 'Zoom out', function () {
            return this$1._map.zoomOut();
        });
    }
    if (this.options.showCompass) {
        __chunk_1.bindAll(['_rotateCompassArrow'], this);
        this._compass = this._createButton('mapboxgl-ctrl-icon mapboxgl-ctrl-compass', 'Reset bearing to north', function () {
            return this$1._map.resetNorth();
        });
        this._compassArrow = DOM.create('span', 'mapboxgl-ctrl-compass-arrow', this._compass);
    }
};
NavigationControl.prototype._rotateCompassArrow = function _rotateCompassArrow() {
    var rotate = 'rotate(' + this._map.transform.angle * (180 / Math.PI) + 'deg)';
    this._compassArrow.style.transform = rotate;
};
NavigationControl.prototype.onAdd = function onAdd(map) {
    this._map = map;
    if (this.options.showCompass) {
        this._map.on('rotate', this._rotateCompassArrow);
        this._rotateCompassArrow();
        this._handler = new DragRotateHandler(map, {
            button: 'left',
            element: this._compass
        });
        DOM.addEventListener(this._compass, 'mousedown', this._handler.onMouseDown);
        this._handler.enable();
    }
    return this._container;
};
NavigationControl.prototype.onRemove = function onRemove() {
    DOM.remove(this._container);
    if (this.options.showCompass) {
        this._map.off('rotate', this._rotateCompassArrow);
        DOM.removeEventListener(this._compass, 'mousedown', this._handler.onMouseDown);
        this._handler.disable();
        delete this._handler;
    }
    delete this._map;
};
NavigationControl.prototype._createButton = function _createButton(className, ariaLabel, fn) {
    var a = DOM.create('button', className, this._container);
    a.type = 'button';
    a.title = ariaLabel;
    a.setAttribute('aria-label', ariaLabel);
    a.addEventListener('click', fn);
    return a;
};

var alertMissingKey = function (appID, apiKey, valid) {
    if (valid === void 0)
        valid = true;
    if (!appID || !apiKey || !valid) {
        var errorMessage = !valid ? 'Error: App ID or API key are invalid' : 'Error: App ID and API Key should be provided for Mapmagic GL';
        document.getElementsByClassName('mapboxgl-canvas')[0].remove();
        var container = document.getElementsByClassName('mapboxgl-map')[0];
        var alertMessage1 = DOM.create('p', 'mapboxgl-error');
        alertMessage1.innerHTML = errorMessage;
        var alertMessage2 = DOM.create('p', 'mapboxgl-error');
        alertMessage2.innerHTML = '\n      Get your key at <a href="https://developers.mapmagic.co.th">https://developers.mapmagic.co.th/</a>\n      ';
        container.appendChild(alertMessage1);
        container.appendChild(alertMessage2);
    }
};
var Debugger = { alertMissingKey: alertMissingKey };

var beaverLogger = __chunk_1.createCommonjsModule(function (module, exports) {
!function (root, factory) {
    module.exports = factory();
}('undefined' != typeof self ? self : this, function () {
    return function (modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
                return installedModules[moduleId].exports;
            }
            var module = installedModules[moduleId] = {
                i: moduleId,
                l: !1,
                exports: {}
            };
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            module.l = !0;
            return module.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.d = function (exports, name, getter) {
            __webpack_require__.o(exports, name) || Object.defineProperty(exports, name, {
                configurable: !1,
                enumerable: !0,
                get: getter
            });
        };
        __webpack_require__.n = function (module) {
            var getter = module && module.__esModule ? function () {
                return module.default;
            } : function () {
                return module;
            };
            __webpack_require__.d(getter, 'a', getter);
            return getter;
        };
        __webpack_require__.o = function (object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = '';
        return __webpack_require__(__webpack_require__.s = './src/index.js');
    }({
        './node_modules/belter/src/device.js': function (module, __webpack_exports__, __webpack_require__) {
            __webpack_exports__.a = function () {
                return !!(window.navigator.mockUserAgent || window.navigator.userAgent).match(/Android|webOS|iPhone|iPad|iPod|bada|Symbian|Palm|CriOS|BlackBerry|IEMobile|WindowsMobile|Opera Mini/i);
            };
        },
        './node_modules/belter/src/dom.js': function (module, __webpack_exports__, __webpack_require__) {
            __webpack_require__('./node_modules/zalgo-promise/src/index.js');
            var util = __webpack_require__('./node_modules/belter/src/util.js');
            __webpack_require__('./node_modules/belter/src/device.js');
            __webpack_exports__.a = function () {
                return 'undefined' != typeof window;
            };
            __webpack_exports__.b = function isLocalStorageEnabled() {
                return Object(util.b)(isLocalStorageEnabled, function () {
                    try {
                        if ('undefined' == typeof window) {
                            return !1;
                        }
                        if (window.localStorage) {
                            var value = Math.random().toString();
                            window.localStorage.setItem('__test__localStorage__', value);
                            var result = window.localStorage.getItem('__test__localStorage__');
                            window.localStorage.removeItem('__test__localStorage__');
                            if (value === result) {
                                return !0;
                            }
                        }
                    } catch (err) {
                    }
                    return !1;
                });
            };
        },
        './node_modules/belter/src/experiment.js': function (module, __webpack_exports__, __webpack_require__) {
            __webpack_require__('./node_modules/belter/src/util.js'), __webpack_require__('./node_modules/belter/src/storage.js');
        },
        './node_modules/belter/src/global.js': function (module, __webpack_exports__, __webpack_require__) {
            __webpack_require__('./node_modules/belter/src/util.js');
        },
        './node_modules/belter/src/http.js': function (module, __webpack_exports__, __webpack_require__) {
            __webpack_exports__.a = function (_ref) {
                var url = _ref.url, _ref$method = _ref.method, method = void 0 === _ref$method ? 'get' : _ref$method, _ref$headers = _ref.headers, headers = void 0 === _ref$headers ? {} : _ref$headers, json = _ref.json, data = _ref.data, body = _ref.body, _ref$win = _ref.win, win = void 0 === _ref$win ? window : _ref$win, _ref$timeout = _ref.timeout, timeout = void 0 === _ref$timeout ? 0 : _ref$timeout;
                return new __WEBPACK_IMPORTED_MODULE_0_zalgo_promise_src__.a(function (resolve, reject) {
                    if (json && data || json && body || data && json) {
                        throw new Error('Only options.json or options.data or options.body should be passed');
                    }
                    for (var normalizedHeaders = {}, _i4 = 0, _Object$keys2 = Object.keys(headers), _length4 = null == _Object$keys2 ? 0 : _Object$keys2.length; _i4 < _length4; _i4++) {
                        var _key2 = _Object$keys2[_i4];
                        normalizedHeaders[_key2.toLowerCase()] = headers[_key2];
                    }
                    json ? normalizedHeaders[HEADERS.CONTENT_TYPE] = normalizedHeaders[HEADERS.CONTENT_TYPE] || 'application/json' : (data || body) && (normalizedHeaders[HEADERS.CONTENT_TYPE] = normalizedHeaders[HEADERS.CONTENT_TYPE] || 'application/x-www-form-urlencoded; charset=utf-8');
                    normalizedHeaders[HEADERS.ACCEPT] = normalizedHeaders[HEADERS.ACCEPT] || 'application/json';
                    for (var _i6 = 0, _length6 = null == headerBuilders ? 0 : headerBuilders.length; _i6 < _length6; _i6++) {
                        for (var builtHeaders = (0, headerBuilders[_i6])(), _i8 = 0, _Object$keys4 = Object.keys(builtHeaders), _length8 = null == _Object$keys4 ? 0 : _Object$keys4.length; _i8 < _length8; _i8++) {
                            var _key3 = _Object$keys4[_i8];
                            normalizedHeaders[_key3.toLowerCase()] = builtHeaders[_key3];
                        }
                    }
                    var xhr = new win.XMLHttpRequest();
                    xhr.addEventListener('load', function () {
                        var responseHeaders = function () {
                            for (var result = {}, _i2 = 0, _rawHeaders$trim$spli2 = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : '').trim().split('\n'), _length2 = null == _rawHeaders$trim$spli2 ? 0 : _rawHeaders$trim$spli2.length; _i2 < _length2; _i2++) {
                                var _line$split = _rawHeaders$trim$spli2[_i2].split(':'), _key = _line$split[0], values = _line$split.slice(1);
                                result[_key.toLowerCase()] = values.join(':').trim();
                            }
                            return result;
                        }(this.getAllResponseHeaders());
                        if (!this.status) {
                            return reject(new Error('Request to ' + method.toLowerCase() + ' ' + url + ' failed: no response status code.'));
                        }
                        var contentType = responseHeaders['content-type'], isJSON = contentType && (0 === contentType.indexOf('application/json') || 0 === contentType.indexOf('text/json')), responseBody = this.responseText;
                        try {
                            responseBody = JSON.parse(responseBody);
                        } catch (err) {
                            if (isJSON) {
                                return reject(new Error('Invalid json: ' + this.responseText + '.'));
                            }
                        }
                        var res = {
                            status: this.status,
                            headers: responseHeaders,
                            body: responseBody
                        };
                        return resolve(res);
                    }, !1);
                    xhr.addEventListener('error', function (evt) {
                        reject(new Error('Request to ' + method.toLowerCase() + ' ' + url + ' failed: ' + evt.toString() + '.'));
                    }, !1);
                    xhr.open(method, url, !0);
                    for (var _key4 in normalizedHeaders) {
                        normalizedHeaders.hasOwnProperty(_key4) && xhr.setRequestHeader(_key4, normalizedHeaders[_key4]);
                    }
                    json ? body = JSON.stringify(json) : data && (body = Object.keys(data).map(function (key) {
                        return encodeURIComponent(key) + '=' + (data ? encodeURIComponent(data[key]) : '');
                    }).join('&'));
                    xhr.timeout = timeout;
                    xhr.ontimeout = function () {
                        reject(new Error('Request to ' + method.toLowerCase() + ' ' + url + ' has timed out'));
                    };
                    xhr.send(body);
                });
            };
            var __WEBPACK_IMPORTED_MODULE_0_zalgo_promise_src__ = __webpack_require__('./node_modules/zalgo-promise/src/index.js'), HEADERS = (__webpack_require__('./node_modules/cross-domain-utils/src/index.js'), {
                    CONTENT_TYPE: 'content-type',
                    ACCEPT: 'accept'
                }), headerBuilders = [];
        },
        './node_modules/belter/src/index.js': function (module, __webpack_exports__, __webpack_require__) {
            __webpack_require__('./node_modules/belter/src/device.js');
            var __WEBPACK_IMPORTED_MODULE_1__dom__ = __webpack_require__('./node_modules/belter/src/dom.js');
            __webpack_require__.d(__webpack_exports__, 'isBrowser', function () {
                return __WEBPACK_IMPORTED_MODULE_1__dom__.a;
            });
            __webpack_require__('./node_modules/belter/src/experiment.js'), __webpack_require__('./node_modules/belter/src/global.js'), __webpack_require__('./node_modules/belter/src/jsx.jsx'), __webpack_require__('./node_modules/belter/src/storage.js');
            var __WEBPACK_IMPORTED_MODULE_6__util__ = __webpack_require__('./node_modules/belter/src/util.js');
            __webpack_require__.d(__webpack_exports__, 'noop', function () {
                return __WEBPACK_IMPORTED_MODULE_6__util__.c;
            });
            __webpack_require__.d(__webpack_exports__, 'objFilter', function () {
                return __WEBPACK_IMPORTED_MODULE_6__util__.d;
            });
            __webpack_require__.d(__webpack_exports__, 'promiseDebounce', function () {
                return __WEBPACK_IMPORTED_MODULE_6__util__.e;
            });
            __webpack_require__.d(__webpack_exports__, 'safeInterval', function () {
                return __WEBPACK_IMPORTED_MODULE_6__util__.h;
            });
            var __WEBPACK_IMPORTED_MODULE_7__http__ = __webpack_require__('./node_modules/belter/src/http.js');
            __webpack_require__.d(__webpack_exports__, 'request', function () {
                return __WEBPACK_IMPORTED_MODULE_7__http__.a;
            });
            var __WEBPACK_IMPORTED_MODULE_8__types__ = __webpack_require__('./node_modules/belter/src/types.js');
            __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__types__);
        },
        './node_modules/belter/src/jsx.jsx': function (module, __webpack_exports__, __webpack_require__) {
            __webpack_require__('./node_modules/belter/src/util.js'), Object.assign;
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError('Cannot call a class as a function');
                }
            }
            function htmlEncode() {
                return (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : '').toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/\//g, '&#x2F;');
            }
            !function (_JsxHTMLNode) {
                !function (subClass, superClass) {
                    if ('function' != typeof superClass && null !== superClass) {
                        throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    });
                    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
                }(JsxHTMLNodeContainer, _JsxHTMLNode);
                function JsxHTMLNodeContainer(children) {
                    _classCallCheck(this, JsxHTMLNodeContainer);
                    return function (self, call) {
                        if (!self) {
                            throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
                        }
                        return !call || 'object' != typeof call && 'function' != typeof call ? self : call;
                    }(this, _JsxHTMLNode.call(this, '', {}, children));
                }
                JsxHTMLNodeContainer.prototype.toString = function () {
                    return this.childrenToString();
                };
            }(function () {
                function JsxHTMLNode(name, props, children) {
                    _classCallCheck(this, JsxHTMLNode);
                    this.name = name;
                    this.props = props;
                    this.children = children;
                }
                JsxHTMLNode.prototype.toString = function () {
                    var name = this.name, props = this.propsToString(), children = this.childrenToString();
                    return '<' + name + (props ? ' ' : '') + props + '>' + children + '</' + name + '>';
                };
                JsxHTMLNode.prototype.propsToString = function () {
                    var props = this.props;
                    return props ? Object.keys(props).filter(function (key) {
                        return 'innerHTML' !== key && props && !1 !== props[key];
                    }).map(function (key) {
                        if (props) {
                            var val = props[key];
                            if (!0 === val) {
                                return '' + htmlEncode(key);
                            }
                            if ('string' == typeof val) {
                                return htmlEncode(key) + '="' + htmlEncode(val) + '"';
                            }
                        }
                        return '';
                    }).filter(Boolean).join(' ') : '';
                };
                JsxHTMLNode.prototype.childrenToString = function () {
                    if (this.props && this.props.innerHTML) {
                        return this.props.innerHTML;
                    }
                    if (!this.children) {
                        return '';
                    }
                    var result = '';
                    !function iterate(children) {
                        for (var _i2 = 0, _length2 = null == children ? 0 : children.length; _i2 < _length2; _i2++) {
                            var child = children[_i2];
                            null !== child && void 0 !== child && (Array.isArray(child) ? iterate(child) : result += child instanceof JsxHTMLNode ? child.toString() : htmlEncode(child));
                        }
                    }(this.children);
                    return result;
                };
                return JsxHTMLNode;
            }());
        },
        './node_modules/belter/src/storage.js': function (module, __webpack_exports__, __webpack_require__) {
            __webpack_exports__.a = function getStorage(_ref) {
                var name = _ref.name, _ref$version = _ref.version, version = void 0 === _ref$version ? 'latest' : _ref$version, _ref$lifetime = _ref.lifetime, lifetime = void 0 === _ref$lifetime ? 300000 : _ref$lifetime;
                return Object(__WEBPACK_IMPORTED_MODULE_0__util__.b)(getStorage, function () {
                    var STORAGE_KEY = '__' + name + '_' + version + '_storage__', accessedStorage = void 0;
                    function getState(handler) {
                        var localStorageEnabled = Object(__WEBPACK_IMPORTED_MODULE_1__dom__.b)(), storage = void 0;
                        accessedStorage && (storage = accessedStorage);
                        if (!storage && localStorageEnabled) {
                            var rawStorage = window.localStorage.getItem(STORAGE_KEY);
                            rawStorage && (storage = JSON.parse(rawStorage));
                        }
                        storage || (storage = Object(__WEBPACK_IMPORTED_MODULE_0__util__.a)()[STORAGE_KEY]);
                        storage || (storage = { id: Object(__WEBPACK_IMPORTED_MODULE_0__util__.j)() });
                        storage.id || (storage.id = Object(__WEBPACK_IMPORTED_MODULE_0__util__.j)());
                        accessedStorage = storage;
                        var result = handler(storage);
                        localStorageEnabled ? window.localStorage.setItem(STORAGE_KEY, JSON.stringify(storage)) : Object(__WEBPACK_IMPORTED_MODULE_0__util__.a)()[STORAGE_KEY] = storage;
                        accessedStorage = null;
                        return result;
                    }
                    function getSession(handler) {
                        return getState(function (storage) {
                            var session = storage.__session__, now = Date.now();
                            session && now - session.created > lifetime && (session = null);
                            session || (session = {
                                guid: Object(__WEBPACK_IMPORTED_MODULE_0__util__.j)(),
                                created: now
                            });
                            storage.__session__ = session;
                            return handler(session);
                        });
                    }
                    return {
                        getState: getState,
                        getID: function () {
                            return getState(function (storage) {
                                return storage.id;
                            });
                        },
                        getSessionState: function (handler) {
                            return getSession(function (session) {
                                session.state = session.state || {};
                                return handler(session.state);
                            });
                        },
                        getSessionID: function () {
                            return getSession(function (session) {
                                return session.guid;
                            });
                        }
                    };
                }, [{
                        name: name,
                        version: version,
                        lifetime: lifetime
                    }]);
            };
            var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__('./node_modules/belter/src/util.js'), __WEBPACK_IMPORTED_MODULE_1__dom__ = __webpack_require__('./node_modules/belter/src/dom.js');
        },
        './node_modules/belter/src/types.js': function (module, exports) {
        },
        './node_modules/belter/src/util.js': function (module, __webpack_exports__, __webpack_require__) {
            __webpack_exports__.a = function () {
                if ('undefined' != typeof window) {
                    return window;
                }
                if ('undefined' != typeof window) {
                    return window;
                }
                if ('undefined' != typeof global) {
                    return global;
                }
                throw new Error('No global found');
            };
            __webpack_exports__.b = function (method, logic) {
                var args = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];
                method.__memoized__ || (method.__memoized__ = function (method) {
                    var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, cache = {};
                    function memoizedFunction() {
                        var arguments$1 = arguments;
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments$1[_key];
                        }
                        var key = void 0;
                        try {
                            key = JSON.stringify(Array.prototype.slice.call(arguments));
                        } catch (err) {
                            throw new Error('Arguments not serializable -- can not be used to memoize');
                        }
                        var cacheTime = options.time;
                        cache[key] && cacheTime && Date.now() - cache[key].time < cacheTime && delete cache[key];
                        if (cache[key]) {
                            return cache[key].value;
                        }
                        memoizedFunction.__calling__ = !0;
                        var time = Date.now(), value = method.apply(this, arguments);
                        memoizedFunction.__calling__ = !1;
                        cache[key] = {
                            time: time,
                            value: value
                        };
                        return cache[key].value;
                    }
                    memoizedFunction.reset = function () {
                        cache = {};
                    };
                    return memoizedFunction;
                }(logic));
                if (method.__memoized__ && method.__memoized__.__calling__) {
                    throw new Error('Can not call memoized method recursively');
                }
                return method.__memoized__.apply(method, args);
            };
            __webpack_exports__.c = function () {
            };
            __webpack_exports__.j = function () {
                var chars = '0123456789abcdef';
                return 'xxxxxxxxxx'.replace(/./g, function () {
                    return chars.charAt(Math.floor(Math.random() * chars.length));
                }) + '_' + base64encode(new Date().toISOString().slice(11, 19).replace('T', '.')).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
            };
            __webpack_exports__.f = function (str, regex, handler) {
                var results = [];
                str.replace(regex, function (item) {
                    results.push(handler ? handler.apply(null, arguments) : item);
                });
                return results;
            };
            __webpack_exports__.i = function (svg) {
                return 'data:image/svg+xml;base64,' + base64encode(svg);
            };
            __webpack_exports__.d = function (obj) {
                var filter = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Boolean, result = {};
                for (var _key4 in obj) {
                    obj.hasOwnProperty(_key4) && filter(obj[_key4], _key4) && (result[_key4] = obj[_key4]);
                }
                return result;
            };
            __webpack_exports__.g = function (text, regex) {
                var result = [];
                text.replace(regex, function (token) {
                    result.push(token);
                    return '';
                });
                return result;
            };
            __webpack_exports__.e = function (method) {
                var delay = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 50, promise = void 0, timeout = void 0;
                return function () {
                    timeout && clearTimeout(timeout);
                    var localPromise = promise = promise || new __WEBPACK_IMPORTED_MODULE_0_zalgo_promise_src__.a();
                    timeout = setTimeout(function () {
                        promise = null;
                        timeout = null;
                        __WEBPACK_IMPORTED_MODULE_0_zalgo_promise_src__.a.try(method).then(function (result) {
                            localPromise.resolve(result);
                        }, function (err) {
                            localPromise.reject(err);
                        });
                    }, delay);
                    return localPromise;
                };
            };
            __webpack_exports__.h = function (method, time) {
                var timeout = void 0;
                !function loop() {
                    timeout = setTimeout(function () {
                        method();
                        loop();
                    }, time);
                }();
                return {
                    cancel: function () {
                        clearTimeout(timeout);
                    }
                };
            };
            var __WEBPACK_IMPORTED_MODULE_0_zalgo_promise_src__ = __webpack_require__('./node_modules/zalgo-promise/src/index.js');
            function base64encode(str) {
                return window.btoa(str);
            }
        },
        './node_modules/cross-domain-utils/src/index.js': function (module, __webpack_exports__, __webpack_require__) {
            __webpack_require__('./node_modules/cross-domain-utils/src/utils.js');
            var __WEBPACK_IMPORTED_MODULE_1__types__ = __webpack_require__('./node_modules/cross-domain-utils/src/types.js');
            __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__types__);
        },
        './node_modules/cross-domain-utils/src/types.js': function (module, exports) {
        },
        './node_modules/cross-domain-utils/src/utils.js': function (module, __webpack_exports__, __webpack_require__) {
        },
        './node_modules/zalgo-promise/src/index.js': function (module, __webpack_exports__, __webpack_require__) {
            function utils_isPromise(item) {
                try {
                    if (!item) {
                        return !1;
                    }
                    if ('undefined' != typeof Promise && item instanceof Promise) {
                        return !0;
                    }
                    if ('undefined' != typeof window && window.Window && item instanceof window.Window) {
                        return !1;
                    }
                    if ('undefined' != typeof window && window.constructor && item instanceof window.constructor) {
                        return !1;
                    }
                    if ('function' == typeof item.then) {
                        return !0;
                    }
                } catch (err) {
                    return !1;
                }
                return !1;
            }
            function getGlobal() {
                var glob = void 0;
                if ('undefined' != typeof window) {
                    glob = window;
                } else {
                    if ('undefined' == typeof window) {
                        throw new TypeError('Can not find global');
                    }
                    glob = window;
                }
                var zalgoGlobal = glob.__zalgopromise__ = glob.__zalgopromise__ || {};
                zalgoGlobal.flushPromises = zalgoGlobal.flushPromises || [];
                zalgoGlobal.activeCount = zalgoGlobal.activeCount || 0;
                zalgoGlobal.possiblyUnhandledPromiseHandlers = zalgoGlobal.possiblyUnhandledPromiseHandlers || [];
                zalgoGlobal.dispatchedErrors = zalgoGlobal.dispatchedErrors || [];
                return zalgoGlobal;
            }
            var promise_ZalgoPromise = function () {
                function ZalgoPromise(handler) {
                    var _this = this;
                    !function (instance, Constructor) {
                        if (!(instance instanceof ZalgoPromise)) {
                            throw new TypeError('Cannot call a class as a function');
                        }
                    }(this);
                    this.resolved = !1;
                    this.rejected = !1;
                    this.errorHandled = !1;
                    this.handlers = [];
                    if (handler) {
                        var _result = void 0, _error = void 0, resolved = !1, rejected = !1, isAsync = !1;
                        try {
                            handler(function (res) {
                                if (isAsync) {
                                    _this.resolve(res);
                                } else {
                                    resolved = !0;
                                    _result = res;
                                }
                            }, function (err) {
                                if (isAsync) {
                                    _this.reject(err);
                                } else {
                                    rejected = !0;
                                    _error = err;
                                }
                            });
                        } catch (err) {
                            this.reject(err);
                            return;
                        }
                        isAsync = !0;
                        resolved ? this.resolve(_result) : rejected && this.reject(_error);
                    }
                }
                ZalgoPromise.prototype.resolve = function (result) {
                    if (this.resolved || this.rejected) {
                        return this;
                    }
                    if (utils_isPromise(result)) {
                        throw new Error('Can not resolve promise with another promise');
                    }
                    this.resolved = !0;
                    this.value = result;
                    this.dispatch();
                    return this;
                };
                ZalgoPromise.prototype.reject = function (error) {
                    var _this2 = this;
                    if (this.resolved || this.rejected) {
                        return this;
                    }
                    if (utils_isPromise(error)) {
                        throw new Error('Can not reject promise with another promise');
                    }
                    if (!error) {
                        var _err = error && 'function' == typeof error.toString ? error.toString() : Object.prototype.toString.call(error);
                        error = new Error('Expected reject to be called with Error, got ' + _err);
                    }
                    this.rejected = !0;
                    this.error = error;
                    this.errorHandled || setTimeout(function () {
                        _this2.errorHandled || function (err, promise) {
                            if (-1 === getGlobal().dispatchedErrors.indexOf(err)) {
                                getGlobal().dispatchedErrors.push(err);
                                setTimeout(function () {
                                    throw err;
                                }, 1);
                                for (var j = 0; j < getGlobal().possiblyUnhandledPromiseHandlers.length; j++) {
                                    getGlobal().possiblyUnhandledPromiseHandlers[j](err, promise);
                                }
                            }
                        }(error, _this2);
                    }, 1);
                    this.dispatch();
                    return this;
                };
                ZalgoPromise.prototype.asyncReject = function (error) {
                    this.errorHandled = !0;
                    this.reject(error);
                };
                ZalgoPromise.prototype.dispatch = function () {
                    var _this3 = this, dispatching = this.dispatching, resolved = this.resolved, rejected = this.rejected, handlers = this.handlers;
                    if (!dispatching && (resolved || rejected)) {
                        this.dispatching = !0;
                        getGlobal().activeCount += 1;
                        for (var _loop = function (i) {
                                    var _handlers$i = handlers[i], onSuccess = _handlers$i.onSuccess, onError = _handlers$i.onError, promise = _handlers$i.promise, result = void 0;
                                    if (resolved) {
                                        try {
                                            result = onSuccess ? onSuccess(_this3.value) : _this3.value;
                                        } catch (err) {
                                            promise.reject(err);
                                            return 'continue';
                                        }
                                    } else if (rejected) {
                                        if (!onError) {
                                            promise.reject(_this3.error);
                                            return 'continue';
                                        }
                                        try {
                                            result = onError(_this3.error);
                                        } catch (err) {
                                            promise.reject(err);
                                            return 'continue';
                                        }
                                    }
                                    if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {
                                        result.resolved ? promise.resolve(result.value) : promise.reject(result.error);
                                        result.errorHandled = !0;
                                    } else {
                                        utils_isPromise(result) ? result instanceof ZalgoPromise && (result.resolved || result.rejected) ? result.resolved ? promise.resolve(result.value) : promise.reject(result.error) : result.then(function (res) {
                                            promise.resolve(res);
                                        }, function (err) {
                                            promise.reject(err);
                                        }) : promise.resolve(result);
                                    }
                                }, i = 0; i < handlers.length; i++) {
                            _loop(i);
                        }
                        handlers.length = 0;
                        this.dispatching = !1;
                        getGlobal().activeCount -= 1;
                        0 === getGlobal().activeCount && ZalgoPromise.flushQueue();
                    }
                };
                ZalgoPromise.prototype.then = function (onSuccess, onError) {
                    if (onSuccess && 'function' != typeof onSuccess && !onSuccess.call) {
                        throw new Error('Promise.then expected a function for success handler');
                    }
                    if (onError && 'function' != typeof onError && !onError.call) {
                        throw new Error('Promise.then expected a function for error handler');
                    }
                    var promise = new ZalgoPromise();
                    this.handlers.push({
                        promise: promise,
                        onSuccess: onSuccess,
                        onError: onError
                    });
                    this.errorHandled = !0;
                    this.dispatch();
                    return promise;
                };
                ZalgoPromise.prototype.catch = function (onError) {
                    return this.then(void 0, onError);
                };
                ZalgoPromise.prototype.finally = function (onFinally) {
                    if (onFinally && 'function' != typeof onFinally && !onFinally.call) {
                        throw new Error('Promise.finally expected a function');
                    }
                    return this.then(function (result) {
                        return ZalgoPromise.try(onFinally).then(function () {
                            return result;
                        });
                    }, function (err) {
                        return ZalgoPromise.try(onFinally).then(function () {
                            throw err;
                        });
                    });
                };
                ZalgoPromise.prototype.timeout = function (time, err) {
                    var _this4 = this;
                    if (this.resolved || this.rejected) {
                        return this;
                    }
                    var timeout = setTimeout(function () {
                        _this4.resolved || _this4.rejected || _this4.reject(err || new Error('Promise timed out after ' + time + 'ms'));
                    }, time);
                    return this.then(function (result) {
                        clearTimeout(timeout);
                        return result;
                    });
                };
                ZalgoPromise.prototype.toPromise = function () {
                    if ('undefined' == typeof Promise) {
                        throw new TypeError('Could not find Promise');
                    }
                    return Promise.resolve(this);
                };
                ZalgoPromise.resolve = function (value) {
                    return value instanceof ZalgoPromise ? value : utils_isPromise(value) ? new ZalgoPromise(function (resolve, reject) {
                        return value.then(resolve, reject);
                    }) : new ZalgoPromise().resolve(value);
                };
                ZalgoPromise.reject = function (error) {
                    return new ZalgoPromise().reject(error);
                };
                ZalgoPromise.all = function (promises) {
                    var promise = new ZalgoPromise(), count = promises.length, results = [];
                    if (!count) {
                        promise.resolve(results);
                        return promise;
                    }
                    for (var _loop2 = function (i) {
                                var prom = promises[i];
                                if (prom instanceof ZalgoPromise) {
                                    if (prom.resolved) {
                                        results[i] = prom.value;
                                        count -= 1;
                                        return 'continue';
                                    }
                                } else if (!utils_isPromise(prom)) {
                                    results[i] = prom;
                                    count -= 1;
                                    return 'continue';
                                }
                                ZalgoPromise.resolve(prom).then(function (result) {
                                    results[i] = result;
                                    0 == (count -= 1) && promise.resolve(results);
                                }, function (err) {
                                    promise.reject(err);
                                });
                            }, i = 0; i < promises.length; i++) {
                        _loop2(i);
                    }
                    0 === count && promise.resolve(results);
                    return promise;
                };
                ZalgoPromise.hash = function (promises) {
                    var result = {};
                    return ZalgoPromise.all(Object.keys(promises).map(function (key) {
                        return ZalgoPromise.resolve(promises[key]).then(function (value) {
                            result[key] = value;
                        });
                    })).then(function () {
                        return result;
                    });
                };
                ZalgoPromise.map = function (items, method) {
                    return ZalgoPromise.all(items.map(method));
                };
                ZalgoPromise.onPossiblyUnhandledException = function (handler) {
                    return function (handler) {
                        getGlobal().possiblyUnhandledPromiseHandlers.push(handler);
                        return {
                            cancel: function () {
                                getGlobal().possiblyUnhandledPromiseHandlers.splice(getGlobal().possiblyUnhandledPromiseHandlers.indexOf(handler), 1);
                            }
                        };
                    }(handler);
                };
                ZalgoPromise.try = function (method, context, args) {
                    if (method && 'function' != typeof method && !method.call) {
                        throw new Error('Promise.try expected a function');
                    }
                    var result = void 0;
                    try {
                        result = method.apply(context, args || []);
                    } catch (err) {
                        return ZalgoPromise.reject(err);
                    }
                    return ZalgoPromise.resolve(result);
                };
                ZalgoPromise.delay = function (_delay) {
                    return new ZalgoPromise(function (resolve) {
                        setTimeout(resolve, _delay);
                    });
                };
                ZalgoPromise.isPromise = function (value) {
                    return !!(value && value instanceof ZalgoPromise) || utils_isPromise(value);
                };
                ZalgoPromise.flush = function () {
                    var promise = new ZalgoPromise();
                    getGlobal().flushPromises.push(promise);
                    0 === getGlobal().activeCount && ZalgoPromise.flushQueue();
                    return promise;
                };
                ZalgoPromise.flushQueue = function () {
                    var promisesToFlush = getGlobal().flushPromises;
                    getGlobal().flushPromises = [];
                    for (var _i2 = 0, _length2 = null == promisesToFlush ? 0 : promisesToFlush.length; _i2 < _length2; _i2++) {
                        promisesToFlush[_i2].resolve();
                    }
                };
                return ZalgoPromise;
            }();
            __webpack_require__.d(__webpack_exports__, 'a', function () {
                return promise_ZalgoPromise;
            });
        },
        './src/index.js': function (module, __webpack_exports__, __webpack_require__) {
            Object.defineProperty(__webpack_exports__, '__esModule', { value: !0 });
            var src = __webpack_require__('./node_modules/zalgo-promise/src/index.js'), belter_src = __webpack_require__('./node_modules/belter/src/index.js'), LOG_LEVEL = {
                    DEBUG: 'debug',
                    INFO: 'info',
                    WARN: 'warn',
                    ERROR: 'error'
                }, AUTO_FLUSH_LEVEL = [
                    LOG_LEVEL.WARN,
                    LOG_LEVEL.ERROR
                ], LOG_LEVEL_PRIORITY = [
                    LOG_LEVEL.ERROR,
                    LOG_LEVEL.WARN,
                    LOG_LEVEL.INFO,
                    LOG_LEVEL.DEBUG
                ], FLUSH_INTERVAL = 60000, DEFAULT_LOG_LEVEL = LOG_LEVEL.WARN, _extends = Object.assign || function (target) {
                    var arguments$1 = arguments;
                    for (var i = 1; i < arguments.length; i++) {
                        var source = arguments$1[i];
                        for (var key in source) {
                            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                        }
                    }
                    return target;
                };
            function httpTransport(_ref) {
                var url = _ref.url, method = _ref.method, headers = _ref.headers, json = _ref.json;
                return Object(belter_src.request)({
                    url: url,
                    method: method,
                    headers: headers,
                    json: json
                }).then(belter_src.noop);
            }
            function extendIfDefined(target, source) {
                for (var key in source) {
                    source.hasOwnProperty(key) && source[key] && (target[key] = source[key]);
                }
            }
            function Logger(_ref2) {
                var url = _ref2.url, prefix = _ref2.prefix, _ref2$logLevel = _ref2.logLevel, logLevel = void 0 === _ref2$logLevel ? DEFAULT_LOG_LEVEL : _ref2$logLevel, _ref2$transport = _ref2.transport, transport = void 0 === _ref2$transport ? httpTransport : _ref2$transport, _ref2$flushInterval = _ref2.flushInterval, flushInterval = void 0 === _ref2$flushInterval ? FLUSH_INTERVAL : _ref2$flushInterval, events = [], tracking = [], payloadBuilders = [], metaBuilders = [], trackingBuilders = [], headerBuilders = [];
                function print(level, event, payload) {
                    if (Object(belter_src.isBrowser)() && window.console && window.console.log) {
                        var consoleLogLevel = logLevel;
                        window.LOG_LEVEL && -1 !== LOG_LEVEL_PRIORITY.indexOf(window.LOG_LEVEL) && (consoleLogLevel = window.LOG_LEVEL);
                        if (!(LOG_LEVEL_PRIORITY.indexOf(level) > LOG_LEVEL_PRIORITY.indexOf(consoleLogLevel))) {
                            var args = [event];
                            args.push(payload);
                            (payload.error || payload.warning) && args.push('\n\n', payload.error || payload.warning);
                            try {
                                window.console[level] && window.console[level].apply ? window.console[level].apply(window.console, args) : window.console.log && window.console.log.apply && window.console.log.apply(window.console, args);
                            } catch (err) {
                            }
                        }
                    }
                }
                function immediateFlush() {
                    return src.a.try(function () {
                        if (Object(belter_src.isBrowser)() && (events.length || tracking.length)) {
                            for (var meta = {}, _i2 = 0, _length2 = null == metaBuilders ? 0 : metaBuilders.length; _i2 < _length2; _i2++) {
                                extendIfDefined(meta, (0, metaBuilders[_i2])(meta));
                            }
                            for (var headers = {}, _i4 = 0, _length4 = null == headerBuilders ? 0 : headerBuilders.length; _i4 < _length4; _i4++) {
                                extendIfDefined(headers, (0, headerBuilders[_i4])(headers));
                            }
                            var req = transport({
                                method: 'POST',
                                url: url,
                                headers: headers,
                                json: {
                                    events: events,
                                    meta: meta,
                                    tracking: tracking
                                }
                            });
                            events = [];
                            tracking = [];
                            return req.then(belter_src.noop);
                        }
                    });
                }
                var flush = Object(belter_src.promiseDebounce)(immediateFlush);
                function log(level, event) {
                    var payload = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    if (Object(belter_src.isBrowser)()) {
                        prefix && (event = prefix + '_' + event);
                        for (var logPayload = _extends({}, Object(belter_src.objFilter)(payload), { timestamp: Date.now().toString() }), _i6 = 0, _length6 = null == payloadBuilders ? 0 : payloadBuilders.length; _i6 < _length6; _i6++) {
                            extendIfDefined(logPayload, (0, payloadBuilders[_i6])(logPayload));
                        }
                        !function (level, event, payload) {
                            events.push({
                                level: level,
                                event: event,
                                payload: payload
                            });
                            -1 !== AUTO_FLUSH_LEVEL.indexOf(level) && flush();
                        }(level, event, logPayload);
                        print(level, event, logPayload);
                    }
                }
                Object(belter_src.isBrowser)() && Object(belter_src.safeInterval)(flush, flushInterval);
                return {
                    debug: function (event, payload) {
                        log(LOG_LEVEL.DEBUG, event, payload);
                    },
                    info: function (event, payload) {
                        log(LOG_LEVEL.INFO, event, payload);
                    },
                    warn: function (event, payload) {
                        log(LOG_LEVEL.WARN, event, payload);
                    },
                    error: function (event, payload) {
                        log(LOG_LEVEL.ERROR, event, payload);
                    },
                    track: function () {
                        var payload = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                        if (Object(belter_src.isBrowser)()) {
                            for (var trackingPayload = Object(belter_src.objFilter)(payload), _i8 = 0, _length8 = null == trackingBuilders ? 0 : trackingBuilders.length; _i8 < _length8; _i8++) {
                                extendIfDefined(trackingPayload, (0, trackingBuilders[_i8])(trackingPayload));
                            }
                            print(LOG_LEVEL.DEBUG, 'track', trackingPayload);
                            tracking.push(trackingPayload);
                        }
                    },
                    flush: flush,
                    immediateFlush: immediateFlush,
                    addPayloadBuilder: function (builder) {
                        payloadBuilders.push(builder);
                    },
                    addMetaBuilder: function (builder) {
                        metaBuilders.push(builder);
                    },
                    addTrackingBuilder: function (builder) {
                        trackingBuilders.push(builder);
                    },
                    addHeaderBuilder: function (builder) {
                        headerBuilders.push(builder);
                    },
                    setTransport: function (newTransport) {
                        transport = newTransport;
                    }
                };
            }
            __webpack_require__.d(__webpack_exports__, 'Logger', function () {
                return Logger;
            });
            __webpack_require__.d(__webpack_exports__, 'LOG_LEVEL', function () {
                return LOG_LEVEL;
            });
        }
    });
});
});

var logger = __chunk_1.unwrapExports(beaverLogger);
var beaverLogger_1 = beaverLogger.beaver;

var UNDEFINED_COORDINATES = 'coordinates is undefined';
var UNDEFINED_LATLNG = 'blank latitude and longitude';
var UNDEFINED_ARRAY_LATLNG = 'blank latitude and longitude at item';
var UNDEFINED_PLACE_INFO = 'missing place info';
var UNDEFINED_LAYER = 'cannot find layer';
var UNDEFINED_COLOR = 'missing color';
var INVALID_TYPE = 'invalid argument type';
var LOG_CONSTANT = {
    UNDEFINED_COORDINATES: UNDEFINED_COORDINATES,
    UNDEFINED_LATLNG: UNDEFINED_LATLNG,
    UNDEFINED_ARRAY_LATLNG: UNDEFINED_ARRAY_LATLNG,
    UNDEFINED_PLACE_INFO: UNDEFINED_PLACE_INFO,
    UNDEFINED_LAYER: UNDEFINED_LAYER,
    UNDEFINED_COLOR: UNDEFINED_COLOR,
    INVALID_TYPE: INVALID_TYPE
};

var API_URL = 'https://api.mapmagic.co.th/v2/get-map-style';
var LOGGER_URL = 'https://api.mapmagic.co.th/log/v1/mapmagic-gl/emit-log';
var LOGGER_CONFIG_URL = 'https://api.mapmagic.co.th/log/v1/mapmagic-gl/log-config';
var LOGGER_TIMER = 5000;
var LOGO_CLASSNAME = 'mapmagic-ctrl-logo';

var props = {};
var defaultLogger = function (logCallback) {
    return function (functionName, message, args, emitLog) {
        if (message === void 0)
            message = '';
        if (args === void 0)
            args = {};
        if (emitLog === void 0)
            emitLog = true;
        var url = window.location.href;
        var userAgent = navigator.userAgent;
        var payload = {
            'user-agent': userAgent,
            app_id: props.APP_ID,
            function_name: functionName,
            url: url,
            message: message
        };
        if (props.DEBUG) {
            payload.args = args;
        }
        if (props.LOGGING && emitLog) {
            logCallback('mapmagic', payload);
        }
    };
};
var Logger = {
    init: function (APP_ID, LOGGING, DEBUG) {
        props.APP_ID = APP_ID;
        props.LOGGING = LOGGING;
        props.DEBUG = DEBUG;
        logger.init({
            uri: LOGGER_URL,
            flushInterval: LOGGER_TIMER,
            heartbeat: false,
            silent: true
        });
        props.logger = logger;
    },
    debug: defaultLogger(logger.debug),
    info: defaultLogger(logger.info),
    warn: defaultLogger(logger.warn),
    error: defaultLogger(logger.error),
    getDebug: function () {
        return props.DEBUG;
    },
    getLogging: function () {
        return props.LOGGING;
    }
};
Object.freeze(Logger);

var tinycolor = __chunk_1.createCommonjsModule(function (module) {
(function (Math) {
    var trimLeft = /^\s+/, trimRight = /\s+$/, tinyCounter = 0, mathRound = Math.round, mathMin = Math.min, mathMax = Math.max, mathRandom = Math.random;
    function tinycolor(color, opts) {
        color = color ? color : '';
        opts = opts || {};
        if (color instanceof tinycolor) {
            return color;
        }
        if (!(this instanceof tinycolor)) {
            return new tinycolor(color, opts);
        }
        var rgb = inputToRGB(color);
        this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
        this._gradientType = opts.gradientType;
        if (this._r < 1) {
            this._r = mathRound(this._r);
        }
        if (this._g < 1) {
            this._g = mathRound(this._g);
        }
        if (this._b < 1) {
            this._b = mathRound(this._b);
        }
        this._ok = rgb.ok;
        this._tc_id = tinyCounter++;
    }
    tinycolor.prototype = {
        isDark: function () {
            return this.getBrightness() < 128;
        },
        isLight: function () {
            return !this.isDark();
        },
        isValid: function () {
            return this._ok;
        },
        getOriginalInput: function () {
            return this._originalInput;
        },
        getFormat: function () {
            return this._format;
        },
        getAlpha: function () {
            return this._a;
        },
        getBrightness: function () {
            var rgb = this.toRgb();
            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
        },
        getLuminance: function () {
            var rgb = this.toRgb();
            var RsRGB, GsRGB, BsRGB, R, G, B;
            RsRGB = rgb.r / 255;
            GsRGB = rgb.g / 255;
            BsRGB = rgb.b / 255;
            if (RsRGB <= 0.03928) {
                R = RsRGB / 12.92;
            } else {
                R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
            }
            if (GsRGB <= 0.03928) {
                G = GsRGB / 12.92;
            } else {
                G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
            }
            if (BsRGB <= 0.03928) {
                B = BsRGB / 12.92;
            } else {
                B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
            }
            return 0.2126 * R + 0.7152 * G + 0.0722 * B;
        },
        setAlpha: function (value) {
            this._a = boundAlpha(value);
            this._roundA = mathRound(100 * this._a) / 100;
            return this;
        },
        toHsv: function () {
            var hsv = rgbToHsv(this._r, this._g, this._b);
            return {
                h: hsv.h * 360,
                s: hsv.s,
                v: hsv.v,
                a: this._a
            };
        },
        toHsvString: function () {
            var hsv = rgbToHsv(this._r, this._g, this._b);
            var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
            return this._a == 1 ? 'hsv(' + h + ', ' + s + '%, ' + v + '%)' : 'hsva(' + h + ', ' + s + '%, ' + v + '%, ' + this._roundA + ')';
        },
        toHsl: function () {
            var hsl = rgbToHsl(this._r, this._g, this._b);
            return {
                h: hsl.h * 360,
                s: hsl.s,
                l: hsl.l,
                a: this._a
            };
        },
        toHslString: function () {
            var hsl = rgbToHsl(this._r, this._g, this._b);
            var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
            return this._a == 1 ? 'hsl(' + h + ', ' + s + '%, ' + l + '%)' : 'hsla(' + h + ', ' + s + '%, ' + l + '%, ' + this._roundA + ')';
        },
        toHex: function (allow3Char) {
            return rgbToHex(this._r, this._g, this._b, allow3Char);
        },
        toHexString: function (allow3Char) {
            return '#' + this.toHex(allow3Char);
        },
        toHex8: function (allow4Char) {
            return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
        },
        toHex8String: function (allow4Char) {
            return '#' + this.toHex8(allow4Char);
        },
        toRgb: function () {
            return {
                r: mathRound(this._r),
                g: mathRound(this._g),
                b: mathRound(this._b),
                a: this._a
            };
        },
        toRgbString: function () {
            return this._a == 1 ? 'rgb(' + mathRound(this._r) + ', ' + mathRound(this._g) + ', ' + mathRound(this._b) + ')' : 'rgba(' + mathRound(this._r) + ', ' + mathRound(this._g) + ', ' + mathRound(this._b) + ', ' + this._roundA + ')';
        },
        toPercentageRgb: function () {
            return {
                r: mathRound(bound01(this._r, 255) * 100) + '%',
                g: mathRound(bound01(this._g, 255) * 100) + '%',
                b: mathRound(bound01(this._b, 255) * 100) + '%',
                a: this._a
            };
        },
        toPercentageRgbString: function () {
            return this._a == 1 ? 'rgb(' + mathRound(bound01(this._r, 255) * 100) + '%, ' + mathRound(bound01(this._g, 255) * 100) + '%, ' + mathRound(bound01(this._b, 255) * 100) + '%)' : 'rgba(' + mathRound(bound01(this._r, 255) * 100) + '%, ' + mathRound(bound01(this._g, 255) * 100) + '%, ' + mathRound(bound01(this._b, 255) * 100) + '%, ' + this._roundA + ')';
        },
        toName: function () {
            if (this._a === 0) {
                return 'transparent';
            }
            if (this._a < 1) {
                return false;
            }
            return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
        },
        toFilter: function (secondColor) {
            var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
            var secondHex8String = hex8String;
            var gradientType = this._gradientType ? 'GradientType = 1, ' : '';
            if (secondColor) {
                var s = tinycolor(secondColor);
                secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
            }
            return 'progid:DXImageTransform.Microsoft.gradient(' + gradientType + 'startColorstr=' + hex8String + ',endColorstr=' + secondHex8String + ')';
        },
        toString: function (format) {
            var formatSet = !!format;
            format = format || this._format;
            var formattedString = false;
            var hasAlpha = this._a < 1 && this._a >= 0;
            var needsAlphaFormat = !formatSet && hasAlpha && (format === 'hex' || format === 'hex6' || format === 'hex3' || format === 'hex4' || format === 'hex8' || format === 'name');
            if (needsAlphaFormat) {
                if (format === 'name' && this._a === 0) {
                    return this.toName();
                }
                return this.toRgbString();
            }
            if (format === 'rgb') {
                formattedString = this.toRgbString();
            }
            if (format === 'prgb') {
                formattedString = this.toPercentageRgbString();
            }
            if (format === 'hex' || format === 'hex6') {
                formattedString = this.toHexString();
            }
            if (format === 'hex3') {
                formattedString = this.toHexString(true);
            }
            if (format === 'hex4') {
                formattedString = this.toHex8String(true);
            }
            if (format === 'hex8') {
                formattedString = this.toHex8String();
            }
            if (format === 'name') {
                formattedString = this.toName();
            }
            if (format === 'hsl') {
                formattedString = this.toHslString();
            }
            if (format === 'hsv') {
                formattedString = this.toHsvString();
            }
            return formattedString || this.toHexString();
        },
        clone: function () {
            return tinycolor(this.toString());
        },
        _applyModification: function (fn, args) {
            var color = fn.apply(null, [this].concat([].slice.call(args)));
            this._r = color._r;
            this._g = color._g;
            this._b = color._b;
            this.setAlpha(color._a);
            return this;
        },
        lighten: function () {
            return this._applyModification(lighten, arguments);
        },
        brighten: function () {
            return this._applyModification(brighten, arguments);
        },
        darken: function () {
            return this._applyModification(darken, arguments);
        },
        desaturate: function () {
            return this._applyModification(desaturate, arguments);
        },
        saturate: function () {
            return this._applyModification(saturate, arguments);
        },
        greyscale: function () {
            return this._applyModification(greyscale, arguments);
        },
        spin: function () {
            return this._applyModification(spin, arguments);
        },
        _applyCombination: function (fn, args) {
            return fn.apply(null, [this].concat([].slice.call(args)));
        },
        analogous: function () {
            return this._applyCombination(analogous, arguments);
        },
        complement: function () {
            return this._applyCombination(complement, arguments);
        },
        monochromatic: function () {
            return this._applyCombination(monochromatic, arguments);
        },
        splitcomplement: function () {
            return this._applyCombination(splitcomplement, arguments);
        },
        triad: function () {
            return this._applyCombination(triad, arguments);
        },
        tetrad: function () {
            return this._applyCombination(tetrad, arguments);
        }
    };
    tinycolor.fromRatio = function (color, opts) {
        if (typeof color == 'object') {
            var newColor = {};
            for (var i in color) {
                if (color.hasOwnProperty(i)) {
                    if (i === 'a') {
                        newColor[i] = color[i];
                    } else {
                        newColor[i] = convertToPercentage(color[i]);
                    }
                }
            }
            color = newColor;
        }
        return tinycolor(color, opts);
    };
    function inputToRGB(color) {
        var rgb = {
            r: 0,
            g: 0,
            b: 0
        };
        var a = 1;
        var s = null;
        var v = null;
        var l = null;
        var ok = false;
        var format = false;
        if (typeof color == 'string') {
            color = stringInputToObject(color);
        }
        if (typeof color == 'object') {
            if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
                rgb = rgbToRgb(color.r, color.g, color.b);
                ok = true;
                format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';
            } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
                s = convertToPercentage(color.s);
                v = convertToPercentage(color.v);
                rgb = hsvToRgb(color.h, s, v);
                ok = true;
                format = 'hsv';
            } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
                s = convertToPercentage(color.s);
                l = convertToPercentage(color.l);
                rgb = hslToRgb(color.h, s, l);
                ok = true;
                format = 'hsl';
            }
            if (color.hasOwnProperty('a')) {
                a = color.a;
            }
        }
        a = boundAlpha(a);
        return {
            ok: ok,
            format: color.format || format,
            r: mathMin(255, mathMax(rgb.r, 0)),
            g: mathMin(255, mathMax(rgb.g, 0)),
            b: mathMin(255, mathMax(rgb.b, 0)),
            a: a
        };
    }
    function rgbToRgb(r, g, b) {
        return {
            r: bound01(r, 255) * 255,
            g: bound01(g, 255) * 255,
            b: bound01(b, 255) * 255
        };
    }
    function rgbToHsl(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b), min = mathMin(r, g, b);
        var h, s, l = (max + min) / 2;
        if (max == min) {
            h = s = 0;
        } else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
            }
            h /= 6;
        }
        return {
            h: h,
            s: s,
            l: l
        };
    }
    function hslToRgb(h, s, l) {
        var r, g, b;
        h = bound01(h, 360);
        s = bound01(s, 100);
        l = bound01(l, 100);
        function hue2rgb(p, q, t) {
            if (t < 0) {
                t += 1;
            }
            if (t > 1) {
                t -= 1;
            }
            if (t < 1 / 6) {
                return p + (q - p) * 6 * t;
            }
            if (t < 1 / 2) {
                return q;
            }
            if (t < 2 / 3) {
                return p + (q - p) * (2 / 3 - t) * 6;
            }
            return p;
        }
        if (s === 0) {
            r = g = b = l;
        } else {
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }
        return {
            r: r * 255,
            g: g * 255,
            b: b * 255
        };
    }
    function rgbToHsv(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b), min = mathMin(r, g, b);
        var h, s, v = max;
        var d = max - min;
        s = max === 0 ? 0 : d / max;
        if (max == min) {
            h = 0;
        } else {
            switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
            }
            h /= 6;
        }
        return {
            h: h,
            s: s,
            v: v
        };
    }
    function hsvToRgb(h, s, v) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v = bound01(v, 100);
        var i = Math.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r = [
                v,
                q,
                p,
                p,
                t,
                v
            ][mod], g = [
                t,
                v,
                v,
                q,
                p,
                p
            ][mod], b = [
                p,
                p,
                t,
                v,
                v,
                q
            ][mod];
        return {
            r: r * 255,
            g: g * 255,
            b: b * 255
        };
    }
    function rgbToHex(r, g, b, allow3Char) {
        var hex = [
            pad2(mathRound(r).toString(16)),
            pad2(mathRound(g).toString(16)),
            pad2(mathRound(b).toString(16))
        ];
        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
        }
        return hex.join('');
    }
    function rgbaToHex(r, g, b, a, allow4Char) {
        var hex = [
            pad2(mathRound(r).toString(16)),
            pad2(mathRound(g).toString(16)),
            pad2(mathRound(b).toString(16)),
            pad2(convertDecimalToHex(a))
        ];
        if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
        }
        return hex.join('');
    }
    function rgbaToArgbHex(r, g, b, a) {
        var hex = [
            pad2(convertDecimalToHex(a)),
            pad2(mathRound(r).toString(16)),
            pad2(mathRound(g).toString(16)),
            pad2(mathRound(b).toString(16))
        ];
        return hex.join('');
    }
    tinycolor.equals = function (color1, color2) {
        if (!color1 || !color2) {
            return false;
        }
        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
    };
    tinycolor.random = function () {
        return tinycolor.fromRatio({
            r: mathRandom(),
            g: mathRandom(),
            b: mathRandom()
        });
    };
    function desaturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
    }
    function saturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
    }
    function greyscale(color) {
        return tinycolor(color).desaturate(100);
    }
    function lighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
    }
    function brighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var rgb = tinycolor(color).toRgb();
        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
        return tinycolor(rgb);
    }
    function darken(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
    }
    function spin(color, amount) {
        var hsl = tinycolor(color).toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return tinycolor(hsl);
    }
    function complement(color) {
        var hsl = tinycolor(color).toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return tinycolor(hsl);
    }
    function triad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [
            tinycolor(color),
            tinycolor({
                h: (h + 120) % 360,
                s: hsl.s,
                l: hsl.l
            }),
            tinycolor({
                h: (h + 240) % 360,
                s: hsl.s,
                l: hsl.l
            })
        ];
    }
    function tetrad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [
            tinycolor(color),
            tinycolor({
                h: (h + 90) % 360,
                s: hsl.s,
                l: hsl.l
            }),
            tinycolor({
                h: (h + 180) % 360,
                s: hsl.s,
                l: hsl.l
            }),
            tinycolor({
                h: (h + 270) % 360,
                s: hsl.s,
                l: hsl.l
            })
        ];
    }
    function splitcomplement(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [
            tinycolor(color),
            tinycolor({
                h: (h + 72) % 360,
                s: hsl.s,
                l: hsl.l
            }),
            tinycolor({
                h: (h + 216) % 360,
                s: hsl.s,
                l: hsl.l
            })
        ];
    }
    function analogous(color, results, slices) {
        results = results || 6;
        slices = slices || 30;
        var hsl = tinycolor(color).toHsl();
        var part = 360 / slices;
        var ret = [tinycolor(color)];
        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
            hsl.h = (hsl.h + part) % 360;
            ret.push(tinycolor(hsl));
        }
        return ret;
    }
    function monochromatic(color, results) {
        results = results || 6;
        var hsv = tinycolor(color).toHsv();
        var h = hsv.h, s = hsv.s, v = hsv.v;
        var ret = [];
        var modification = 1 / results;
        while (results--) {
            ret.push(tinycolor({
                h: h,
                s: s,
                v: v
            }));
            v = (v + modification) % 1;
        }
        return ret;
    }
    tinycolor.mix = function (color1, color2, amount) {
        amount = amount === 0 ? 0 : amount || 50;
        var rgb1 = tinycolor(color1).toRgb();
        var rgb2 = tinycolor(color2).toRgb();
        var p = amount / 100;
        var rgba = {
            r: (rgb2.r - rgb1.r) * p + rgb1.r,
            g: (rgb2.g - rgb1.g) * p + rgb1.g,
            b: (rgb2.b - rgb1.b) * p + rgb1.b,
            a: (rgb2.a - rgb1.a) * p + rgb1.a
        };
        return tinycolor(rgba);
    };
    tinycolor.readability = function (color1, color2) {
        var c1 = tinycolor(color1);
        var c2 = tinycolor(color2);
        return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
    };
    tinycolor.isReadable = function (color1, color2, wcag2) {
        var readability = tinycolor.readability(color1, color2);
        var wcag2Parms, out;
        out = false;
        wcag2Parms = validateWCAG2Parms(wcag2);
        switch (wcag2Parms.level + wcag2Parms.size) {
        case 'AAsmall':
        case 'AAAlarge':
            out = readability >= 4.5;
            break;
        case 'AAlarge':
            out = readability >= 3;
            break;
        case 'AAAsmall':
            out = readability >= 7;
            break;
        }
        return out;
    };
    tinycolor.mostReadable = function (baseColor, colorList, args) {
        var bestColor = null;
        var bestScore = 0;
        var readability;
        var includeFallbackColors, level, size;
        args = args || {};
        includeFallbackColors = args.includeFallbackColors;
        level = args.level;
        size = args.size;
        for (var i = 0; i < colorList.length; i++) {
            readability = tinycolor.readability(baseColor, colorList[i]);
            if (readability > bestScore) {
                bestScore = readability;
                bestColor = tinycolor(colorList[i]);
            }
        }
        if (tinycolor.isReadable(baseColor, bestColor, {
                'level': level,
                'size': size
            }) || !includeFallbackColors) {
            return bestColor;
        } else {
            args.includeFallbackColors = false;
            return tinycolor.mostReadable(baseColor, [
                '#fff',
                '#000'
            ], args);
        }
    };
    var names = tinycolor.names = {
        aliceblue: 'f0f8ff',
        antiquewhite: 'faebd7',
        aqua: '0ff',
        aquamarine: '7fffd4',
        azure: 'f0ffff',
        beige: 'f5f5dc',
        bisque: 'ffe4c4',
        black: '000',
        blanchedalmond: 'ffebcd',
        blue: '00f',
        blueviolet: '8a2be2',
        brown: 'a52a2a',
        burlywood: 'deb887',
        burntsienna: 'ea7e5d',
        cadetblue: '5f9ea0',
        chartreuse: '7fff00',
        chocolate: 'd2691e',
        coral: 'ff7f50',
        cornflowerblue: '6495ed',
        cornsilk: 'fff8dc',
        crimson: 'dc143c',
        cyan: '0ff',
        darkblue: '00008b',
        darkcyan: '008b8b',
        darkgoldenrod: 'b8860b',
        darkgray: 'a9a9a9',
        darkgreen: '006400',
        darkgrey: 'a9a9a9',
        darkkhaki: 'bdb76b',
        darkmagenta: '8b008b',
        darkolivegreen: '556b2f',
        darkorange: 'ff8c00',
        darkorchid: '9932cc',
        darkred: '8b0000',
        darksalmon: 'e9967a',
        darkseagreen: '8fbc8f',
        darkslateblue: '483d8b',
        darkslategray: '2f4f4f',
        darkslategrey: '2f4f4f',
        darkturquoise: '00ced1',
        darkviolet: '9400d3',
        deeppink: 'ff1493',
        deepskyblue: '00bfff',
        dimgray: '696969',
        dimgrey: '696969',
        dodgerblue: '1e90ff',
        firebrick: 'b22222',
        floralwhite: 'fffaf0',
        forestgreen: '228b22',
        fuchsia: 'f0f',
        gainsboro: 'dcdcdc',
        ghostwhite: 'f8f8ff',
        gold: 'ffd700',
        goldenrod: 'daa520',
        gray: '808080',
        green: '008000',
        greenyellow: 'adff2f',
        grey: '808080',
        honeydew: 'f0fff0',
        hotpink: 'ff69b4',
        indianred: 'cd5c5c',
        indigo: '4b0082',
        ivory: 'fffff0',
        khaki: 'f0e68c',
        lavender: 'e6e6fa',
        lavenderblush: 'fff0f5',
        lawngreen: '7cfc00',
        lemonchiffon: 'fffacd',
        lightblue: 'add8e6',
        lightcoral: 'f08080',
        lightcyan: 'e0ffff',
        lightgoldenrodyellow: 'fafad2',
        lightgray: 'd3d3d3',
        lightgreen: '90ee90',
        lightgrey: 'd3d3d3',
        lightpink: 'ffb6c1',
        lightsalmon: 'ffa07a',
        lightseagreen: '20b2aa',
        lightskyblue: '87cefa',
        lightslategray: '789',
        lightslategrey: '789',
        lightsteelblue: 'b0c4de',
        lightyellow: 'ffffe0',
        lime: '0f0',
        limegreen: '32cd32',
        linen: 'faf0e6',
        magenta: 'f0f',
        maroon: '800000',
        mediumaquamarine: '66cdaa',
        mediumblue: '0000cd',
        mediumorchid: 'ba55d3',
        mediumpurple: '9370db',
        mediumseagreen: '3cb371',
        mediumslateblue: '7b68ee',
        mediumspringgreen: '00fa9a',
        mediumturquoise: '48d1cc',
        mediumvioletred: 'c71585',
        midnightblue: '191970',
        mintcream: 'f5fffa',
        mistyrose: 'ffe4e1',
        moccasin: 'ffe4b5',
        navajowhite: 'ffdead',
        navy: '000080',
        oldlace: 'fdf5e6',
        olive: '808000',
        olivedrab: '6b8e23',
        orange: 'ffa500',
        orangered: 'ff4500',
        orchid: 'da70d6',
        palegoldenrod: 'eee8aa',
        palegreen: '98fb98',
        paleturquoise: 'afeeee',
        palevioletred: 'db7093',
        papayawhip: 'ffefd5',
        peachpuff: 'ffdab9',
        peru: 'cd853f',
        pink: 'ffc0cb',
        plum: 'dda0dd',
        powderblue: 'b0e0e6',
        purple: '800080',
        rebeccapurple: '663399',
        red: 'f00',
        rosybrown: 'bc8f8f',
        royalblue: '4169e1',
        saddlebrown: '8b4513',
        salmon: 'fa8072',
        sandybrown: 'f4a460',
        seagreen: '2e8b57',
        seashell: 'fff5ee',
        sienna: 'a0522d',
        silver: 'c0c0c0',
        skyblue: '87ceeb',
        slateblue: '6a5acd',
        slategray: '708090',
        slategrey: '708090',
        snow: 'fffafa',
        springgreen: '00ff7f',
        steelblue: '4682b4',
        tan: 'd2b48c',
        teal: '008080',
        thistle: 'd8bfd8',
        tomato: 'ff6347',
        turquoise: '40e0d0',
        violet: 'ee82ee',
        wheat: 'f5deb3',
        white: 'fff',
        whitesmoke: 'f5f5f5',
        yellow: 'ff0',
        yellowgreen: '9acd32'
    };
    var hexNames = tinycolor.hexNames = flip(names);
    function flip(o) {
        var flipped = {};
        for (var i in o) {
            if (o.hasOwnProperty(i)) {
                flipped[o[i]] = i;
            }
        }
        return flipped;
    }
    function boundAlpha(a) {
        a = parseFloat(a);
        if (isNaN(a) || a < 0 || a > 1) {
            a = 1;
        }
        return a;
    }
    function bound01(n, max) {
        if (isOnePointZero(n)) {
            n = '100%';
        }
        var processPercent = isPercentage(n);
        n = mathMin(max, mathMax(0, parseFloat(n)));
        if (processPercent) {
            n = parseInt(n * max, 10) / 100;
        }
        if (Math.abs(n - max) < 0.000001) {
            return 1;
        }
        return n % max / parseFloat(max);
    }
    function clamp01(val) {
        return mathMin(1, mathMax(0, val));
    }
    function parseIntFromHex(val) {
        return parseInt(val, 16);
    }
    function isOnePointZero(n) {
        return typeof n == 'string' && n.indexOf('.') != -1 && parseFloat(n) === 1;
    }
    function isPercentage(n) {
        return typeof n === 'string' && n.indexOf('%') != -1;
    }
    function pad2(c) {
        return c.length == 1 ? '0' + c : '' + c;
    }
    function convertToPercentage(n) {
        if (n <= 1) {
            n = n * 100 + '%';
        }
        return n;
    }
    function convertDecimalToHex(d) {
        return Math.round(parseFloat(d) * 255).toString(16);
    }
    function convertHexToDecimal(h) {
        return parseIntFromHex(h) / 255;
    }
    var matchers = function () {
        var CSS_INTEGER = '[-\\+]?\\d+%?';
        var CSS_NUMBER = '[-\\+]?\\d*\\.\\d+%?';
        var CSS_UNIT = '(?:' + CSS_NUMBER + ')|(?:' + CSS_INTEGER + ')';
        var PERMISSIVE_MATCH3 = '[\\s|\\(]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')\\s*\\)?';
        var PERMISSIVE_MATCH4 = '[\\s|\\(]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')\\s*\\)?';
        return {
            CSS_UNIT: new RegExp(CSS_UNIT),
            rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),
            rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),
            hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),
            hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),
            hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),
            hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),
            hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
            hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        };
    }();
    function isValidCSSUnit(color) {
        return !!matchers.CSS_UNIT.exec(color);
    }
    function stringInputToObject(color) {
        color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
        var named = false;
        if (names[color]) {
            color = names[color];
            named = true;
        } else if (color == 'transparent') {
            return {
                r: 0,
                g: 0,
                b: 0,
                a: 0,
                format: 'name'
            };
        }
        var match;
        if (match = matchers.rgb.exec(color)) {
            return {
                r: match[1],
                g: match[2],
                b: match[3]
            };
        }
        if (match = matchers.rgba.exec(color)) {
            return {
                r: match[1],
                g: match[2],
                b: match[3],
                a: match[4]
            };
        }
        if (match = matchers.hsl.exec(color)) {
            return {
                h: match[1],
                s: match[2],
                l: match[3]
            };
        }
        if (match = matchers.hsla.exec(color)) {
            return {
                h: match[1],
                s: match[2],
                l: match[3],
                a: match[4]
            };
        }
        if (match = matchers.hsv.exec(color)) {
            return {
                h: match[1],
                s: match[2],
                v: match[3]
            };
        }
        if (match = matchers.hsva.exec(color)) {
            return {
                h: match[1],
                s: match[2],
                v: match[3],
                a: match[4]
            };
        }
        if (match = matchers.hex8.exec(color)) {
            return {
                r: parseIntFromHex(match[1]),
                g: parseIntFromHex(match[2]),
                b: parseIntFromHex(match[3]),
                a: convertHexToDecimal(match[4]),
                format: named ? 'name' : 'hex8'
            };
        }
        if (match = matchers.hex6.exec(color)) {
            return {
                r: parseIntFromHex(match[1]),
                g: parseIntFromHex(match[2]),
                b: parseIntFromHex(match[3]),
                format: named ? 'name' : 'hex'
            };
        }
        if (match = matchers.hex4.exec(color)) {
            return {
                r: parseIntFromHex(match[1] + '' + match[1]),
                g: parseIntFromHex(match[2] + '' + match[2]),
                b: parseIntFromHex(match[3] + '' + match[3]),
                a: convertHexToDecimal(match[4] + '' + match[4]),
                format: named ? 'name' : 'hex8'
            };
        }
        if (match = matchers.hex3.exec(color)) {
            return {
                r: parseIntFromHex(match[1] + '' + match[1]),
                g: parseIntFromHex(match[2] + '' + match[2]),
                b: parseIntFromHex(match[3] + '' + match[3]),
                format: named ? 'name' : 'hex'
            };
        }
        return false;
    }
    function validateWCAG2Parms(parms) {
        var level, size;
        parms = parms || {
            'level': 'AA',
            'size': 'small'
        };
        level = (parms.level || 'AA').toUpperCase();
        size = (parms.size || 'small').toLowerCase();
        if (level !== 'AA' && level !== 'AAA') {
            level = 'AA';
        }
        if (size !== 'small' && size !== 'large') {
            size = 'small';
        }
        return {
            'level': level,
            'size': size
        };
    }
    if (module.exports) {
        module.exports = tinycolor;
    } else {
        window.tinycolor = tinycolor;
    }
}(Math));
});

var isLight = function (color) {
    return tinycolor(color).isLight();
};

var LogoControl$1 = function LogoControl() {
    __chunk_1.bindAll(['_updateLogo'], this);
    __chunk_1.bindAll(['_updateCompact'], this);
};
LogoControl$1.prototype.onAdd = function onAdd(map) {
    this._map = map;
    this._container = DOM.create('div', 'mapboxgl-ctrl');
    var anchor = DOM.create('a', 'mapmagic-ctrl-logo');
    anchor.target = '_blank';
    anchor.href = 'https://www.mapmagic.co.th/';
    anchor.setAttribute('aria-label', 'MapMagic Logo');
    anchor.setAttribute('rel', 'noopener');
    this._container.appendChild(anchor);
    this._map.on('resize', this._updateCompact);
    this._updateCompact();
    return this._container;
};
LogoControl$1.prototype.onRemove = function onRemove() {
    DOM.remove(this._container);
    this._map.off('resize', this._updateCompact);
};
LogoControl$1.prototype.getDefaultPosition = function getDefaultPosition() {
    return 'bottom-left';
};
LogoControl$1.prototype._updateLogo = function _updateLogo(e) {
    if (!e || e.sourceDataType === 'metadata') {
        this._container.style.display = this._logoRequired() ? 'block' : 'none';
    }
};
LogoControl$1.prototype._logoRequired = function _logoRequired() {
    if (!this._map.style) {
        return;
    }
    var sourceCaches = this._map.style.sourceCaches;
    for (var id in sourceCaches) {
        var source = sourceCaches[id].getSource();
        if (source.mapbox_logo) {
            return true;
        }
    }
    return false;
};
LogoControl$1.prototype._updateCompact = function _updateCompact() {
    var containerChildren = this._container.children;
    if (containerChildren.length) {
        var anchor = containerChildren[0];
        if (this._map.getCanvasContainer().offsetWidth < 250) {
            anchor.classList.add('mapmagicgl-compact');
        } else {
            anchor.classList.remove('mapmagicgl-compact');
        }
    }
};

var getLogConfig = function (callback) {
    if (callback === void 0)
        callback = function () {
        };
    var urlLog = LOGGER_CONFIG_URL;
    var xhr = new __chunk_1.window.XMLHttpRequest();
    xhr.responseType = 'json';
    xhr.open('GET', urlLog, true);
    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            var res = {};
            if (xhr.response) {
                res = xhr.response;
            } else {
                res = {
                    isDebug: false,
                    isLogging: false
                };
            }
            callback(res);
        }
    };
    xhr.send();
    return xhr;
};

var randomID = function () {
    var subRand = function () {
        return ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);
    };
    return subRand() + subRand() + '-' + subRand() + '-' + subRand() + '-' + subRand() + '-' + subRand() + subRand() + subRand();
};

var loggerDebug = {
    addPolygon: true,
    addLine: true
};
var addPolygon = function (payload) {
    var ID = payload.id || randomID();
    if (!payload.coordinates) {
        Logger.warn(addPolygon.name, LOG_CONSTANT.UNDEFINED_COORDINATES, {}, loggerDebug.addPolygon);
    }
    var defaultColor = '#888888';
    var defaultOpacity = 0.4;
    var style = payload.style || {
        fillColor: defaultColor,
        fillOpacity: defaultOpacity
    };
    this.addSource(ID, {
        'type': 'geojson',
        'data': {
            'type': 'FeatureCollection',
            'features': [{
                    'type': 'Feature',
                    'geometry': {
                        'type': 'Polygon',
                        'coordinates': [payload.coordinates]
                    }
                }]
        }
    });
    try {
        this.addLayer({
            'id': 'boundary',
            'type': 'fill',
            'source': ID,
            'paint': {
                'fill-color': style.fillColor || defaultColor,
                'fill-opacity': style.fillOpacity || defaultOpacity
            },
            'filter': [
                '==',
                '$type',
                'Polygon'
            ]
        });
        if (!Logger.getDebug()) {
            Logger.info(addPolygon.name, null, {}, loggerDebug.addPolygon);
        } else {
            Logger.debug(addPolygon.name, null, payload);
        }
    } catch (error) {
        Logger.error(addPolygon.name, error.message, {}, loggerDebug.addPolygon);
    }
    loggerDebug.addPolygon = false;
};
var addLine = function (payload) {
    var ID = payload.id || randomID();
    if (!payload.coordinates) {
        Logger.warn(addLine.name, LOG_CONSTANT.UNDEFINED_COORDINATES);
    }
    var defaultColor = '#FF1233';
    var defaultLineWidth = 3;
    var style = payload.style || {
        lineWidth: defaultLineWidth,
        color: defaultColor
    };
    try {
        this.addLayer({
            'id': ID,
            'type': 'line',
            'source': {
                'type': 'geojson',
                'data': {
                    'type': 'FeatureCollection',
                    'features': [{
                            'type': 'Feature',
                            'properties': { 'color': style.color || defaultColor },
                            'geometry': {
                                'type': 'LineString',
                                'coordinates': payload.coordinates
                            }
                        }]
                }
            },
            'paint': {
                'line-width': style.lineWidth || defaultLineWidth,
                'line-color': {
                    'type': 'identity',
                    'property': 'color'
                }
            }
        });
        if (!Logger.getDebug()) {
            Logger.info(addLine.name, null, {}, loggerDebug.addLine);
        } else {
            Logger.debug(addLine.name, null, payload);
        }
    } catch (error) {
        Logger.error(addLine.name, error.message);
    }
    loggerDebug.addLine = false;
};
var Geometry = {
    addPolygon: addPolygon,
    addLine: addLine
};

var isOverlayClosed = 0;
var map$1 = null;
var macText = 'กด \u2318 + Scroll เพื่อซูมแผนที่';
var winText = 'กด Ctrl + Scroll เพื่อซูมแผนที่';
var mobileText = 'ใช้ 2 นิ้วเพื่อเลื่อนแผนที่';
var isWin = navigator.appVersion.includes('Win');
var isMac = navigator.appVersion.includes('Mac');
var overWrite = function () {
    map$1.dragPan._ignoreEvent = function _ignoreEvent(e) {
        if (map$1.boxZoom && map$1.boxZoom.isActive()) {
            return true;
        }
        if (map$1.dragRotate && map$1.dragRotate.isActive()) {
            return true;
        }
        if (e.touches) {
            return e.touches.length !== 2;
        } else {
            if (e.ctrlKey) {
                return true;
            }
            return e.type !== 'mousemove' && e.button && e.button !== 0;
        }
    };
};
var initStyle = function () {
    var id = map$1._canvasContainer.offsetParent.id;
    document.getElementsByClassName('mapboxgl-canvas')[0].style.zIndex = 1;
    var element = document.createElement('div');
    element.setAttribute('id', 'mapmagic-overlay');
    element.style.height = '100%';
    element.style.width = '100%';
    element.style.backgroundColor = 'black';
    element.style.color = 'white';
    element.style.opacity = 0;
    element.style.fontSize = '1.3rem';
    element.style.display = 'flex';
    element.style.flexDirection = 'row';
    element.style.justifyContent = 'center';
    element.style.alignItems = 'center';
    document.getElementById(id).appendChild(element);
};
var openOverlay = function (text) {
    if (text === void 0)
        text = null;
    var mapmagicOverlay = document.getElementById('mapmagic-overlay');
    var mapmagic = document.getElementsByClassName('mapboxgl-canvas')[0];
    mapmagicOverlay.innerHTML = text;
    mapmagicOverlay.style.zIndex = 1;
    mapmagicOverlay.style.opacity = 0.5;
    mapmagic.style.zIndex = -1;
    mapmagicOverlay.style.transitionDuration = '0.5s';
};
var closeOverlay = function () {
    var mapmagicOverlay = document.getElementById('mapmagic-overlay');
    var mapmagic = document.getElementsByClassName('mapboxgl-canvas')[0];
    mapmagicOverlay.style.zIndex = -1;
    mapmagicOverlay.style.opacity = 0;
    mapmagic.style.zIndex = 1;
    mapmagic.style.transition = 'z-index 0.3s';
    mapmagicOverlay.style.transitionDuration = '0.3s';
};
var handleMobile = function (mobileText) {
    var mapmagicOverlay = document.getElementById('mapmagic-overlay');
    map$1.on('touchstart', function (event) {
        if (event.points.length < 2) {
            openOverlay(mobileText);
            map$1.dragPan.disable();
        } else {
            closeOverlay();
            map$1.dragPan.enable();
        }
    });
    mapmagicOverlay.addEventListener('touchstart', function (e) {
        if (e.touches.length < 2) {
            openOverlay(mobileText);
        } else {
            closeOverlay();
            map$1.dragPan.enable();
        }
    });
    map$1.on('touchend', function () {
        closeOverlay();
    });
};
var _onScroll = function () {
    if (isOverlayClosed === 1) {
        var textShow = isWin ? winText : macText;
        openOverlay(textShow);
    }
};
var _onKeydown = function (e) {
    if (isWin) {
        if (e.ctrlKey) {
            document.removeEventListener('wheel', _onScroll);
            isOverlayClosed = 1;
            closeOverlay();
            map$1.scrollZoom.enable();
        }
    } else if (isMac) {
        if (e.metaKey) {
            document.removeEventListener('wheel', _onScroll);
            isOverlayClosed = 1;
            closeOverlay();
            map$1.scrollZoom.enable();
        }
    }
};
var _onMouseOver = function () {
    isOverlayClosed = 1;
};
var _onMouseOut = function () {
    isOverlayClosed = 0;
    closeOverlay();
};
var _onKeyUp = function (e) {
    if (isWin) {
        if (e.which === 17) {
            document.addEventListener('wheel', _onScroll);
        }
    } else if (isMac) {
        if (e.which === 91) {
            document.addEventListener('wheel', _onScroll);
        }
    }
    isOverlayClosed = 0;
    map$1.scrollZoom.disable();
};
var handleDesktop = function () {
    var mapmagic = document.getElementsByClassName('mapboxgl-canvas')[0];
    if (isWin || isMac) {
        map$1.scrollZoom.disable();
        var mamagicOverlay = document.getElementById('mapmagic-overlay');
        document.addEventListener('keydown', _onKeydown);
        document.addEventListener('scroll', _onScroll);
        document.addEventListener('wheel', _onScroll);
        mapmagic.addEventListener('mouseover', _onMouseOver);
        mamagicOverlay.addEventListener('mouseout', _onMouseOut);
        document.body.addEventListener('keyup', _onKeyUp);
    }
};
var removeDisableScroll = function () {
    var mapmagic = document.getElementsByClassName('mapboxgl-canvas')[0];
    var mamagicOverlay = document.getElementById('mapmagic-overlay');
    document.removeEventListener('keydown', _onKeydown);
    document.removeEventListener('scroll', _onScroll);
    document.removeEventListener('wheel', _onScroll);
    mapmagic.removeEventListener('mouseover', _onMouseOver);
    mamagicOverlay.removeEventListener('mouseout', _onMouseOut);
    document.body.removeEventListener('keyup', _onKeyUp);
};
var disableScroll = function (newMap) {
    map$1 = newMap;
    Logger.info(disableScroll.name);
    overWrite();
    initStyle();
    handleMobile(mobileText);
    handleDesktop(winText, macText);
};
var Handler = {
    disableScroll: disableScroll,
    removeDisableScroll: removeDisableScroll
};

var loggerDebug$1 = {
    addMarker: true,
    addMarkerArray: true,
    addMarkerImage: true,
    addMarkerImageArray: true,
    addMarkerFilter: true,
    setMarker: true
};
var addMarker = function (payload) {
    var this$1 = this;
    if (payload === void 0)
        payload = {};
    if (!payload.lng || !payload.lat) {
        Logger.warn(addMarker.name, LOG_CONSTANT.UNDEFINED_LATLNG, {}, loggerDebug$1.addMarker);
    }
    var ID = payload.id || randomID();
    var geojson = {
        'type': 'FeatureCollection',
        'features': [{
                'type': 'Feature',
                'properties': { 'description': payload.description || '' },
                'geometry': {
                    'type': 'Point',
                    'coordinates': [
                        payload.lng,
                        payload.lat
                    ]
                }
            }]
    };
    var args = {
        id: payload.id || '',
        lat: payload.lat || '',
        lng: payload.lng || '',
        size: payload.size || 1,
        offset: payload.offset || [
            0,
            0
        ]
    };
    try {
        if (payload.onClick) {
            Object.assign(args, { onClick: payload.onClick !== undefined });
            this.on('click', ID, payload.onClick);
        }
        if (payload.draggable) {
            Object.assign(args, { draggable: payload.draggable });
            var isDragging;
            var isCursorOverPoint;
            var canvas = this.getCanvasContainer();
            var onMove = function (e) {
                if (!isDragging) {
                    return;
                }
                var coords = e.lngLat;
                canvas.style.cursor = 'grabbing';
                geojson.features[0].geometry.coordinates = [
                    coords.lng,
                    coords.lat
                ];
                this$1.getSource(ID).setData(geojson);
            };
            var onUp = function (e) {
                if (!isDragging) {
                    return;
                }
                if (payload.onDragEnd && isDragging) {
                    payload.onDragEnd(e);
                }
                canvas.style.cursor = '';
                isDragging = false;
                this$1.off('mousemove', onMove);
            };
            var mouseDown = function () {
                if (!isCursorOverPoint) {
                    return;
                }
                isDragging = true;
                canvas.style.cursor = 'grab';
                this$1.on('mousemove', onMove);
                this$1.once('mouseup', onUp);
            };
            this.on('mouseenter', ID, function () {
                canvas.style.cursor = 'move';
                isCursorOverPoint = true;
                this.dragPan.disable();
            });
            this.on('mouseleave', ID, function () {
                canvas.style.cursor = '';
                isCursorOverPoint = false;
                this.dragPan.enable();
            });
            this.on('mousedown', mouseDown);
        }
        this.addLayer({
            'id': ID,
            'type': 'symbol',
            'source': {
                'type': 'geojson',
                'data': geojson
            },
            'layout': {
                'icon-image': payload.icon || 'mmg_pin_1_orange',
                'icon-allow-overlap': true,
                'icon-size': payload.size || 1,
                'icon-offset': payload.offset || [
                    0,
                    0
                ]
            }
        });
        if (payload.popup) {
            Object.assign(payload.popup, { id: ID });
            this.addPopup(payload.popup);
        }
        if (!Logger.getDebug()) {
            Logger.info(addMarker.name, '', {}, loggerDebug$1.addMarker);
        } else {
            Logger.debug(addMarker.name, '', args, loggerDebug$1.addMarker);
        }
    } catch (error) {
        Logger.error(addMarker.name, error.message, {}, loggerDebug$1.addMarker);
        console.log(error);
    }
    loggerDebug$1.addMarker = false;
};
var removeMarker = function (id) {
    if (id) {
        var layer = this.getLayer(id);
        if (layer) {
            this.removeLayer(id);
            this.removeSource(id);
        } else {
            console.warn('marker ID does not exist');
        }
    }
};
var addMarkerArray = function (payload) {
    if (payload === void 0)
        payload = {};
    var ID = payload.id || randomID();
    if (!Array.isArray(payload.marker)) {
        Logger.warn(addMarkerArray.name, LOG_CONSTANT.INVALID_TYPE, {}, loggerDebug$1.addMarkerArray);
    }
    var args = {
        id: ID,
        markers: payload.marker
    };
    var markerArray = payload.marker.map(function (val, index) {
        if (!val.lng || !val.lat) {
            Logger.warn(addMarkerArray.name, LOG_CONSTANT.UNDEFINED_ARRAY_LATLNG + ' ' + index, {}, loggerDebug$1.addMarkerArray);
        }
        return {
            'type': 'Feature',
            'properties': {
                'description': val.description || '',
                'icon': 'mmg_pin_1_orange'
            },
            'geometry': {
                'type': 'Point',
                'coordinates': [
                    val.lng,
                    val.lat
                ]
            }
        };
    });
    try {
        this.addLayer({
            'id': ID,
            'type': 'symbol',
            'source': {
                'type': 'geojson',
                'data': {
                    'type': 'FeatureCollection',
                    'features': markerArray
                }
            },
            'layout': {
                'icon-image': payload.icon || 'mmg_pin_1_orange',
                'icon-allow-overlap': true
            }
        });
        if (!Logger.getDebug()) {
            Logger.info(addMarkerArray.name, '', {}, loggerDebug$1.addMarkerArray);
        } else {
            Logger.debug(addMarkerArray.name, '', args);
        }
    } catch (error) {
        Logger.error(addMarkerArray.name, error.message, {}, loggerDebug$1.addMarkerArray);
    }
    loggerDebug$1.addMarkerArray = false;
};
var addMarkerImage = function (info) {
    var this$1 = this;
    if (info === void 0)
        info = {};
    var id = info.id;
    var url = info.url;
    var description = info.description;
    var lat = info.lat;
    var lng = info.lng;
    var size = info.size;
    var offset = info.offset;
    var onClick = info.onClick;
    if (!lat || !lng) {
        Logger.warn(addMarkerImage.name, LOG_CONSTANT.UNDEFINED_LATLNG, {}, loggerDebug$1.addMarkerImage);
    }
    var map = this;
    var ID = id || randomID();
    var args = {
        id: ID,
        lat: lat,
        lng: lng,
        img_url: url,
        size: size || 1,
        offset: offset || [
            0,
            0
        ]
    };
    map.loadImage(url || '', function (error, image) {
        if (error) {
            Logger.error(addMarkerImage.name, error.message, {}, loggerDebug$1.addMarkerImage);
            throw error;
        }
        try {
            map.addImage(ID, image);
            if (onClick) {
                Object.assign(args, { onClick: onClick !== undefined });
                this$1.on('click', ID, onClick);
            }
            map.addLayer({
                'id': ID,
                'type': 'symbol',
                'source': {
                    'type': 'geojson',
                    'data': {
                        'type': 'FeatureCollection',
                        'features': [{
                                'type': 'Feature',
                                'properties': {
                                    'description': description || '',
                                    'icon': 'theatre'
                                },
                                'geometry': {
                                    'type': 'Point',
                                    'coordinates': [
                                        lng,
                                        lat
                                    ]
                                }
                            }]
                    }
                },
                'layout': {
                    'icon-image': ID,
                    'icon-size': size || 1,
                    'icon-offset': offset || [
                        0,
                        0
                    ]
                }
            });
            if (!Logger.getDebug()) {
                Logger.info(addMarkerImage.name, null, {}, loggerDebug$1.addMarkerImage);
            } else {
                Logger.debug(addMarkerImage.name, null, args);
            }
        } catch (error) {
            Logger.error(addMarkerImage.name, error.message, {}, loggerDebug$1.addMarkerImage);
        }
    });
    loggerDebug$1.addMarkerImage = false;
};
var addMarkerImageArray = function (info) {
    if (info === void 0)
        info = {};
    var id = info.id;
    var url = info.url;
    var size = info.size;
    var offset = info.offset;
    var places = info.places;
    var map = this;
    var ID = id || randomID();
    var args = {
        img_url: url,
        size: size,
        offset: offset,
        places: places
    };
    var markerArray = places.map(function (val, index) {
        if (!val.lng || !val.lat) {
            Logger.warn(addMarkerImageArray.name, LOG_CONSTANT.UNDEFINED_ARRAY_LATLNG + ' ' + index, {}, loggerDebug$1.addMarkerImageArray);
        }
        return {
            'type': 'Feature',
            'properties': {
                'description': val.description || '',
                'icon': 'theatre'
            },
            'geometry': {
                'type': 'Point',
                'coordinates': [
                    val.lng,
                    val.lat
                ]
            }
        };
    });
    map.loadImage(url || '', function (error, image) {
        if (error) {
            Logger.error(addMarkerImageArray.name, error.message, {}, loggerDebug$1.addMarkerImageArray);
            throw error;
        }
        try {
            map.addImage(ID, image);
            map.addLayer({
                'id': ID,
                'type': 'symbol',
                'source': {
                    'type': 'geojson',
                    'data': {
                        'type': 'FeatureCollection',
                        'features': markerArray
                    }
                },
                'layout': {
                    'icon-image': ID,
                    'icon-size': size || 1,
                    'icon-offset': offset || [
                        0,
                        0
                    ]
                }
            });
            if (!Logger.getDebug()) {
                Logger.info(addMarkerImageArray.name, null, {}, loggerDebug$1.addMarkerImageArray);
            } else {
                Logger.debug(addMarkerImageArray.name, null, args);
            }
        } catch (error) {
            Logger.error(addMarkerImageArray.name, error.message, {}, loggerDebug$1.addMarkerImageArray);
        }
        loggerDebug$1.addMarkerImageArray = false;
    });
};
var addMarkerFilter = function (info) {
    if (info === void 0)
        info = {};
    var places = {
        'type': 'FeatureCollection',
        'features': info.places
    };
    if (!info.places) {
        Logger.warn(addMarkerFilter.name, LOG_CONSTANT.UNDEFINED_PLACE_INFO, {}, loggerDebug$1.addMarkerFilter);
    }
    map.addSource('places', {
        'type': 'geojson',
        'data': places
    });
    var args = { places: info.places };
    places.features.forEach(function (feature) {
        var symbol = feature.properties['icon'];
        var label = feature.properties['label'];
        var layerID = 'poi-' + label;
        if (!map.getLayer(layerID)) {
            try {
                map.addLayer({
                    'id': layerID,
                    'type': 'symbol',
                    'source': 'places',
                    'layout': {
                        'icon-image': symbol,
                        'icon-allow-overlap': true,
                        'text-field': label,
                        'text-font': [
                            'Open Sans Bold',
                            'Arial Unicode MS Bold'
                        ],
                        'text-size': 11,
                        'text-transform': 'uppercase',
                        'text-letter-spacing': 0.05,
                        'text-offset': [
                            0,
                            1.5
                        ]
                    },
                    'paint': {
                        'text-color': '#202',
                        'text-halo-color': '#fff',
                        'text-halo-width': 2
                    },
                    'filter': [
                        '==',
                        'label',
                        label
                    ]
                });
                if (!Logger.getDebug()) {
                    Logger.info(addMarkerFilter.name, null, {}, loggerDebug$1.addMarkerFilter);
                } else {
                    Logger.debug(addMarkerFilter.name, null, args);
                }
            } catch (error) {
                Logger.error(addMarkerFilter.name, error.message, {}, loggerDebug$1.addMarkerFilter);
            }
            layerIDs.push(layerID);
        } else {
            Logger.error(addMarkerFilter.name, LOG_CONSTANT.UNDEFINED_LAYER, {}, loggerDebug$1.addMarkerFilter);
        }
    });
    filterInput.addEventListener('keyup', function (e) {
        var value = e.target.value.trim().toLowerCase();
        layerIDs.forEach(function (layerID) {
            map.setLayoutProperty(layerID, 'visibility', layerID.indexOf(value) > -1 ? 'visible' : 'none');
        });
    });
    loggerDebug$1.addMarkerFilter = false;
};
var setMarker = function (payload) {
    if (payload === void 0)
        payload = {};
    var SET_MARKER = 'mkr-006';
    var id = payload.id;
    var lng = payload.lng;
    var lat = payload.lat;
    if (!lat || !lng) {
        Logger.warn(addMarkerImage.name, LOG_CONSTANT.UNDEFINED_LATLNG, {}, loggerDebug$1.setMarker);
    }
    var geojson = {
        'type': 'Point',
        'coordinates': [
            lng,
            lat
        ]
    };
    try {
        this.getSource(id).setData(geojson);
        if (!Logger.getDebug()) {
            Logger.info(SET_MARKER, null, payload, loggerDebug$1.setMarker);
        } else {
            Logger.debug(SET_MARKER, null, payload);
        }
    } catch (error) {
        Logger.error(SET_MARKER, error.message, {}, loggerDebug$1.setMarker);
    }
    loggerDebug$1.setMarker = Logger.getDebug();
};
var Marker = {
    addMarker: addMarker,
    removeMarker: removeMarker,
    addMarkerArray: addMarkerArray,
    addMarkerImage: addMarkerImage,
    addMarkerImageArray: addMarkerImageArray,
    addMarkerFilter: addMarkerFilter,
    setMarker: setMarker
};

function smartWrap (lngLat, priorPos, transform) {
    lngLat = new LngLat(lngLat.lng, lngLat.lat);
    if (priorPos) {
        var left = new LngLat(lngLat.lng - 360, lngLat.lat);
        var right = new LngLat(lngLat.lng + 360, lngLat.lat);
        var delta = transform.locationPoint(lngLat).distSqr(priorPos);
        if (transform.locationPoint(left).distSqr(priorPos) < delta) {
            lngLat = left;
        } else if (transform.locationPoint(right).distSqr(priorPos) < delta) {
            lngLat = right;
        }
    }
    while (Math.abs(lngLat.lng - transform.center.lng) > 180) {
        var pos = transform.locationPoint(lngLat);
        if (pos.x >= 0 && pos.y >= 0 && pos.x <= transform.width && pos.y <= transform.height) {
            break;
        }
        if (lngLat.lng > transform.center.lng) {
            lngLat.lng -= 360;
        } else {
            lngLat.lng += 360;
        }
    }
    return lngLat;
}

var anchorTranslate = {
    'center': 'translate(-50%,-50%)',
    'top': 'translate(-50%,0)',
    'top-left': 'translate(0,0)',
    'top-right': 'translate(-100%,0)',
    'bottom': 'translate(-50%,-100%)',
    'bottom-left': 'translate(0,-100%)',
    'bottom-right': 'translate(-100%,-100%)',
    'left': 'translate(0,-50%)',
    'right': 'translate(-100%,-50%)'
};
function applyAnchorClass(element, anchor, prefix) {
    var classList = element.classList;
    for (var key in anchorTranslate) {
        classList.remove('mapboxgl-' + prefix + '-anchor-' + key);
    }
    classList.add('mapboxgl-' + prefix + '-anchor-' + anchor);
}

var defaultOptions$2 = {
    closeButton: true,
    closeOnClick: true,
    className: ''
};
var Popup = function (Evented) {
    function Popup(options) {
        Evented.call(this);
        this.options = __chunk_1.extend(Object.create(defaultOptions$2), options);
        __chunk_1.bindAll([
            '_update',
            '_onClickClose'
        ], this);
    }
    if (Evented)
        Popup.__proto__ = Evented;
    Popup.prototype = Object.create(Evented && Evented.prototype);
    Popup.prototype.constructor = Popup;
    Popup.prototype.addTo = function addTo(map) {
        this._map = map;
        this._map.on('move', this._update);
        if (this.options.closeOnClick) {
            this._map.on('click', this._onClickClose);
        }
        this._update();
        this.fire(new __chunk_1.Event('open'));
        return this;
    };
    Popup.prototype.isOpen = function isOpen() {
        return !!this._map;
    };
    Popup.prototype.remove = function remove() {
        if (this._content) {
            DOM.remove(this._content);
        }
        if (this._container) {
            DOM.remove(this._container);
            delete this._container;
        }
        if (this._map) {
            this._map.off('move', this._update);
            this._map.off('click', this._onClickClose);
            delete this._map;
        }
        this.fire(new __chunk_1.Event('close'));
        return this;
    };
    Popup.prototype.getLngLat = function getLngLat() {
        return this._lngLat;
    };
    Popup.prototype.setLngLat = function setLngLat(lnglat) {
        this._lngLat = LngLat.convert(lnglat);
        this._pos = null;
        this._update();
        return this;
    };
    Popup.prototype.setText = function setText(text) {
        return this.setDOMContent(__chunk_1.window.document.createTextNode(text));
    };
    Popup.prototype.setHTML = function setHTML(html) {
        var frag = __chunk_1.window.document.createDocumentFragment();
        var temp = __chunk_1.window.document.createElement('body');
        var child;
        temp.innerHTML = html;
        while (true) {
            child = temp.firstChild;
            if (!child) {
                break;
            }
            frag.appendChild(child);
        }
        return this.setDOMContent(frag);
    };
    Popup.prototype.setDOMContent = function setDOMContent(htmlNode) {
        this._createContent();
        this._content.appendChild(htmlNode);
        this._update();
        return this;
    };
    Popup.prototype._createContent = function _createContent() {
        if (this._content) {
            DOM.remove(this._content);
        }
        this._content = DOM.create('div', 'mapboxgl-popup-content', this._container);
        if (this.options.closeButton) {
            this._closeButton = DOM.create('button', 'mapboxgl-popup-close-button', this._content);
            this._closeButton.type = 'button';
            this._closeButton.setAttribute('aria-label', 'Close popup');
            this._closeButton.innerHTML = '&#215;';
            this._closeButton.addEventListener('click', this._onClickClose);
        }
    };
    Popup.prototype._update = function _update() {
        var this$1 = this;
        if (!this._map || !this._lngLat || !this._content) {
            return;
        }
        if (!this._container) {
            this._container = DOM.create('div', 'mapboxgl-popup', this._map.getContainer());
            this._tip = DOM.create('div', 'mapboxgl-popup-tip', this._container);
            this._container.appendChild(this._content);
            if (this.options.className) {
                this.options.className.split(' ').forEach(function (name) {
                    return this$1._container.classList.add(name);
                });
            }
        }
        if (this._map.transform.renderWorldCopies) {
            this._lngLat = smartWrap(this._lngLat, this._pos, this._map.transform);
        }
        var pos = this._pos = this._map.project(this._lngLat);
        var anchor = this.options.anchor;
        var offset = normalizeOffset(this.options.offset);
        if (!anchor) {
            var width = this._container.offsetWidth;
            var height = this._container.offsetHeight;
            var anchorComponents;
            if (pos.y + offset.bottom.y < height) {
                anchorComponents = ['top'];
            } else if (pos.y > this._map.transform.height - height) {
                anchorComponents = ['bottom'];
            } else {
                anchorComponents = [];
            }
            if (pos.x < width / 2) {
                anchorComponents.push('left');
            } else if (pos.x > this._map.transform.width - width / 2) {
                anchorComponents.push('right');
            }
            if (anchorComponents.length === 0) {
                anchor = 'bottom';
            } else {
                anchor = anchorComponents.join('-');
            }
        }
        var offsetedPos = pos.add(offset[anchor]).round();
        DOM.setTransform(this._container, anchorTranslate[anchor] + ' translate(' + offsetedPos.x + 'px,' + offsetedPos.y + 'px)');
        applyAnchorClass(this._container, anchor, 'popup');
    };
    Popup.prototype._onClickClose = function _onClickClose() {
        this.remove();
    };
    return Popup;
}(__chunk_1.Evented);
function normalizeOffset(offset) {
    if (!offset) {
        return normalizeOffset(new __chunk_1.Point(0, 0));
    } else if (typeof offset === 'number') {
        var cornerOffset = Math.round(Math.sqrt(0.5 * Math.pow(offset, 2)));
        return {
            'center': new __chunk_1.Point(0, 0),
            'top': new __chunk_1.Point(0, offset),
            'top-left': new __chunk_1.Point(cornerOffset, cornerOffset),
            'top-right': new __chunk_1.Point(-cornerOffset, cornerOffset),
            'bottom': new __chunk_1.Point(0, -offset),
            'bottom-left': new __chunk_1.Point(cornerOffset, -cornerOffset),
            'bottom-right': new __chunk_1.Point(-cornerOffset, -cornerOffset),
            'left': new __chunk_1.Point(offset, 0),
            'right': new __chunk_1.Point(-offset, 0)
        };
    } else if (offset instanceof __chunk_1.Point || Array.isArray(offset)) {
        var convertedOffset = __chunk_1.Point.convert(offset);
        return {
            'center': convertedOffset,
            'top': convertedOffset,
            'top-left': convertedOffset,
            'top-right': convertedOffset,
            'bottom': convertedOffset,
            'bottom-left': convertedOffset,
            'bottom-right': convertedOffset,
            'left': convertedOffset,
            'right': convertedOffset
        };
    } else {
        return {
            'center': __chunk_1.Point.convert(offset['center'] || [
                0,
                0
            ]),
            'top': __chunk_1.Point.convert(offset['top'] || [
                0,
                0
            ]),
            'top-left': __chunk_1.Point.convert(offset['top-left'] || [
                0,
                0
            ]),
            'top-right': __chunk_1.Point.convert(offset['top-right'] || [
                0,
                0
            ]),
            'bottom': __chunk_1.Point.convert(offset['bottom'] || [
                0,
                0
            ]),
            'bottom-left': __chunk_1.Point.convert(offset['bottom-left'] || [
                0,
                0
            ]),
            'bottom-right': __chunk_1.Point.convert(offset['bottom-right'] || [
                0,
                0
            ]),
            'left': __chunk_1.Point.convert(offset['left'] || [
                0,
                0
            ]),
            'right': __chunk_1.Point.convert(offset['right'] || [
                0,
                0
            ])
        };
    }
}

var logFirst = true;
var eventShow = function (map, geojson) {
    new Popup({ closeOnClick: false }).setLngLat(geojson.features[0].geometry.coordinates).setHTML(geojson.features[0].properties.description).addTo(map);
};
var eventClick = function (map, id, payload) {
    map.on('click', id, function (e) {
        var popup = new Popup({
            anchor: payload.anchor || '',
            offset: payload.offset || [
                0,
                0
            ]
        }).setLngLat(e.features[0].geometry.coordinates).setHTML(e.features[0].properties.description).addTo(this);
    });
    map.on('mouseenter', id, function () {
        this.getCanvas().style.cursor = 'pointer';
    });
    map.on('mouseleave', id, function () {
        this.getCanvas().style.cursor = '';
    });
};
var eventHover = function (map, id, payload) {
    var popup = new Popup({
        closeButton: false,
        closeOnClick: false,
        anchor: payload.anchor || '',
        offset: payload.offset || [
            0,
            0
        ]
    });
    map.on('mouseenter', id, function (e) {
        this.getCanvas().style.cursor = 'pointer';
        popup.setLngLat(e.features[0].geometry.coordinates).setHTML(e.features[0].properties.description).addTo(this);
    });
    map.on('mouseleave', id, function () {
        this.getCanvas().style.cursor = '';
        popup.remove();
    });
};
var addPopup = function (payload) {
    if (payload === void 0)
        payload = {};
    var ID = payload.id || 'places' + (Math.floor(Math.random() * 1000) + 1);
    var geojson = this.getSource(ID)._data;
    this.getSource(ID).setData(geojson);
    var action = payload.action || 'show';
    if (action === 'show') {
        try {
            eventShow(this, geojson);
            if (!Logger.getDebug()) {
                Logger.info(addPopup.name, null, {}, logFirst);
            } else {
                Logger.debug(addPopup.name, null, payload);
            }
        } catch (error) {
            Logger.error(addPopup.name, error.message);
        }
    } else if (action === 'click') {
        try {
            eventClick(this, ID, payload);
            if (!Logger.getDebug()) {
                Logger.info(addPopup.name, null, {}, logFirst);
            } else {
                Logger.debug(addPopup.name, null, payload);
            }
        } catch (error) {
            Logger.error(addPopup.name, error.message);
        }
    } else if (action === 'hover') {
        try {
            eventHover(this, ID, payload);
            if (!Logger.getDebug()) {
                Logger.info(addPopup.name, null, {}, logFirst);
            } else {
                Logger.debug(addPopup.name, null, payload);
            }
        } catch (error) {
            Logger.error(addPopup.name, error.message);
        }
    }
    logFirst = false;
};
var Popup$1 = { addPopup: addPopup };

var initColorMap = function (payload) {
    if (payload === void 0)
        payload = {};
    try {
        payload.layers.forEach(function (option) {
            var layer = option.layer;
            var color = option.color;
            if (!color) {
                Logger.warn(initColorMap.name, 'missing color!');
            }
            if (!layer) {
                Logger.warn(initColorMap.name, LOG_CONSTANT.UNDEFINED_LAYER);
            }
            var attribute = null;
            var layers = [];
            if (layer == 'street') {
                attribute = 'line-color';
                layers.push('tn-road_class1');
                layers.push('tn-road_class2');
                layers.push('tn-road_class2');
                layers.push('tn-road_class3');
            } else if (layer == 'water') {
                attribute = 'fill-color';
                layers.push('water');
                layers.push('tn-seath');
                layers.push('tn-water_polygon_4');
                layers.push('tn-water_polygon_3');
                layers.push('tn-water_polygon_2');
                layers.push('tn-water_polygon_1');
            } else if (layer == 'province') {
                attribute = 'fill-color';
                layers.push('tn-land_province');
            } else if (layer == 'area') {
                attribute = 'fill-color';
                layers.push('tn-area_gray');
                layers.push('tn-area_down');
            } else if (layer == 'building') {
                attribute = 'fill-color';
                layers.push('tn-area_bldg');
            }
            layers.forEach(function (value) {
                map.setPaintProperty(value, attribute, color);
            });
        });
        Logger.info(initColorMap.name, null, payload);
    } catch (error) {
        Logger.error(initColorMap.name, error.message);
    }
};
var Style$1 = { initColorMap: initColorMap };

var MapMagicGL = function (Map$$1) {
    function MapMagicGL(options) {
        var this$1 = this;
        var newStyle = options.style;
        options.style = undefined;
        if (!options.zoom) {
            options['zoom'] = 9;
        }
        var center = [
            100.49,
            13.72
        ];
        if (options.center) {
            if (options.center.lng && options.center.lat) {
                var ref = options.center;
                var lng = ref.lng;
                var lat = ref.lat;
                center = [
                    lng,
                    lat
                ];
            }
        }
        options.center = center;
        Map$$1.call(this, options);
        this.appId = options.appId || options.app_id;
        getLogConfig(function (config) {
            Logger.init(this$1.appId, config.isLogging, config.isDebug);
        });
        this.styleURL = options.styleURL || options.style_url;
        this.apiKey = options.apiKey || options.api_key;
        this.options = options;
        var styleURL = this.getStyleURL(newStyle, options);
        this.setStyle(styleURL);
        this.on('style.load', this.setLogo);
        if (options.protectScroll === true) {
            Handler.disableScroll(this);
        }
        if (options.navigationCtrl) {
            this.addControl(new NavigationControl());
        }
    }
    if (Map$$1)
        MapMagicGL.__proto__ = Map$$1;
    MapMagicGL.prototype = Object.create(Map$$1 && Map$$1.prototype);
    MapMagicGL.prototype.constructor = MapMagicGL;
    MapMagicGL.prototype.getStyleURL = function getStyleURL(newStyle, option) {
        if (newStyle === void 0)
            newStyle = null;
        var styleURL;
        if (this.styleURL) {
            styleURL = this.styleURL;
        } else {
            var style;
            if (newStyle) {
                style = newStyle;
            } else {
                style = option.style ? option.style : 'ivory';
            }
            styleURL = API_URL + '/' + style + '?app_id=' + this.appId + '&api_key=' + this.apiKey + '&lang=' + option.lang;
            Debugger.alertMissingKey(this.appId || 'error', this.apiKey || 'error');
        }
        return styleURL;
    };
    MapMagicGL.prototype.setStyle = function setStyle(style, option) {
        if (option === void 0)
            option = {};
        var styleURL;
        var validateURL = /^((http[s]?|ftp):\/)?\/?([^:\/\s]+)((\/\w+)*\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$/;
        var isStyleURL = validateURL.exec(style);
        if (isStyleURL) {
            styleURL = style;
        } else {
            styleURL = this.getStyleURL(style, option);
        }
        Map$$1.prototype.setStyle.call(this, styleURL, option);
    };
    MapMagicGL.prototype.setLogo = function setLogo(ref) {
        var style = ref.style;
        if (!document.getElementsByClassName(LOGO_CLASSNAME)[0]) {
            this.addControl(new LogoControl$1(), 'bottom-left');
        }
        var backgroundColor = style.stylesheet.layers[0].paint['background-color'];
        this.logoSrc = isLight(backgroundColor) ? '' : 'dark';
        var logoElement = document.getElementsByClassName(LOGO_CLASSNAME)[0];
        if (logoElement) {
            logoElement.className = LOGO_CLASSNAME + ' ' + this.logoSrc;
        }
    };
    return MapMagicGL;
}(Map);
MapMagicGL.prototype = __chunk_1.extend(MapMagicGL.prototype, Marker, Popup$1, Style$1, Geometry, Handler);

var Marker$1 = function (Evented) {
    function Marker(options) {
        Evented.call(this);
        if (arguments[0] instanceof __chunk_1.window.HTMLElement || arguments.length === 2) {
            options = __chunk_1.extend({ element: options }, arguments[1]);
        }
        __chunk_1.bindAll([
            '_update',
            '_onMove',
            '_onUp',
            '_addDragHandler',
            '_onMapClick'
        ], this);
        this._anchor = options && options.anchor || 'center';
        this._color = options && options.color || '#3FB1CE';
        this._draggable = options && options.draggable || false;
        this._state = 'inactive';
        if (!options || !options.element) {
            this._defaultMarker = true;
            this._element = DOM.create('div');
            var svg = DOM.createNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttributeNS(null, 'height', '41px');
            svg.setAttributeNS(null, 'width', '27px');
            svg.setAttributeNS(null, 'viewBox', '0 0 27 41');
            var markerLarge = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            markerLarge.setAttributeNS(null, 'stroke', 'none');
            markerLarge.setAttributeNS(null, 'stroke-width', '1');
            markerLarge.setAttributeNS(null, 'fill', 'none');
            markerLarge.setAttributeNS(null, 'fill-rule', 'evenodd');
            var page1 = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            page1.setAttributeNS(null, 'fill-rule', 'nonzero');
            var shadow = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            shadow.setAttributeNS(null, 'transform', 'translate(3.0, 29.0)');
            shadow.setAttributeNS(null, 'fill', '#000000');
            var ellipses = [
                {
                    'rx': '10.5',
                    'ry': '5.25002273'
                },
                {
                    'rx': '10.5',
                    'ry': '5.25002273'
                },
                {
                    'rx': '9.5',
                    'ry': '4.77275007'
                },
                {
                    'rx': '8.5',
                    'ry': '4.29549936'
                },
                {
                    'rx': '7.5',
                    'ry': '3.81822308'
                },
                {
                    'rx': '6.5',
                    'ry': '3.34094679'
                },
                {
                    'rx': '5.5',
                    'ry': '2.86367051'
                },
                {
                    'rx': '4.5',
                    'ry': '2.38636864'
                }
            ];
            for (var i = 0, list = ellipses; i < list.length; i += 1) {
                var data = list[i];
                var ellipse = DOM.createNS('http://www.w3.org/2000/svg', 'ellipse');
                ellipse.setAttributeNS(null, 'opacity', '0.04');
                ellipse.setAttributeNS(null, 'cx', '10.5');
                ellipse.setAttributeNS(null, 'cy', '5.80029008');
                ellipse.setAttributeNS(null, 'rx', data['rx']);
                ellipse.setAttributeNS(null, 'ry', data['ry']);
                shadow.appendChild(ellipse);
            }
            var background = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            background.setAttributeNS(null, 'fill', this._color);
            var bgPath = DOM.createNS('http://www.w3.org/2000/svg', 'path');
            bgPath.setAttributeNS(null, 'd', 'M27,13.5 C27,19.074644 20.250001,27.000002 14.75,34.500002 C14.016665,35.500004 12.983335,35.500004 12.25,34.500002 C6.7499993,27.000002 0,19.222562 0,13.5 C0,6.0441559 6.0441559,0 13.5,0 C20.955844,0 27,6.0441559 27,13.5 Z');
            background.appendChild(bgPath);
            var border = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            border.setAttributeNS(null, 'opacity', '0.25');
            border.setAttributeNS(null, 'fill', '#000000');
            var borderPath = DOM.createNS('http://www.w3.org/2000/svg', 'path');
            borderPath.setAttributeNS(null, 'd', 'M13.5,0 C6.0441559,0 0,6.0441559 0,13.5 C0,19.222562 6.7499993,27 12.25,34.5 C13,35.522727 14.016664,35.500004 14.75,34.5 C20.250001,27 27,19.074644 27,13.5 C27,6.0441559 20.955844,0 13.5,0 Z M13.5,1 C20.415404,1 26,6.584596 26,13.5 C26,15.898657 24.495584,19.181431 22.220703,22.738281 C19.945823,26.295132 16.705119,30.142167 13.943359,33.908203 C13.743445,34.180814 13.612715,34.322738 13.5,34.441406 C13.387285,34.322738 13.256555,34.180814 13.056641,33.908203 C10.284481,30.127985 7.4148684,26.314159 5.015625,22.773438 C2.6163816,19.232715 1,15.953538 1,13.5 C1,6.584596 6.584596,1 13.5,1 Z');
            border.appendChild(borderPath);
            var maki = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            maki.setAttributeNS(null, 'transform', 'translate(6.0, 7.0)');
            maki.setAttributeNS(null, 'fill', '#FFFFFF');
            var circleContainer = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            circleContainer.setAttributeNS(null, 'transform', 'translate(8.0, 8.0)');
            var circle1 = DOM.createNS('http://www.w3.org/2000/svg', 'circle');
            circle1.setAttributeNS(null, 'fill', '#000000');
            circle1.setAttributeNS(null, 'opacity', '0.25');
            circle1.setAttributeNS(null, 'cx', '5.5');
            circle1.setAttributeNS(null, 'cy', '5.5');
            circle1.setAttributeNS(null, 'r', '5.4999962');
            var circle2 = DOM.createNS('http://www.w3.org/2000/svg', 'circle');
            circle2.setAttributeNS(null, 'fill', '#FFFFFF');
            circle2.setAttributeNS(null, 'cx', '5.5');
            circle2.setAttributeNS(null, 'cy', '5.5');
            circle2.setAttributeNS(null, 'r', '5.4999962');
            circleContainer.appendChild(circle1);
            circleContainer.appendChild(circle2);
            page1.appendChild(shadow);
            page1.appendChild(background);
            page1.appendChild(border);
            page1.appendChild(maki);
            page1.appendChild(circleContainer);
            svg.appendChild(page1);
            this._element.appendChild(svg);
            this._offset = __chunk_1.Point.convert(options && options.offset || [
                0,
                -14
            ]);
        } else {
            this._element = options.element;
            this._offset = __chunk_1.Point.convert(options && options.offset || [
                0,
                0
            ]);
        }
        this._element.classList.add('mapboxgl-marker');
        this._popup = null;
    }
    if (Evented)
        Marker.__proto__ = Evented;
    Marker.prototype = Object.create(Evented && Evented.prototype);
    Marker.prototype.constructor = Marker;
    Marker.prototype.addTo = function addTo(map) {
        this.remove();
        this._map = map;
        map.getCanvasContainer().appendChild(this._element);
        map.on('move', this._update);
        map.on('moveend', this._update);
        this.setDraggable(this._draggable);
        this._update();
        this._map.on('click', this._onMapClick);
        return this;
    };
    Marker.prototype.remove = function remove() {
        if (this._map) {
            this._map.off('click', this._onMapClick);
            this._map.off('move', this._update);
            this._map.off('moveend', this._update);
            this._map.off('mousedown', this._addDragHandler);
            this._map.off('touchstart', this._addDragHandler);
            delete this._map;
        }
        DOM.remove(this._element);
        if (this._popup) {
            this._popup.remove();
        }
        return this;
    };
    Marker.prototype.getLngLat = function getLngLat() {
        return this._lngLat;
    };
    Marker.prototype.setLngLat = function setLngLat(lnglat) {
        this._lngLat = LngLat.convert(lnglat);
        this._pos = null;
        if (this._popup) {
            this._popup.setLngLat(this._lngLat);
        }
        this._update();
        return this;
    };
    Marker.prototype.getElement = function getElement() {
        return this._element;
    };
    Marker.prototype.setPopup = function setPopup(popup) {
        if (this._popup) {
            this._popup.remove();
            this._popup = null;
        }
        if (popup) {
            if (!('offset' in popup.options)) {
                var markerHeight = 41 - 5.8 / 2;
                var markerRadius = 13.5;
                var linearOffset = Math.sqrt(Math.pow(markerRadius, 2) / 2);
                popup.options.offset = this._defaultMarker ? {
                    'top': [
                        0,
                        0
                    ],
                    'top-left': [
                        0,
                        0
                    ],
                    'top-right': [
                        0,
                        0
                    ],
                    'bottom': [
                        0,
                        -markerHeight
                    ],
                    'bottom-left': [
                        linearOffset,
                        (markerHeight - markerRadius + linearOffset) * -1
                    ],
                    'bottom-right': [
                        -linearOffset,
                        (markerHeight - markerRadius + linearOffset) * -1
                    ],
                    'left': [
                        markerRadius,
                        (markerHeight - markerRadius) * -1
                    ],
                    'right': [
                        -markerRadius,
                        (markerHeight - markerRadius) * -1
                    ]
                } : this._offset;
            }
            this._popup = popup;
            if (this._lngLat) {
                this._popup.setLngLat(this._lngLat);
            }
        }
        return this;
    };
    Marker.prototype._onMapClick = function _onMapClick(e) {
        var targetElement = e.originalEvent.target;
        var element = this._element;
        if (this._popup && (targetElement === element || element.contains(targetElement))) {
            this.togglePopup();
        }
    };
    Marker.prototype.getPopup = function getPopup() {
        return this._popup;
    };
    Marker.prototype.togglePopup = function togglePopup() {
        var popup = this._popup;
        if (!popup) {
            return this;
        } else if (popup.isOpen()) {
            popup.remove();
        } else {
            popup.addTo(this._map);
        }
        return this;
    };
    Marker.prototype._update = function _update(e) {
        if (!this._map) {
            return;
        }
        if (this._map.transform.renderWorldCopies) {
            this._lngLat = smartWrap(this._lngLat, this._pos, this._map.transform);
        }
        this._pos = this._map.project(this._lngLat)._add(this._offset);
        if (!e || e.type === 'moveend') {
            this._pos = this._pos.round();
        }
        DOM.setTransform(this._element, anchorTranslate[this._anchor] + ' translate(' + this._pos.x + 'px, ' + this._pos.y + 'px)');
        applyAnchorClass(this._element, this._anchor, 'marker');
    };
    Marker.prototype.getOffset = function getOffset() {
        return this._offset;
    };
    Marker.prototype.setOffset = function setOffset(offset) {
        this._offset = __chunk_1.Point.convert(offset);
        this._update();
        return this;
    };
    Marker.prototype._onMove = function _onMove(e) {
        this._pos = e.point.sub(this._positionDelta);
        this._lngLat = this._map.unproject(this._pos);
        this.setLngLat(this._lngLat);
        this._element.style.pointerEvents = 'none';
        if (this._state === 'pending') {
            this._state = 'active';
            this.fire(new __chunk_1.Event('dragstart'));
        }
        this.fire(new __chunk_1.Event('drag'));
    };
    Marker.prototype._onUp = function _onUp() {
        this._element.style.pointerEvents = 'auto';
        this._positionDelta = null;
        this._map.off('mousemove', this._onMove);
        this._map.off('touchmove', this._onMove);
        if (this._state === 'active') {
            this.fire(new __chunk_1.Event('dragend'));
        }
        this._state = 'inactive';
    };
    Marker.prototype._addDragHandler = function _addDragHandler(e) {
        if (this._element.contains(e.originalEvent.target)) {
            e.preventDefault();
            this._positionDelta = e.point.sub(this._pos).add(this._offset);
            this._state = 'pending';
            this._map.on('mousemove', this._onMove);
            this._map.on('touchmove', this._onMove);
            this._map.once('mouseup', this._onUp);
            this._map.once('touchend', this._onUp);
        }
    };
    Marker.prototype.setDraggable = function setDraggable(shouldBeDraggable) {
        this._draggable = !!shouldBeDraggable;
        if (this._map) {
            if (shouldBeDraggable) {
                this._map.on('mousedown', this._addDragHandler);
                this._map.on('touchstart', this._addDragHandler);
            } else {
                this._map.off('mousedown', this._addDragHandler);
                this._map.off('touchstart', this._addDragHandler);
            }
        }
        return this;
    };
    Marker.prototype.isDraggable = function isDraggable() {
        return this._draggable;
    };
    return Marker;
}(__chunk_1.Evented);

var defaultOptions$3 = {
    positionOptions: {
        enableHighAccuracy: false,
        maximumAge: 0,
        timeout: 6000
    },
    fitBoundsOptions: { maxZoom: 15 },
    trackUserLocation: false,
    showUserLocation: true
};
var className = 'mapboxgl-ctrl';
var supportsGeolocation;
function checkGeolocationSupport(callback) {
    if (supportsGeolocation !== undefined) {
        callback(supportsGeolocation);
    } else if (__chunk_1.window.navigator.permissions !== undefined) {
        __chunk_1.window.navigator.permissions.query({ name: 'geolocation' }).then(function (p) {
            supportsGeolocation = p.state !== 'denied';
            callback(supportsGeolocation);
        });
    } else {
        supportsGeolocation = !!__chunk_1.window.navigator.geolocation;
        callback(supportsGeolocation);
    }
}
var GeolocateControl = function (Evented) {
    function GeolocateControl(options) {
        Evented.call(this);
        this.options = __chunk_1.extend({}, defaultOptions$3, options);
        __chunk_1.bindAll([
            '_onSuccess',
            '_onError',
            '_finish',
            '_setupUI',
            '_updateCamera',
            '_updateMarker'
        ], this);
    }
    if (Evented)
        GeolocateControl.__proto__ = Evented;
    GeolocateControl.prototype = Object.create(Evented && Evented.prototype);
    GeolocateControl.prototype.constructor = GeolocateControl;
    GeolocateControl.prototype.onAdd = function onAdd(map) {
        this._map = map;
        this._container = DOM.create('div', className + ' ' + className + '-group');
        checkGeolocationSupport(this._setupUI);
        return this._container;
    };
    GeolocateControl.prototype.onRemove = function onRemove() {
        if (this._geolocationWatchID !== undefined) {
            __chunk_1.window.navigator.geolocation.clearWatch(this._geolocationWatchID);
            this._geolocationWatchID = undefined;
        }
        if (this.options.showUserLocation && this._userLocationDotMarker) {
            this._userLocationDotMarker.remove();
        }
        DOM.remove(this._container);
        this._map = undefined;
    };
    GeolocateControl.prototype._onSuccess = function _onSuccess(position) {
        if (this.options.trackUserLocation) {
            this._lastKnownPosition = position;
            switch (this._watchState) {
            case 'WAITING_ACTIVE':
            case 'ACTIVE_LOCK':
            case 'ACTIVE_ERROR':
                this._watchState = 'ACTIVE_LOCK';
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active-error');
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-active');
                break;
            case 'BACKGROUND':
            case 'BACKGROUND_ERROR':
                this._watchState = 'BACKGROUND';
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background-error');
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background');
                break;
            default:
            }
        }
        if (this.options.showUserLocation && this._watchState !== 'OFF') {
            this._updateMarker(position);
        }
        if (!this.options.trackUserLocation || this._watchState === 'ACTIVE_LOCK') {
            this._updateCamera(position);
        }
        if (this.options.showUserLocation) {
            this._dotElement.classList.remove('mapboxgl-user-location-dot-stale');
        }
        this.fire(new __chunk_1.Event('geolocate', position));
        this._finish();
    };
    GeolocateControl.prototype._updateCamera = function _updateCamera(position) {
        var center = new LngLat(position.coords.longitude, position.coords.latitude);
        var radius = position.coords.accuracy;
        this._map.fitBounds(center.toBounds(radius), this.options.fitBoundsOptions, { geolocateSource: true });
    };
    GeolocateControl.prototype._updateMarker = function _updateMarker(position) {
        if (position) {
            this._userLocationDotMarker.setLngLat([
                position.coords.longitude,
                position.coords.latitude
            ]).addTo(this._map);
        } else {
            this._userLocationDotMarker.remove();
        }
    };
    GeolocateControl.prototype._onError = function _onError(error) {
        if (this.options.trackUserLocation) {
            if (error.code === 1) {
                this._watchState = 'OFF';
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active-error');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background-error');
                if (this._geolocationWatchID !== undefined) {
                    this._clearWatch();
                }
            } else {
                switch (this._watchState) {
                case 'WAITING_ACTIVE':
                    this._watchState = 'ACTIVE_ERROR';
                    this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');
                    this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-active-error');
                    break;
                case 'ACTIVE_LOCK':
                    this._watchState = 'ACTIVE_ERROR';
                    this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');
                    this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-active-error');
                    this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-waiting');
                    break;
                case 'BACKGROUND':
                    this._watchState = 'BACKGROUND_ERROR';
                    this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background');
                    this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background-error');
                    this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-waiting');
                    break;
                case 'ACTIVE_ERROR':
                    break;
                default:
                }
            }
        }
        if (this._watchState !== 'OFF' && this.options.showUserLocation) {
            this._dotElement.classList.add('mapboxgl-user-location-dot-stale');
        }
        this.fire(new __chunk_1.Event('error', error));
        this._finish();
    };
    GeolocateControl.prototype._finish = function _finish() {
        if (this._timeoutId) {
            clearTimeout(this._timeoutId);
        }
        this._timeoutId = undefined;
    };
    GeolocateControl.prototype._setupUI = function _setupUI(supported) {
        var this$1 = this;
        if (supported === false) {
            __chunk_1.warnOnce('Geolocation support is not available, the GeolocateControl will not be visible.');
            return;
        }
        this._container.addEventListener('contextmenu', function (e) {
            return e.preventDefault();
        });
        this._geolocateButton = DOM.create('button', className + '-icon ' + className + '-geolocate', this._container);
        this._geolocateButton.type = 'button';
        this._geolocateButton.setAttribute('aria-label', 'Geolocate');
        if (this.options.trackUserLocation) {
            this._geolocateButton.setAttribute('aria-pressed', 'false');
            this._watchState = 'OFF';
        }
        if (this.options.showUserLocation) {
            this._dotElement = DOM.create('div', 'mapboxgl-user-location-dot');
            this._userLocationDotMarker = new Marker$1(this._dotElement);
            if (this.options.trackUserLocation) {
                this._watchState = 'OFF';
            }
        }
        this._geolocateButton.addEventListener('click', this.trigger.bind(this));
        this._setup = true;
        if (this.options.trackUserLocation) {
            this._map.on('movestart', function (event) {
                if (!event.geolocateSource && this$1._watchState === 'ACTIVE_LOCK') {
                    this$1._watchState = 'BACKGROUND';
                    this$1._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background');
                    this$1._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');
                    this$1.fire(new __chunk_1.Event('trackuserlocationend'));
                }
            });
        }
    };
    GeolocateControl.prototype.trigger = function trigger() {
        if (!this._setup) {
            __chunk_1.warnOnce('Geolocate control triggered before added to a map');
            return false;
        }
        if (this.options.trackUserLocation) {
            switch (this._watchState) {
            case 'OFF':
                this._watchState = 'WAITING_ACTIVE';
                this.fire(new __chunk_1.Event('trackuserlocationstart'));
                break;
            case 'WAITING_ACTIVE':
            case 'ACTIVE_LOCK':
            case 'ACTIVE_ERROR':
            case 'BACKGROUND_ERROR':
                this._watchState = 'OFF';
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active-error');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background-error');
                this.fire(new __chunk_1.Event('trackuserlocationend'));
                break;
            case 'BACKGROUND':
                this._watchState = 'ACTIVE_LOCK';
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background');
                if (this._lastKnownPosition) {
                    this._updateCamera(this._lastKnownPosition);
                }
                this.fire(new __chunk_1.Event('trackuserlocationstart'));
                break;
            default:
            }
            switch (this._watchState) {
            case 'WAITING_ACTIVE':
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-active');
                break;
            case 'ACTIVE_LOCK':
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-active');
                break;
            case 'ACTIVE_ERROR':
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-active-error');
                break;
            case 'BACKGROUND':
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background');
                break;
            case 'BACKGROUND_ERROR':
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background-error');
                break;
            case 'OFF':
                break;
            default:
            }
            if (this._watchState === 'OFF' && this._geolocationWatchID !== undefined) {
                this._clearWatch();
            } else if (this._geolocationWatchID === undefined) {
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.setAttribute('aria-pressed', 'true');
                this._geolocationWatchID = __chunk_1.window.navigator.geolocation.watchPosition(this._onSuccess, this._onError, this.options.positionOptions);
            }
        } else {
            __chunk_1.window.navigator.geolocation.getCurrentPosition(this._onSuccess, this._onError, this.options.positionOptions);
            this._timeoutId = setTimeout(this._finish, 10000);
        }
        return true;
    };
    GeolocateControl.prototype._clearWatch = function _clearWatch() {
        __chunk_1.window.navigator.geolocation.clearWatch(this._geolocationWatchID);
        this._geolocationWatchID = undefined;
        this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-waiting');
        this._geolocateButton.setAttribute('aria-pressed', 'false');
        if (this.options.showUserLocation) {
            this._updateMarker(null);
        }
    };
    return GeolocateControl;
}(__chunk_1.Evented);

var defaultOptions$4 = {
    maxWidth: 100,
    unit: 'metric'
};
var ScaleControl = function ScaleControl(options) {
    this.options = __chunk_1.extend({}, defaultOptions$4, options);
    __chunk_1.bindAll([
        '_onMove',
        'setUnit'
    ], this);
};
ScaleControl.prototype.getDefaultPosition = function getDefaultPosition() {
    return 'bottom-left';
};
ScaleControl.prototype._onMove = function _onMove() {
    updateScale(this._map, this._container, this.options);
};
ScaleControl.prototype.onAdd = function onAdd(map) {
    this._map = map;
    this._container = DOM.create('div', 'mapboxgl-ctrl mapboxgl-ctrl-scale', map.getContainer());
    this._map.on('move', this._onMove);
    this._onMove();
    return this._container;
};
ScaleControl.prototype.onRemove = function onRemove() {
    DOM.remove(this._container);
    this._map.off('move', this._onMove);
    this._map = undefined;
};
ScaleControl.prototype.setUnit = function setUnit(unit) {
    this.options.unit = unit;
    updateScale(this._map, this._container, this.options);
};
function updateScale(map, container, options) {
    var maxWidth = options && options.maxWidth || 100;
    var y = map._container.clientHeight / 2;
    var maxMeters = getDistance(map.unproject([
        0,
        y
    ]), map.unproject([
        maxWidth,
        y
    ]));
    if (options && options.unit === 'imperial') {
        var maxFeet = 3.2808 * maxMeters;
        if (maxFeet > 5280) {
            var maxMiles = maxFeet / 5280;
            setScale(container, maxWidth, maxMiles, 'mi');
        } else {
            setScale(container, maxWidth, maxFeet, 'ft');
        }
    } else if (options && options.unit === 'nautical') {
        var maxNauticals = maxMeters / 1852;
        setScale(container, maxWidth, maxNauticals, 'nm');
    } else {
        setScale(container, maxWidth, maxMeters, 'm');
    }
}
function setScale(container, maxWidth, maxDistance, unit) {
    var distance = getRoundNum(maxDistance);
    var ratio = distance / maxDistance;
    if (unit === 'm' && distance >= 1000) {
        distance = distance / 1000;
        unit = 'km';
    }
    container.style.width = maxWidth * ratio + 'px';
    container.innerHTML = distance + unit;
}
function getDistance(latlng1, latlng2) {
    var R = 6371000;
    var rad = Math.PI / 180, lat1 = latlng1.lat * rad, lat2 = latlng2.lat * rad, a = Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos((latlng2.lng - latlng1.lng) * rad);
    var maxMeters = R * Math.acos(Math.min(a, 1));
    return maxMeters;
}
function getRoundNum(num) {
    var pow10 = Math.pow(10, ('' + Math.floor(num)).length - 1);
    var d = num / pow10;
    d = d >= 10 ? 10 : d >= 5 ? 5 : d >= 3 ? 3 : d >= 2 ? 2 : 1;
    return pow10 * d;
}

var FullscreenControl = function FullscreenControl() {
    this._fullscreen = false;
    __chunk_1.bindAll([
        '_onClickFullscreen',
        '_changeIcon'
    ], this);
    if ('onfullscreenchange' in __chunk_1.window.document) {
        this._fullscreenchange = 'fullscreenchange';
    } else if ('onmozfullscreenchange' in __chunk_1.window.document) {
        this._fullscreenchange = 'mozfullscreenchange';
    } else if ('onwebkitfullscreenchange' in __chunk_1.window.document) {
        this._fullscreenchange = 'webkitfullscreenchange';
    } else if ('onmsfullscreenchange' in __chunk_1.window.document) {
        this._fullscreenchange = 'MSFullscreenChange';
    }
    this._className = 'mapboxgl-ctrl';
};
FullscreenControl.prototype.onAdd = function onAdd(map) {
    this._map = map;
    this._mapContainer = this._map.getContainer();
    this._container = DOM.create('div', this._className + ' mapboxgl-ctrl-group');
    if (this._checkFullscreenSupport()) {
        this._setupUI();
    } else {
        this._container.style.display = 'none';
        __chunk_1.warnOnce('This device does not support fullscreen mode.');
    }
    return this._container;
};
FullscreenControl.prototype.onRemove = function onRemove() {
    DOM.remove(this._container);
    this._map = null;
    __chunk_1.window.document.removeEventListener(this._fullscreenchange, this._changeIcon);
};
FullscreenControl.prototype._checkFullscreenSupport = function _checkFullscreenSupport() {
    return !!(__chunk_1.window.document.fullscreenEnabled || __chunk_1.window.document.mozFullScreenEnabled || __chunk_1.window.document.msFullscreenEnabled || __chunk_1.window.document.webkitFullscreenEnabled);
};
FullscreenControl.prototype._setupUI = function _setupUI() {
    var button = this._fullscreenButton = DOM.create('button', this._className + '-icon ' + this._className + '-fullscreen', this._container);
    button.setAttribute('aria-label', 'Toggle fullscreen');
    button.type = 'button';
    this._fullscreenButton.addEventListener('click', this._onClickFullscreen);
    __chunk_1.window.document.addEventListener(this._fullscreenchange, this._changeIcon);
};
FullscreenControl.prototype._isFullscreen = function _isFullscreen() {
    return this._fullscreen;
};
FullscreenControl.prototype._changeIcon = function _changeIcon() {
    var fullscreenElement = __chunk_1.window.document.fullscreenElement || __chunk_1.window.document.mozFullScreenElement || __chunk_1.window.document.webkitFullscreenElement || __chunk_1.window.document.msFullscreenElement;
    if (fullscreenElement === this._mapContainer !== this._fullscreen) {
        this._fullscreen = !this._fullscreen;
        this._fullscreenButton.classList.toggle(this._className + '-shrink');
        this._fullscreenButton.classList.toggle(this._className + '-fullscreen');
    }
};
FullscreenControl.prototype._onClickFullscreen = function _onClickFullscreen() {
    if (this._isFullscreen()) {
        if (__chunk_1.window.document.exitFullscreen) {
            __chunk_1.window.document.exitFullscreen();
        } else if (__chunk_1.window.document.mozCancelFullScreen) {
            __chunk_1.window.document.mozCancelFullScreen();
        } else if (__chunk_1.window.document.msExitFullscreen) {
            __chunk_1.window.document.msExitFullscreen();
        } else if (__chunk_1.window.document.webkitCancelFullScreen) {
            __chunk_1.window.document.webkitCancelFullScreen();
        }
    } else if (this._mapContainer.requestFullscreen) {
        this._mapContainer.requestFullscreen();
    } else if (this._mapContainer.mozRequestFullScreen) {
        this._mapContainer.mozRequestFullScreen();
    } else if (this._mapContainer.msRequestFullscreen) {
        this._mapContainer.msRequestFullscreen();
    } else if (this._mapContainer.webkitRequestFullscreen) {
        this._mapContainer.webkitRequestFullscreen();
    }
};

Style.prototype.loadURL = function (url, options) {
    var this$1 = this;
    if (options === void 0)
        options = {};
    this.fire(new __chunk_1.Event('dataloading', { dataType: 'style' }));
    var validate = typeof options.validate === 'boolean' ? options.validate : !__chunk_1.isMapboxURL(url);
    url = __chunk_1.normalizeStyleURL(url, options.accessToken);
    var request = this.map._transformRequest(url, __chunk_1.ResourceType.Style);
    this._request = __chunk_1.getJSON(request, function (error, json) {
        this$1._request = null;
        if (error) {
            this$1.fire('error', 'APP ID or API Key is invalid');
            Debugger.alertMissingKey(null, null, false);
            this$1.fire('error', { error: error });
        } else if (json) {
            this$1._load(json, validate);
        }
    });
};

var exported = {
    version: __chunk_1.version,
    supported: mapboxGlSupported,
    setRTLTextPlugin: __chunk_1.setRTLTextPlugin,
    Map: MapMagicGL,
    NavigationControl: NavigationControl,
    GeolocateControl: GeolocateControl,
    AttributionControl: AttributionControl,
    ScaleControl: ScaleControl,
    FullscreenControl: FullscreenControl,
    Popup: Popup,
    Marker: Marker$1,
    Style: Style,
    LngLat: LngLat,
    LngLatBounds: LngLatBounds,
    Point: __chunk_1.Point,
    Evented: __chunk_1.Evented,
    config: __chunk_1.config,
    get accessToken() {
        return __chunk_1.config.ACCESS_TOKEN;
    },
    set accessToken(token) {
        __chunk_1.config.ACCESS_TOKEN = token;
    },
    get workerCount() {
        return WorkerPool.workerCount;
    },
    set workerCount(count) {
        WorkerPool.workerCount = count;
    },
    workerUrl: ''
};

return exported;

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
